/******************************************************************************/
/*  BSD 3-clause Clear License                                                */
/*                                                                            */
/*  Copyright (c) 2023                                                        */
/*    Arm Limited (or its affiliates),                                        */
/*    Thomas Bauereiss,                                                       */
/*    Brian Campbell,                                                         */
/*    Alasdair Armstrong,                                                     */
/*    Alastair Reid,                                                          */
/*    Peter Sewell                                                            */
/*                                                                            */
/*  All rights reserved.                                                      */
/*                                                                            */
/*  Redistribution and use in source and binary forms, with or without        */
/*  modification, are permitted (subject to the limitations in the            */
/*  disclaimer below) provided that the following conditions are met:         */
/*                                                                            */
/*    * Redistributions of source code must retain the above copyright        */
/*      notice, this list of conditions and the following disclaimer.         */
/*    * Redistributions in binary form must reproduce the above copyright     */
/*      notice, this list of conditions and the following disclaimer in the   */
/*      documentation and/or other materials provided with the distribution.  */
/*    * Neither the name of ARM Limited nor the names of its contributors     */
/*      may be used to endorse or promote products derived from this          */
/*      software without specific prior written permission.                   */
/*                                                                            */
/*  NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED   */
/*  BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND   */
/*  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,    */
/*  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND         */
/*  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE   */
/*  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,      */
/*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  */
/*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF      */
/*  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON    */
/*  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   */
/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  */
/*  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.         */
/******************************************************************************/

val execute_FMOPA_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPA_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, row, esize);
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                if sub_op then {
                    element1 = FPNeg(element1)
                };
                result = Elem_set(result, row * dim + col, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_FMOPA_ZA_PP_ZZ_32 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_FMOPA_ZA_PP_ZZ_32 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_FMOPA_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_FMOPA_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_FMOPA_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_FMOPA_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_FMOPA_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2258) = {
    SEE = 2258;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_FMOPA_ZA_PP_ZZ_32(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_FMOPS_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPS_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, row, esize);
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                if sub_op then {
                    element1 = FPNeg(element1)
                };
                result = Elem_set(result, row * dim + col, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_FMOPS_ZA_PP_ZZ_32 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_FMOPS_ZA_PP_ZZ_32 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_FMOPS_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_FMOPS_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_FMOPS_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_FMOPS_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_FMOPS_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2259) = {
    SEE = 2259;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_FMOPS_ZA_PP_ZZ_32(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_FMOPA_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPA_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, row, esize);
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                if sub_op then {
                    element1 = FPNeg(element1)
                };
                result = Elem_set(result, row * dim + col, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_FMOPA_ZA_PP_ZZ_64 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_FMOPA_ZA_PP_ZZ_64 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_FMOPA_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_FMOPA_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_FMOPA_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_FMOPA_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_FMOPA_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2260) = {
    SEE = 2260;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_FMOPA_ZA_PP_ZZ_64(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_FMOPS_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPS_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, row, esize);
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                if sub_op then {
                    element1 = FPNeg(element1)
                };
                result = Elem_set(result, row * dim + col, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_FMOPS_ZA_PP_ZZ_64 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_FMOPS_ZA_PP_ZZ_64 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_FMOPS_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_FMOPS_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_FMOPS_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_FMOPS_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_FMOPS_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2261) = {
    SEE = 2261;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_FMOPS_ZA_PP_ZZ_64(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_BFMOPA_ZA32_PP_ZZ__ : forall 'VL 'a 'b 'da 'dim_dim_32 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_32 == div('VL, 32) * (div('VL, 32) * 32)).
  (int('VL), int('dim_dim_32), int('a), int('b), int('da), int('m), int('n), bool('sub_op)) -> unit

function execute_BFMOPA_ZA32_PP_ZZ__ (VL, dim_dim_32, a, b, da, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, 32);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_32) = ZAtile_read(VL, da, 32, dim_dim_32);
    result : bits('dim_dim_32) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            let prow_0 : bool = ActivePredicateElement(mask1, 2 * row + 0, 16);
            let prow_1 : bool = ActivePredicateElement(mask1, 2 * row + 1, 16);
            let pcol_0 : bool = ActivePredicateElement(mask2, 2 * col + 0, 16);
            let pcol_1 : bool = ActivePredicateElement(mask2, 2 * col + 1, 16);
            sum : bits(32) = Elem_read(operand3, row * dim + col, 32);
            if prow_0 & pcol_0 | prow_1 & pcol_1 then {
                erow_0 : bits(16) = if prow_0 then
                  Elem_read(operand1, 2 * row + 0, 16)
                else
                  FPZero(0b0, 16);
                erow_1 : bits(16) = if prow_1 then
                  Elem_read(operand1, 2 * row + 1, 16)
                else
                  FPZero(0b0, 16);
                let ecol_0 : bits(16) = if pcol_0 then
                  Elem_read(operand2, 2 * col + 0, 16)
                else
                  FPZero(0b0, 16);
                let ecol_1 : bits(16) = if pcol_1 then
                  Elem_read(operand2, 2 * col + 1, 16)
                else
                  FPZero(0b0, 16);
                if sub_op then {
                    let honor_altfp : bool = false;
                    if prow_0 then {
                        erow_0 = BFNeg__1(erow_0, honor_altfp)
                    };
                    if prow_1 then {
                        erow_1 = BFNeg__1(erow_1, honor_altfp)
                    };
                    ()
                };
                sum = BFDotAdd(sum, erow_0, erow_1, ecol_0, ecol_1, FPCR_read())
            };
            result = Elem_set(result, row * dim + col, 32, sum)
        }
    };
    ZAtile_set(VL, da, 32, dim_dim_32) = result
}

val decode_BFMOPA_ZA32_PP_ZZ__ : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_BFMOPA_ZA32_PP_ZZ__ (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_BFMOPA_ZA32_PP_ZZ__(128, DIV(128, 32) * DIV(128, 32) * 32, a, b, da, m, n, sub_op)
      },
      256 => {
          execute_BFMOPA_ZA32_PP_ZZ__(256, DIV(256, 32) * DIV(256, 32) * 32, a, b, da, m, n, sub_op)
      },
      512 => {
          execute_BFMOPA_ZA32_PP_ZZ__(512, DIV(512, 32) * DIV(512, 32) * 32, a, b, da, m, n, sub_op)
      },
      1024 => {
          execute_BFMOPA_ZA32_PP_ZZ__(1024, DIV(1024, 32) * DIV(1024, 32) * 32, a, b, da, m, n, sub_op)
      },
      2048 => {
          execute_BFMOPA_ZA32_PP_ZZ__(2048, DIV(2048, 32) * DIV(2048, 32) * 32, a, b, da, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2262) = {
    SEE = 2262;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_BFMOPA_ZA32_PP_ZZ__(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_BFMOPS_ZA32_PP_ZZ__ : forall 'VL 'a 'b 'da 'dim_dim_32 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_32 == div('VL, 32) * (div('VL, 32) * 32)).
  (int('VL), int('dim_dim_32), int('a), int('b), int('da), int('m), int('n), bool('sub_op)) -> unit

function execute_BFMOPS_ZA32_PP_ZZ__ (VL, dim_dim_32, a, b, da, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, 32);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_32) = ZAtile_read(VL, da, 32, dim_dim_32);
    result : bits('dim_dim_32) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            let prow_0 : bool = ActivePredicateElement(mask1, 2 * row + 0, 16);
            let prow_1 : bool = ActivePredicateElement(mask1, 2 * row + 1, 16);
            let pcol_0 : bool = ActivePredicateElement(mask2, 2 * col + 0, 16);
            let pcol_1 : bool = ActivePredicateElement(mask2, 2 * col + 1, 16);
            sum : bits(32) = Elem_read(operand3, row * dim + col, 32);
            if prow_0 & pcol_0 | prow_1 & pcol_1 then {
                erow_0 : bits(16) = if prow_0 then
                  Elem_read(operand1, 2 * row + 0, 16)
                else
                  FPZero(0b0, 16);
                erow_1 : bits(16) = if prow_1 then
                  Elem_read(operand1, 2 * row + 1, 16)
                else
                  FPZero(0b0, 16);
                let ecol_0 : bits(16) = if pcol_0 then
                  Elem_read(operand2, 2 * col + 0, 16)
                else
                  FPZero(0b0, 16);
                let ecol_1 : bits(16) = if pcol_1 then
                  Elem_read(operand2, 2 * col + 1, 16)
                else
                  FPZero(0b0, 16);
                if sub_op then {
                    let honor_altfp : bool = false;
                    if prow_0 then {
                        erow_0 = BFNeg__1(erow_0, honor_altfp)
                    };
                    if prow_1 then {
                        erow_1 = BFNeg__1(erow_1, honor_altfp)
                    };
                    ()
                };
                sum = BFDotAdd(sum, erow_0, erow_1, ecol_0, ecol_1, FPCR_read())
            };
            result = Elem_set(result, row * dim + col, 32, sum)
        }
    };
    ZAtile_set(VL, da, 32, dim_dim_32) = result
}

val decode_BFMOPS_ZA32_PP_ZZ__ : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_BFMOPS_ZA32_PP_ZZ__ (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_BFMOPS_ZA32_PP_ZZ__(128, DIV(128, 32) * DIV(128, 32) * 32, a, b, da, m, n, sub_op)
      },
      256 => {
          execute_BFMOPS_ZA32_PP_ZZ__(256, DIV(256, 32) * DIV(256, 32) * 32, a, b, da, m, n, sub_op)
      },
      512 => {
          execute_BFMOPS_ZA32_PP_ZZ__(512, DIV(512, 32) * DIV(512, 32) * 32, a, b, da, m, n, sub_op)
      },
      1024 => {
          execute_BFMOPS_ZA32_PP_ZZ__(1024, DIV(1024, 32) * DIV(1024, 32) * 32, a, b, da, m, n, sub_op)
      },
      2048 => {
          execute_BFMOPS_ZA32_PP_ZZ__(2048, DIV(2048, 32) * DIV(2048, 32) * 32, a, b, da, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2263) = {
    SEE = 2263;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_BFMOPS_ZA32_PP_ZZ__(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_FMOPA_ZA32_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_32 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_32 == div('VL, 32) * (div('VL, 32) * 32)).
  (int('VL), int('dim_dim_32), int('a), int('b), int('da), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPA_ZA32_PP_ZZ_16 (VL, dim_dim_32, a, b, da, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, 32);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_32) = ZAtile_read(VL, da, 32, dim_dim_32);
    result : bits('dim_dim_32) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            let prow_0 : bool = ActivePredicateElement(mask1, 2 * row + 0, 16);
            let prow_1 : bool = ActivePredicateElement(mask1, 2 * row + 1, 16);
            let pcol_0 : bool = ActivePredicateElement(mask2, 2 * col + 0, 16);
            let pcol_1 : bool = ActivePredicateElement(mask2, 2 * col + 1, 16);
            sum : bits(32) = Elem_read(operand3, row * dim + col, 32);
            if prow_0 & pcol_0 | prow_1 & pcol_1 then {
                erow_0 : bits(16) = if prow_0 then
                  Elem_read(operand1, 2 * row + 0, 16)
                else
                  FPZero(0b0, 16);
                erow_1 : bits(16) = if prow_1 then
                  Elem_read(operand1, 2 * row + 1, 16)
                else
                  FPZero(0b0, 16);
                let ecol_0 : bits(16) = if pcol_0 then
                  Elem_read(operand2, 2 * col + 0, 16)
                else
                  FPZero(0b0, 16);
                let ecol_1 : bits(16) = if pcol_1 then
                  Elem_read(operand2, 2 * col + 1, 16)
                else
                  FPZero(0b0, 16);
                if sub_op then {
                    if prow_0 then {
                        erow_0 = FPNeg(erow_0)
                    };
                    if prow_1 then {
                        erow_1 = FPNeg(erow_1)
                    };
                    ()
                };
                sum = FPDotAdd_ZA(sum, erow_0, erow_1, ecol_0, ecol_1, FPCR_read())
            };
            result = Elem_set(result, row * dim + col, 32, sum)
        }
    };
    ZAtile_set(VL, da, 32, dim_dim_32) = result
}

val decode_FMOPA_ZA32_PP_ZZ_16 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_FMOPA_ZA32_PP_ZZ_16 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_FMOPA_ZA32_PP_ZZ_16(128, DIV(128, 32) * DIV(128, 32) * 32, a, b, da, m, n, sub_op)
      },
      256 => {
          execute_FMOPA_ZA32_PP_ZZ_16(256, DIV(256, 32) * DIV(256, 32) * 32, a, b, da, m, n, sub_op)
      },
      512 => {
          execute_FMOPA_ZA32_PP_ZZ_16(512, DIV(512, 32) * DIV(512, 32) * 32, a, b, da, m, n, sub_op)
      },
      1024 => {
          execute_FMOPA_ZA32_PP_ZZ_16(1024, DIV(1024, 32) * DIV(1024, 32) * 32, a, b, da, m, n, sub_op)
      },
      2048 => {
          execute_FMOPA_ZA32_PP_ZZ_16(2048, DIV(2048, 32) * DIV(2048, 32) * 32, a, b, da, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2264) = {
    SEE = 2264;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_FMOPA_ZA32_PP_ZZ_16(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_FMOPS_ZA32_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_32 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_32 == div('VL, 32) * (div('VL, 32) * 32)).
  (int('VL), int('dim_dim_32), int('a), int('b), int('da), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPS_ZA32_PP_ZZ_16 (VL, dim_dim_32, a, b, da, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, 32);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_32) = ZAtile_read(VL, da, 32, dim_dim_32);
    result : bits('dim_dim_32) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            let prow_0 : bool = ActivePredicateElement(mask1, 2 * row + 0, 16);
            let prow_1 : bool = ActivePredicateElement(mask1, 2 * row + 1, 16);
            let pcol_0 : bool = ActivePredicateElement(mask2, 2 * col + 0, 16);
            let pcol_1 : bool = ActivePredicateElement(mask2, 2 * col + 1, 16);
            sum : bits(32) = Elem_read(operand3, row * dim + col, 32);
            if prow_0 & pcol_0 | prow_1 & pcol_1 then {
                erow_0 : bits(16) = if prow_0 then
                  Elem_read(operand1, 2 * row + 0, 16)
                else
                  FPZero(0b0, 16);
                erow_1 : bits(16) = if prow_1 then
                  Elem_read(operand1, 2 * row + 1, 16)
                else
                  FPZero(0b0, 16);
                let ecol_0 : bits(16) = if pcol_0 then
                  Elem_read(operand2, 2 * col + 0, 16)
                else
                  FPZero(0b0, 16);
                let ecol_1 : bits(16) = if pcol_1 then
                  Elem_read(operand2, 2 * col + 1, 16)
                else
                  FPZero(0b0, 16);
                if sub_op then {
                    if prow_0 then {
                        erow_0 = FPNeg(erow_0)
                    };
                    if prow_1 then {
                        erow_1 = FPNeg(erow_1)
                    };
                    ()
                };
                sum = FPDotAdd_ZA(sum, erow_0, erow_1, ecol_0, ecol_1, FPCR_read())
            };
            result = Elem_set(result, row * dim + col, 32, sum)
        }
    };
    ZAtile_set(VL, da, 32, dim_dim_32) = result
}

val decode_FMOPS_ZA32_PP_ZZ_16 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_FMOPS_ZA32_PP_ZZ_16 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_FMOPS_ZA32_PP_ZZ_16(128, DIV(128, 32) * DIV(128, 32) * 32, a, b, da, m, n, sub_op)
      },
      256 => {
          execute_FMOPS_ZA32_PP_ZZ_16(256, DIV(256, 32) * DIV(256, 32) * 32, a, b, da, m, n, sub_op)
      },
      512 => {
          execute_FMOPS_ZA32_PP_ZZ_16(512, DIV(512, 32) * DIV(512, 32) * 32, a, b, da, m, n, sub_op)
      },
      1024 => {
          execute_FMOPS_ZA32_PP_ZZ_16(1024, DIV(1024, 32) * DIV(1024, 32) * 32, a, b, da, m, n, sub_op)
      },
      2048 => {
          execute_FMOPS_ZA32_PP_ZZ_16(2048, DIV(2048, 32) * DIV(2048, 32) * 32, a, b, da, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2265) = {
    SEE = 2265;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_FMOPS_ZA32_PP_ZZ_16(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SMOPA_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SMOPA_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SMOPA_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_SMOPA_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMOPA_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SMOPA_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SMOPA_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SMOPA_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SMOPA_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2266) = {
    SEE = 2266;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_SMOPA_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SUMOPA_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SUMOPA_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SUMOPA_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_SUMOPA_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_SUMOPA_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SUMOPA_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SUMOPA_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SUMOPA_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SUMOPA_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2267) = {
    SEE = 2267;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_SUMOPA_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_USMOPA_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_USMOPA_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_USMOPA_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_USMOPA_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_USMOPA_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_USMOPA_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_USMOPA_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_USMOPA_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_USMOPA_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2268) = {
    SEE = 2268;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_USMOPA_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_UMOPA_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_UMOPA_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_UMOPA_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_UMOPA_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMOPA_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_UMOPA_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_UMOPA_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_UMOPA_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_UMOPA_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2269) = {
    SEE = 2269;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_UMOPA_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SMOPS_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SMOPS_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SMOPS_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_SMOPS_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMOPS_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SMOPS_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SMOPS_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SMOPS_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SMOPS_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2270) = {
    SEE = 2270;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_SMOPS_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SUMOPS_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SUMOPS_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SUMOPS_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_SUMOPS_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_SUMOPS_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SUMOPS_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SUMOPS_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SUMOPS_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SUMOPS_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2271) = {
    SEE = 2271;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_SUMOPS_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_USMOPS_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_USMOPS_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_USMOPS_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_USMOPS_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_USMOPS_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_USMOPS_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_USMOPS_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_USMOPS_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_USMOPS_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2272) = {
    SEE = 2272;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_USMOPS_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_UMOPS_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_UMOPS_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_UMOPS_ZA_PP_ZZ_32 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_UMOPS_ZA_PP_ZZ_32 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMOPS_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_UMOPS_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_UMOPS_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_UMOPS_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_UMOPS_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2273) = {
    SEE = 2273;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_UMOPS_ZA_PP_ZZ_32(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SMOPA_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SMOPA_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SMOPA_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_SMOPA_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMOPA_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SMOPA_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SMOPA_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SMOPA_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SMOPA_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2274) = {
    SEE = 2274;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_SMOPA_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SUMOPA_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SUMOPA_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SUMOPA_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_SUMOPA_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_SUMOPA_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SUMOPA_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SUMOPA_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SUMOPA_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SUMOPA_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2275) = {
    SEE = 2275;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_SUMOPA_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_USMOPA_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_USMOPA_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_USMOPA_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_USMOPA_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_USMOPA_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_USMOPA_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_USMOPA_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_USMOPA_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_USMOPA_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2276) = {
    SEE = 2276;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_USMOPA_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_UMOPA_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_UMOPA_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_UMOPA_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_UMOPA_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMOPA_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_UMOPA_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_UMOPA_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_UMOPA_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_UMOPA_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2277) = {
    SEE = 2277;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_UMOPA_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SMOPS_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SMOPS_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SMOPS_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_SMOPS_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMOPS_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SMOPS_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SMOPS_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SMOPS_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SMOPS_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2278) = {
    SEE = 2278;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_SMOPS_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SUMOPS_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_SUMOPS_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SUMOPS_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_SUMOPS_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_SUMOPS_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_SUMOPS_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_SUMOPS_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_SUMOPS_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_SUMOPS_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2279) = {
    SEE = 2279;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_SUMOPS_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_USMOPS_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_USMOPS_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_USMOPS_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_USMOPS_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_USMOPS_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_USMOPS_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_USMOPS_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_USMOPS_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_USMOPS_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2280) = {
    SEE = 2280;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_USMOPS_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_UMOPS_ZA_PP_ZZ_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool) ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned), bool('sub_op)) -> unit

function execute_UMOPS_ZA_PP_ZZ_64 (VL, dim_dim_esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 3 by 1 in inc) {
                if ActivePredicateElement(mask1, 4 * row + k, DIV(esize, 4)) & ActivePredicateElement(mask2, 4 * col + k, DIV(esize, 4)) then {
                    prod = asl_Int(Elem_read(operand1, 4 * row + k, DIV(esize, 4)), op1_unsigned) * asl_Int(Elem_read(operand2, 4 * col + k, DIV(esize, 4)), op2_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_UMOPS_ZA_PP_ZZ_64 : (bits(1), bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_UMOPS_ZA_PP_ZZ_64 (u0, u1, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMOPS_ZA_PP_ZZ_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      256 => {
          execute_UMOPS_ZA_PP_ZZ_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      512 => {
          execute_UMOPS_ZA_PP_ZZ_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      1024 => {
          execute_UMOPS_ZA_PP_ZZ_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      },
      2048 => {
          execute_UMOPS_ZA_PP_ZZ_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, op1_unsigned, op2_unsigned, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2281) = {
    SEE = 2281;
    let u0 = Slice(__opcode, 24, 1);
    let u1 = Slice(__opcode, 21, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 3);
    decode_UMOPS_ZA_PP_ZZ_64(u0, u1, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_MOVA_ZA_P_RZ_B : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & 'd == 0 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA_P_RZ_B (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = ZAslice_read(d, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    ZAslice_set(d, esize, vertical, slice_name, VL) = result
}

val decode_MOVA_ZA_P_RZ_B : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_MOVA_ZA_P_RZ_B (size, Q, V, Rs, Pg, Zn, off4) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(Zn);
    let 'd = 0;
    let 'offset = UInt(off4);
    let 'esize = 8;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA_P_RZ_B(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA_P_RZ_B(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA_P_RZ_B(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA_P_RZ_B(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA_P_RZ_B(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2282) = {
    SEE = 2282;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let off4 = Slice(__opcode, 0, 4);
    decode_MOVA_ZA_P_RZ_B(size, Q, V, Rs, Pg, Zn, off4)
}

val execute_MOVA_ZA_P_RZ_H : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 'd in {0, 1} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA_P_RZ_H (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = ZAslice_read(d, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    ZAslice_set(d, esize, vertical, slice_name, VL) = result
}

val decode_MOVA_ZA_P_RZ_H : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_MOVA_ZA_P_RZ_H (size, Q, V, Rs, Pg, Zn, ZAd, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(Zn);
    let 'd = UInt(ZAd);
    let 'offset = UInt(off3);
    let 'esize = 16;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA_P_RZ_H(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA_P_RZ_H(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA_P_RZ_H(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA_P_RZ_H(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA_P_RZ_H(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2283) = {
    SEE = 2283;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAd = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_MOVA_ZA_P_RZ_H(size, Q, V, Rs, Pg, Zn, ZAd, off3)
}

val execute_MOVA_ZA_P_RZ_W : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA_P_RZ_W (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = ZAslice_read(d, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    ZAslice_set(d, esize, vertical, slice_name, VL) = result
}

val decode_MOVA_ZA_P_RZ_W : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(5), bits(2), bits(2)) -> unit

function decode_MOVA_ZA_P_RZ_W (size, Q, V, Rs, Pg, Zn, ZAd, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(Zn);
    let 'd = UInt(ZAd);
    let 'offset = UInt(off2);
    let 'esize = 32;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA_P_RZ_W(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA_P_RZ_W(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA_P_RZ_W(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA_P_RZ_W(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA_P_RZ_W(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2284) = {
    SEE = 2284;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAd = Slice(__opcode, 2, 2);
    let off2 = Slice(__opcode, 0, 2);
    decode_MOVA_ZA_P_RZ_W(size, Q, V, Rs, Pg, Zn, ZAd, off2)
}

val execute_MOVA_ZA_P_RZ_D : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1} & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA_P_RZ_D (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = ZAslice_read(d, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    ZAslice_set(d, esize, vertical, slice_name, VL) = result
}

val decode_MOVA_ZA_P_RZ_D : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_MOVA_ZA_P_RZ_D (size, Q, V, Rs, Pg, Zn, ZAd, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(Zn);
    let 'd = UInt(ZAd);
    let 'offset = UInt(o1);
    let 'esize = 64;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA_P_RZ_D(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA_P_RZ_D(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA_P_RZ_D(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA_P_RZ_D(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA_P_RZ_D(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2285) = {
    SEE = 2285;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAd = Slice(__opcode, 1, 3);
    let o1 = Slice(__opcode, 0, 1);
    decode_MOVA_ZA_P_RZ_D(size, Q, V, Rs, Pg, Zn, ZAd, o1)
}

val execute_MOVA_ZA_P_RZ_Q : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA_P_RZ_Q (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = ZAslice_read(d, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    ZAslice_set(d, esize, vertical, slice_name, VL) = result
}

val decode_MOVA_ZA_P_RZ_Q : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_MOVA_ZA_P_RZ_Q (size, Q, V, Rs, Pg, Zn, ZAd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(Zn);
    let 'd = UInt(ZAd);
    let 'offset = 0;
    let 'esize = 128;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA_P_RZ_Q(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA_P_RZ_Q(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA_P_RZ_Q(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA_P_RZ_Q(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA_P_RZ_Q(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2286) = {
    SEE = 2286;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAd = Slice(__opcode, 0, 4);
    decode_MOVA_ZA_P_RZ_Q(size, Q, V, Rs, Pg, Zn, ZAd)
}

val execute_MOVA_Z_P_RZA_B : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'n == 0 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_Z_P_RZA_B (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_MOVA_Z_P_RZA_B : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(4), bits(5)) -> unit

function decode_MOVA_Z_P_RZA_B (size, Q, V, Rs, Pg, off4, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = 0;
    let 'offset = UInt(off4);
    let 'esize = 8;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_Z_P_RZA_B(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_Z_P_RZA_B(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_Z_P_RZA_B(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_Z_P_RZA_B(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_Z_P_RZA_B(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2287) = {
    SEE = 2287;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let off4 = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVA_Z_P_RZA_B(size, Q, V, Rs, Pg, off4, Zd)
}

val execute_MOVA_Z_P_RZA_H : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'n in {0, 1} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_Z_P_RZA_H (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_MOVA_Z_P_RZA_H : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(1), bits(3), bits(5)) -> unit

function decode_MOVA_Z_P_RZA_H (size, Q, V, Rs, Pg, ZAn, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = UInt(off3);
    let 'esize = 16;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_Z_P_RZA_H(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_Z_P_RZA_H(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_Z_P_RZA_H(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_Z_P_RZA_H(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_Z_P_RZA_H(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2288) = {
    SEE = 2288;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let ZAn = Slice(__opcode, 8, 1);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVA_Z_P_RZA_H(size, Q, V, Rs, Pg, ZAn, off3, Zd)
}

val execute_MOVA_Z_P_RZA_W : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 'n in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_Z_P_RZA_W (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_MOVA_Z_P_RZA_W : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(2), bits(2), bits(5)) -> unit

function decode_MOVA_Z_P_RZA_W (size, Q, V, Rs, Pg, ZAn, off2, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = UInt(off2);
    let 'esize = 32;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_Z_P_RZA_W(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_Z_P_RZA_W(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_Z_P_RZA_W(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_Z_P_RZA_W(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_Z_P_RZA_W(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2289) = {
    SEE = 2289;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let ZAn = Slice(__opcode, 7, 2);
    let off2 = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVA_Z_P_RZA_W(size, Q, V, Rs, Pg, ZAn, off2, Zd)
}

val execute_MOVA_Z_P_RZA_D : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1} & 'n in {0, 1, 2, 3, 4, 5, 6, 7} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_Z_P_RZA_D (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_MOVA_Z_P_RZA_D : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(3), bits(1), bits(5)) -> unit

function decode_MOVA_Z_P_RZA_D (size, Q, V, Rs, Pg, ZAn, o1, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = UInt(o1);
    let 'esize = 64;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_Z_P_RZA_D(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_Z_P_RZA_D(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_Z_P_RZA_D(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_Z_P_RZA_D(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_Z_P_RZA_D(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2290) = {
    SEE = 2290;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let ZAn = Slice(__opcode, 6, 3);
    let o1 = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVA_Z_P_RZA_D(size, Q, V, Rs, Pg, ZAn, o1, Zd)
}

val execute_MOVA_Z_P_RZA_Q : forall 'VL 'd 'esize 'g 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 0 <= 'n & 'n <= 15 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_Z_P_RZA_Q (VL, d, esize, g, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element)
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_MOVA_Z_P_RZA_Q : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(4), bits(5)) -> unit

function decode_MOVA_Z_P_RZA_Q (size, Q, V, Rs, Pg, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let 'esize = 128;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_Z_P_RZA_Q(128, d, esize, g, n, offset, s, vertical)
      },
      256 => {
          execute_MOVA_Z_P_RZA_Q(256, d, esize, g, n, offset, s, vertical)
      },
      512 => {
          execute_MOVA_Z_P_RZA_Q(512, d, esize, g, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_Z_P_RZA_Q(1024, d, esize, g, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_Z_P_RZA_Q(2048, d, esize, g, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2291) = {
    SEE = 2291;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let ZAn = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVA_Z_P_RZA_Q(size, Q, V, Rs, Pg, ZAn, Zd)
}

val execute_LDR_ZA_RI__ : forall 'SVL 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 0 <= 'n & 'n <= 31 & is_VL('SVL)).
  (int('SVL), int('n), int('offset), int('v)) -> unit

function execute_LDR_ZA_RI__ (SVL, n, offset, v) = {
    CheckSMEAndZAEnabled();
    let 'SVL = SVL;
    let 'dim = DIV(SVL, 8);
    base : bits(64) = undefined;
    moffs : int = offset * dim;
    result : bits('SVL) = undefined;
    let vbase : bits(32) = X_read(v, 32);
    let 'vec = MOD(UInt(vbase) + offset, dim);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if HaveTME() & TSTATE.depth > 0 then {
        FailTransaction(TMFailure_ERR, false)
    };
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let aligned : bool = IsAligned__1(base + moffs, 16);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base + moffs, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let 'moffs = moffs in
          {
              result = Elem_set(result, e, 8, AArch64_MemSingle_read(base + moffs, 1, accdesc, aligned))
          };
        moffs = moffs + 1
    };
    ZAvector_set(vec, SVL) = result
}

val decode_LDR_ZA_RI__ : (bits(2), bits(5), bits(4)) -> unit

function decode_LDR_ZA_RI__ (Rv, Rn, off4) = {
    let 'SVL = CurrentSVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'v = UInt(0b011 @ Rv);
    let 'offset = UInt(off4);
    match SVL {
      128 => {
          execute_LDR_ZA_RI__(128, n, offset, v)
      },
      256 => {
          execute_LDR_ZA_RI__(256, n, offset, v)
      },
      512 => {
          execute_LDR_ZA_RI__(512, n, offset, v)
      },
      1024 => {
          execute_LDR_ZA_RI__(1024, n, offset, v)
      },
      2048 => {
          execute_LDR_ZA_RI__(2048, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2292) = {
    SEE = 2292;
    let Rv = Slice(__opcode, 13, 2);
    let Rn = Slice(__opcode, 5, 5);
    let off4 = Slice(__opcode, 0, 4);
    decode_LDR_ZA_RI__(Rv, Rn, off4)
}

val execute_STR_ZA_RI__ : forall 'SVL 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 0 <= 'n & 'n <= 31 & is_VL('SVL)).
  (int('SVL), int('n), int('offset), int('v)) -> unit

function execute_STR_ZA_RI__ (SVL, n, offset, v) = {
    CheckSMEAndZAEnabled();
    let 'SVL = SVL;
    let 'dim = DIV(SVL, 8);
    base : bits(64) = undefined;
    moffs : int = offset * dim;
    let vbase : bits(32) = X_read(v, 32);
    let 'vec = MOD(UInt(vbase) + offset, dim);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if HaveTME() & TSTATE.depth > 0 then {
        FailTransaction(TMFailure_ERR, false)
    };
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('SVL) = ZAvector_read(vec, SVL);
    let aligned : bool = IsAligned__1(base + moffs, 16);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base + moffs, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        let 'moffs = moffs in
          {
              AArch64_MemSingle_set(base + moffs, 1, accdesc, aligned) = Elem_read(src, e, 8)
          };
        moffs = moffs + 1
    }
}

val decode_STR_ZA_RI__ : (bits(2), bits(5), bits(4)) -> unit

function decode_STR_ZA_RI__ (Rv, Rn, off4) = {
    let 'SVL = CurrentSVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'v = UInt(0b011 @ Rv);
    let 'offset = UInt(off4);
    match SVL {
      128 => {
          execute_STR_ZA_RI__(128, n, offset, v)
      },
      256 => {
          execute_STR_ZA_RI__(256, n, offset, v)
      },
      512 => {
          execute_STR_ZA_RI__(512, n, offset, v)
      },
      1024 => {
          execute_STR_ZA_RI__(1024, n, offset, v)
      },
      2048 => {
          execute_STR_ZA_RI__(2048, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2293) = {
    SEE = 2293;
    let Rv = Slice(__opcode, 13, 2);
    let Rn = Slice(__opcode, 5, 5);
    let off4 = Slice(__opcode, 0, 4);
    decode_STR_ZA_RI__(Rv, Rn, off4)
}

val execute_LD1B_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t == 0 & 0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_LD1B_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        };
        moffs = moffs + 1
    };
    ZAslice_set(t, esize, vertical, slice_name, VL) = result
}

val decode_LD1B_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_LD1B_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, off4) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = 0;
    let 'offset = UInt(off4);
    let 'esize = 8;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_LD1B_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_LD1B_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_LD1B_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_LD1B_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_LD1B_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2294) = {
    SEE = 2294;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let off4 = Slice(__opcode, 0, 4);
    decode_LD1B_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, off4)
}

val execute_LD1H_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t in {0, 1} & 0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_LD1H_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        };
        moffs = moffs + 1
    };
    ZAslice_set(t, esize, vertical, slice_name, VL) = result
}

val decode_LD1H_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_LD1H_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, ZAt, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = UInt(off3);
    let 'esize = 16;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_LD1H_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_LD1H_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_LD1H_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_LD1H_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_LD1H_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2295) = {
    SEE = 2295;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_LD1H_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, ZAt, off3)
}

val execute_LD1W_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t in {0, 1, 2, 3} & 0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_LD1W_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        };
        moffs = moffs + 1
    };
    ZAslice_set(t, esize, vertical, slice_name, VL) = result
}

val decode_LD1W_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(2), bits(2)) -> unit

function decode_LD1W_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, ZAt, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = UInt(off2);
    let 'esize = 32;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_LD1W_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_LD1W_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_LD1W_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_LD1W_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_LD1W_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2296) = {
    SEE = 2296;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 2, 2);
    let off2 = Slice(__opcode, 0, 2);
    decode_LD1W_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, ZAt, off2)
}

val execute_LD1D_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 's & 's <= 31 & 'offset in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_LD1D_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        };
        moffs = moffs + 1
    };
    ZAslice_set(t, esize, vertical, slice_name, VL) = result
}

val decode_LD1D_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1D_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, ZAt, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = UInt(o1);
    let 'esize = 64;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_LD1D_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_LD1D_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_LD1D_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_LD1D_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_LD1D_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2297) = {
    SEE = 2297;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 1, 3);
    let o1 = Slice(__opcode, 0, 1);
    decode_LD1D_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, ZAt, o1)
}

val execute_LD1Q_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  (0 <= 't & 't <= 15 & 0 <= 's & 's <= 31 & 'offset == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_LD1Q_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        };
        moffs = moffs + 1
    };
    ZAslice_set(t, esize, vertical, slice_name, VL) = result
}

val decode_LD1Q_ZA_P_RRR__ : (bits(5), bits(1), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_LD1Q_ZA_P_RRR__ (Rm, V, Rs, Pg, Rn, ZAt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = 0;
    let 'esize = 128;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_LD1Q_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_LD1Q_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_LD1Q_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_LD1Q_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_LD1Q_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2298) = {
    SEE = 2298;
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 0, 4);
    decode_LD1Q_ZA_P_RRR__(Rm, V, Rs, Pg, Rn, ZAt)
}

val execute_ST1B_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t == 0 & 0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_ST1B_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('VL) = ZAslice_read(t, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        moffs = moffs + 1
    }
}

val decode_ST1B_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_ST1B_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, off4) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = 0;
    let 'offset = UInt(off4);
    let 'esize = 8;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_ST1B_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_ST1B_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_ST1B_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_ST1B_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_ST1B_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2299) = {
    SEE = 2299;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let off4 = Slice(__opcode, 0, 4);
    decode_ST1B_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, off4)
}

val execute_ST1H_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t in {0, 1} & 0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_ST1H_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('VL) = ZAslice_read(t, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        moffs = moffs + 1
    }
}

val decode_ST1H_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(1), bits(3)) -> unit

function decode_ST1H_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, ZAt, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = UInt(off3);
    let 'esize = 16;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_ST1H_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_ST1H_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_ST1H_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_ST1H_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_ST1H_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2300) = {
    SEE = 2300;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_ST1H_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, ZAt, off3)
}

val execute_ST1W_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t in {0, 1, 2, 3} & 0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_ST1W_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('VL) = ZAslice_read(t, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        moffs = moffs + 1
    }
}

val decode_ST1W_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(2), bits(2)) -> unit

function decode_ST1W_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, ZAt, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = UInt(off2);
    let 'esize = 32;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_ST1W_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_ST1W_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_ST1W_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_ST1W_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_ST1W_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2301) = {
    SEE = 2301;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 2, 2);
    let off2 = Slice(__opcode, 0, 2);
    decode_ST1W_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, ZAt, off2)
}

val execute_ST1D_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  ('t in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 's & 's <= 31 & 'offset in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_ST1D_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('VL) = ZAslice_read(t, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        moffs = moffs + 1
    }
}

val decode_ST1D_ZA_P_RRR__ : (bits(2), bits(5), bits(1), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1D_ZA_P_RRR__ (msz, Rm, V, Rs, Pg, Rn, ZAt, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = UInt(o1);
    let 'esize = 64;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_ST1D_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_ST1D_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_ST1D_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_ST1D_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_ST1D_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2302) = {
    SEE = 2302;
    let msz = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 1, 3);
    let o1 = Slice(__opcode, 0, 1);
    decode_ST1D_ZA_P_RRR__(msz, Rm, V, Rs, Pg, Rn, ZAt, o1)
}

val execute_ST1Q_ZA_P_RRR__ : forall 'VL 'esize 'g 'm 'n 'offset 's 't ('vertical : Bool),
  (0 <= 't & 't <= 15 & 0 <= 's & 's <= 31 & 'offset == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('offset), int('s), int('t), bool('vertical)) -> unit

function execute_ST1Q_ZA_P_RRR__ (VL, esize, g, m, n, offset, s, t, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    base : bits(64) = undefined;
    addr : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    moffs : bits(64) = X_read(m, 64);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        if AnyActiveElement(mask, esize) | ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('VL) = ZAslice_read(t, esize, vertical, slice_name, VL);
    foreach (e from 0 to (dim - 1) by 1 in inc) {
        addr = base + UInt(moffs) * mbytes;
        if ActivePredicateElement(mask, e, esize) then {
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        moffs = moffs + 1
    }
}

val decode_ST1Q_ZA_P_RRR__ : (bits(5), bits(1), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_ST1Q_ZA_P_RRR__ (Rm, V, Rs, Pg, Rn, ZAt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b0 @ Pg);
    let 's = UInt(0b011 @ Rs);
    let 't = UInt(ZAt);
    let 'offset = 0;
    let 'esize = 128;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_ST1Q_ZA_P_RRR__(128, esize, g, m, n, offset, s, t, vertical)
      },
      256 => {
          execute_ST1Q_ZA_P_RRR__(256, esize, g, m, n, offset, s, t, vertical)
      },
      512 => {
          execute_ST1Q_ZA_P_RRR__(512, esize, g, m, n, offset, s, t, vertical)
      },
      1024 => {
          execute_ST1Q_ZA_P_RRR__(1024, esize, g, m, n, offset, s, t, vertical)
      },
      2048 => {
          execute_ST1Q_ZA_P_RRR__(2048, esize, g, m, n, offset, s, t, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2303) = {
    SEE = 2303;
    let Rm = Slice(__opcode, 16, 5);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let ZAt = Slice(__opcode, 0, 4);
    decode_ST1Q_ZA_P_RRR__(Rm, V, Rs, Pg, Rn, ZAt)
}

val execute_ADDHA_ZA_PP_Z_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('n)) -> unit

function execute_ADDHA_ZA_PP_Z_32 (VL, dim_dim_esize, a, b, da, esize, n) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand_src : bits('VL) = Z_read(n, VL);
    let operand_acc : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (col from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand_src, col, esize);
        foreach (row from 0 to (dim - 1) by 1 in inc) {
            res : bits('esize) = Elem_read(operand_acc, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                res = res + element
            };
            result = Elem_set(result, row * dim + col, esize, res)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_ADDHA_ZA_PP_Z_32 : (bits(1), bits(3), bits(3), bits(5), bits(2)) -> unit

function decode_ADDHA_ZA_PP_Z_32 (V, Pm, Pn, Zn, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'da = UInt(ZAda);
    match VL {
      128 => {
          execute_ADDHA_ZA_PP_Z_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, n)
      },
      256 => {
          execute_ADDHA_ZA_PP_Z_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, n)
      },
      512 => {
          execute_ADDHA_ZA_PP_Z_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, n)
      },
      1024 => {
          execute_ADDHA_ZA_PP_Z_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, n)
      },
      2048 => {
          execute_ADDHA_ZA_PP_Z_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2304) = {
    SEE = 2304;
    let V = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAda = Slice(__opcode, 0, 2);
    decode_ADDHA_ZA_PP_Z_32(V, Pm, Pn, Zn, ZAda)
}

val execute_ADDHA_ZA_PP_Z_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('n)) -> unit

function execute_ADDHA_ZA_PP_Z_64 (VL, dim_dim_esize, a, b, da, esize, n) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand_src : bits('VL) = Z_read(n, VL);
    let operand_acc : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (col from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand_src, col, esize);
        foreach (row from 0 to (dim - 1) by 1 in inc) {
            res : bits('esize) = Elem_read(operand_acc, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                res = res + element
            };
            result = Elem_set(result, row * dim + col, esize, res)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_ADDHA_ZA_PP_Z_64 : (bits(1), bits(3), bits(3), bits(5), bits(3)) -> unit

function decode_ADDHA_ZA_PP_Z_64 (V, Pm, Pn, Zn, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'da = UInt(ZAda);
    match VL {
      128 => {
          execute_ADDHA_ZA_PP_Z_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, n)
      },
      256 => {
          execute_ADDHA_ZA_PP_Z_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, n)
      },
      512 => {
          execute_ADDHA_ZA_PP_Z_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, n)
      },
      1024 => {
          execute_ADDHA_ZA_PP_Z_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, n)
      },
      2048 => {
          execute_ADDHA_ZA_PP_Z_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2305) = {
    SEE = 2305;
    let V = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAda = Slice(__opcode, 0, 3);
    decode_ADDHA_ZA_PP_Z_64(V, Pm, Pn, Zn, ZAda)
}

val execute_ADDVA_ZA_PP_Z_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('n)) -> unit

function execute_ADDVA_ZA_PP_Z_32 (VL, dim_dim_esize, a, b, da, esize, n) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand_src : bits('VL) = Z_read(n, VL);
    let operand_acc : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand_src, row, esize);
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            res : bits('esize) = Elem_read(operand_acc, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                res = res + element
            };
            result = Elem_set(result, row * dim + col, esize, res)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_ADDVA_ZA_PP_Z_32 : (bits(1), bits(3), bits(3), bits(5), bits(2)) -> unit

function decode_ADDVA_ZA_PP_Z_32 (V, Pm, Pn, Zn, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'da = UInt(ZAda);
    match VL {
      128 => {
          execute_ADDVA_ZA_PP_Z_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, n)
      },
      256 => {
          execute_ADDVA_ZA_PP_Z_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, n)
      },
      512 => {
          execute_ADDVA_ZA_PP_Z_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, n)
      },
      1024 => {
          execute_ADDVA_ZA_PP_Z_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, n)
      },
      2048 => {
          execute_ADDVA_ZA_PP_Z_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2306) = {
    SEE = 2306;
    let V = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAda = Slice(__opcode, 0, 2);
    decode_ADDVA_ZA_PP_Z_32(V, Pm, Pn, Zn, ZAda)
}

val execute_ADDVA_ZA_PP_Z_64 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 64 & 'da in {0, 1, 2, 3, 4, 5, 6, 7} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('n)) -> unit

function execute_ADDVA_ZA_PP_Z_64 (VL, dim_dim_esize, a, b, da, esize, n) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand_src : bits('VL) = Z_read(n, VL);
    let operand_acc : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand_src, row, esize);
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            res : bits('esize) = Elem_read(operand_acc, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                res = res + element
            };
            result = Elem_set(result, row * dim + col, esize, res)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_ADDVA_ZA_PP_Z_64 : (bits(1), bits(3), bits(3), bits(5), bits(3)) -> unit

function decode_ADDVA_ZA_PP_Z_64 (V, Pm, Pn, Zn, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'da = UInt(ZAda);
    match VL {
      128 => {
          execute_ADDVA_ZA_PP_Z_64(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, n)
      },
      256 => {
          execute_ADDVA_ZA_PP_Z_64(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, n)
      },
      512 => {
          execute_ADDVA_ZA_PP_Z_64(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, n)
      },
      1024 => {
          execute_ADDVA_ZA_PP_Z_64(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, n)
      },
      2048 => {
          execute_ADDVA_ZA_PP_Z_64(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2307) = {
    SEE = 2307;
    let V = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ZAda = Slice(__opcode, 0, 3);
    decode_ADDVA_ZA_PP_Z_64(V, Pm, Pn, Zn, ZAda)
}

val execute_ZERO_ZA_I__ : forall 'SVL 'dim_dim_esize 'esize,
  ('esize == 64 & is_VL('SVL) & 'dim_dim_esize == div('SVL, 'esize) * (div('SVL, 'esize) * 'esize)).
  (int('SVL), int('dim_dim_esize), int('esize), bits(8)) -> unit

function execute_ZERO_ZA_I__ (SVL, dim_dim_esize, esize, mask) = {
    CheckSMEAndZAEnabled();
    let 'SVL = SVL;
    let 'dim = DIV(SVL, esize);
    let result : bits('dim_dim_esize) = Zeros(dim_dim_esize);
    if HaveTME() & TSTATE.depth > 0 then {
        FailTransaction(TMFailure_ERR, false)
    };
    foreach (i from 0 to 7 by 1 in inc) {
        if [mask[i]] == 0b1 then {
            ZAtile_set(SVL, i, esize, dim_dim_esize) = result
        };
        ()
    }
}

val decode_ZERO_ZA_I__ : bits(8) -> unit

function decode_ZERO_ZA_I__ imm8 = {
    let 'SVL = CurrentSVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let mask : bits(8) = imm8;
    let 'esize = 64;
    match SVL {
      128 => {
          execute_ZERO_ZA_I__(128, DIV(128, esize) * DIV(128, esize) * esize, esize, mask)
      },
      256 => {
          execute_ZERO_ZA_I__(256, DIV(256, esize) * DIV(256, esize) * esize, esize, mask)
      },
      512 => {
          execute_ZERO_ZA_I__(512, DIV(512, esize) * DIV(512, esize) * esize, esize, mask)
      },
      1024 => {
          execute_ZERO_ZA_I__(1024, DIV(1024, esize) * DIV(1024, esize) * esize, esize, mask)
      },
      2048 => {
          execute_ZERO_ZA_I__(2048, DIV(2048, esize) * DIV(2048, esize) * esize, esize, mask)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2308) = {
    SEE = 2308;
    let imm8 = Slice(__opcode, 0, 8);
    decode_ZERO_ZA_I__(imm8)
}

val execute_MOVA_ZA2_Z_B1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'esize == 8 & 'd == 0 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA2_Z_B1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA2_Z_B1 : (bits(2), bits(1), bits(2), bits(4), bits(3)) -> unit

function decode_MOVA_ZA2_Z_B1 (size, V, Rs, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 8;
    let 'n = UInt(Zn @ 0b0);
    let 'd = 0;
    let 'offset = UInt(off3 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA2_Z_B1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA2_Z_B1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA2_Z_B1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA2_Z_B1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA2_Z_B1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2309) = {
    SEE = 2309;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_MOVA_ZA2_Z_B1(size, V, Rs, Zn, off3)
}

val execute_MOVA_ZA2_Z_H1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'esize == 16 & 'd in {0, 1} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA2_Z_H1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA2_Z_H1 : (bits(2), bits(1), bits(2), bits(4), bits(1), bits(2)) -> unit

function decode_MOVA_ZA2_Z_H1 (size, V, Rs, Zn, ZAd, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(ZAd);
    let 'offset = UInt(off2 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA2_Z_H1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA2_Z_H1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA2_Z_H1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA2_Z_H1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA2_Z_H1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2310) = {
    SEE = 2310;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let ZAd = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_MOVA_ZA2_Z_H1(size, V, Rs, Zn, ZAd, off2)
}

val execute_MOVA_ZA2_Z_W1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'esize == 32 & 'd in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA2_Z_W1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA2_Z_W1 : (bits(2), bits(1), bits(2), bits(4), bits(2), bits(1)) -> unit

function decode_MOVA_ZA2_Z_W1 (size, V, Rs, Zn, ZAd, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(ZAd);
    let 'offset = UInt(o1 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA2_Z_W1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA2_Z_W1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA2_Z_W1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA2_Z_W1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA2_Z_W1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2311) = {
    SEE = 2311;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let ZAd = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_MOVA_ZA2_Z_W1(size, V, Rs, Zn, ZAd, o1)
}

val execute_MOVA_ZA2_Z_D1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'esize == 64 & 'd in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA2_Z_D1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA2_Z_D1 : (bits(2), bits(1), bits(2), bits(4), bits(3)) -> unit

function decode_MOVA_ZA2_Z_D1 (size, V, Rs, Zn, ZAd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(ZAd);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA2_Z_D1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA2_Z_D1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA2_Z_D1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA2_Z_D1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA2_Z_D1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2312) = {
    SEE = 2312;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let ZAd = Slice(__opcode, 0, 3);
    decode_MOVA_ZA2_Z_D1(size, V, Rs, Zn, ZAd)
}

val execute_MOVA_ZA4_Z_B1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'esize == 8 & 'd == 0 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA4_Z_B1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA4_Z_B1 : (bits(2), bits(1), bits(2), bits(3), bits(2)) -> unit

function decode_MOVA_ZA4_Z_B1 (size, V, Rs, Zn, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 8;
    let 'n = UInt(Zn @ 0b00);
    let 'd = 0;
    let 'offset = UInt(off2 @ 0b00);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA4_Z_B1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA4_Z_B1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA4_Z_B1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA4_Z_B1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA4_Z_B1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2313) = {
    SEE = 2313;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let off2 = Slice(__opcode, 0, 2);
    decode_MOVA_ZA4_Z_B1(size, V, Rs, Zn, off2)
}

val execute_MOVA_ZA4_Z_H1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'esize == 16 & 'd in {0, 1} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA4_Z_H1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA4_Z_H1 : (bits(2), bits(1), bits(2), bits(3), bits(1), bits(1)) -> unit

function decode_MOVA_ZA4_Z_H1 (size, V, Rs, Zn, ZAd, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(ZAd);
    let 'offset = UInt(o1 @ 0b00);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA4_Z_H1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA4_Z_H1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA4_Z_H1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA4_Z_H1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA4_Z_H1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2314) = {
    SEE = 2314;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let ZAd = Slice(__opcode, 1, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_MOVA_ZA4_Z_H1(size, V, Rs, Zn, ZAd, o1)
}

val execute_MOVA_ZA4_Z_W1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'esize == 32 & 'd in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA4_Z_W1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA4_Z_W1 : (bits(2), bits(1), bits(2), bits(3), bits(2)) -> unit

function decode_MOVA_ZA4_Z_W1 (size, V, Rs, Zn, ZAd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(ZAd);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA4_Z_W1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA4_Z_W1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA4_Z_W1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA4_Z_W1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA4_Z_W1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2315) = {
    SEE = 2315;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let ZAd = Slice(__opcode, 0, 2);
    decode_MOVA_ZA4_Z_W1(size, V, Rs, Zn, ZAd)
}

val execute_MOVA_ZA4_Z_D1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'esize == 64 & 'd in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_ZA4_Z_D1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        ZAslice_set(d, esize, vertical, slice_name + r, VL) = result
    }
}

val decode_MOVA_ZA4_Z_D1 : (bits(2), bits(1), bits(2), bits(3), bits(3)) -> unit

function decode_MOVA_ZA4_Z_D1 (size, V, Rs, Zn, ZAd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(ZAd);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_ZA4_Z_D1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_ZA4_Z_D1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_ZA4_Z_D1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_ZA4_Z_D1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_ZA4_Z_D1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2316) = {
    SEE = 2316;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let ZAd = Slice(__opcode, 0, 3);
    decode_MOVA_ZA4_Z_D1(size, V, Rs, Zn, ZAd)
}

val execute_MOVA_ZA_MZ2_1 : forall 'VL 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & is_VL('VL)).
  (int('VL), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_MOVA_ZA_MZ2_1 (VL, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_MOVA_ZA_MZ2_1 : (bits(2), bits(4), bits(3)) -> unit

function decode_MOVA_ZA_MZ2_1 (Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'n = UInt(Zn @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_MOVA_ZA_MZ2_1(128, n, nreg, offset, v)
      },
      256 => {
          execute_MOVA_ZA_MZ2_1(256, n, nreg, offset, v)
      },
      512 => {
          execute_MOVA_ZA_MZ2_1(512, n, nreg, offset, v)
      },
      1024 => {
          execute_MOVA_ZA_MZ2_1(1024, n, nreg, offset, v)
      },
      2048 => {
          execute_MOVA_ZA_MZ2_1(2048, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2317) = {
    SEE = 2317;
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_MOVA_ZA_MZ2_1(Rv, Zn, off3)
}

val execute_MOVA_ZA_MZ4_1 : forall 'VL 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & is_VL('VL)).
  (int('VL), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_MOVA_ZA_MZ4_1 (VL, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = Z_read(n + r, VL);
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_MOVA_ZA_MZ4_1 : (bits(2), bits(3), bits(3)) -> unit

function decode_MOVA_ZA_MZ4_1 (Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'n = UInt(Zn @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_MOVA_ZA_MZ4_1(128, n, nreg, offset, v)
      },
      256 => {
          execute_MOVA_ZA_MZ4_1(256, n, nreg, offset, v)
      },
      512 => {
          execute_MOVA_ZA_MZ4_1(512, n, nreg, offset, v)
      },
      1024 => {
          execute_MOVA_ZA_MZ4_1(1024, n, nreg, offset, v)
      },
      2048 => {
          execute_MOVA_ZA_MZ4_1(2048, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitzero, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2318) = {
    SEE = 2318;
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let off3 = Slice(__opcode, 0, 3);
    decode_MOVA_ZA_MZ4_1(Rv, Zn, off3)
}

val execute_MOVA_MZ2_ZA_B1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 2 & 'n == 0 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ2_ZA_B1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ2_ZA_B1 : (bits(2), bits(1), bits(2), bits(3), bits(4)) -> unit

function decode_MOVA_MZ2_ZA_B1 (size, V, Rs, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 8;
    let 'd = UInt(Zd @ 0b0);
    let 'n = 0;
    let 'offset = UInt(off3 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ2_ZA_B1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ2_ZA_B1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ2_ZA_B1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ2_ZA_B1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ2_ZA_B1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2319) = {
    SEE = 2319;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVA_MZ2_ZA_B1(size, V, Rs, off3, Zd)
}

val execute_MOVA_MZ2_ZA_H1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 'n in {0, 1} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ2_ZA_H1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ2_ZA_H1 : (bits(2), bits(1), bits(2), bits(1), bits(2), bits(4)) -> unit

function decode_MOVA_MZ2_ZA_H1 (size, V, Rs, ZAn, off2, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 16;
    let 'd = UInt(Zd @ 0b0);
    let 'n = UInt(ZAn);
    let 'offset = UInt(off2 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ2_ZA_H1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ2_ZA_H1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ2_ZA_H1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ2_ZA_H1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ2_ZA_H1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2320) = {
    SEE = 2320;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 7, 1);
    let off2 = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVA_MZ2_ZA_H1(size, V, Rs, ZAn, off2, Zd)
}

val execute_MOVA_MZ2_ZA_W1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 'nreg == 2 & 'n in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ2_ZA_W1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ2_ZA_W1 : (bits(2), bits(1), bits(2), bits(2), bits(1), bits(4)) -> unit

function decode_MOVA_MZ2_ZA_W1 (size, V, Rs, ZAn, o1, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 32;
    let 'd = UInt(Zd @ 0b0);
    let 'n = UInt(ZAn);
    let 'offset = UInt(o1 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ2_ZA_W1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ2_ZA_W1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ2_ZA_W1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ2_ZA_W1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ2_ZA_W1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2321) = {
    SEE = 2321;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 6, 2);
    let o1 = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVA_MZ2_ZA_W1(size, V, Rs, ZAn, o1, Zd)
}

val execute_MOVA_MZ2_ZA_D1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 2 & 'n in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ2_ZA_D1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ2_ZA_D1 : (bits(2), bits(1), bits(2), bits(3), bits(4)) -> unit

function decode_MOVA_MZ2_ZA_D1 (size, V, Rs, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 64;
    let 'd = UInt(Zd @ 0b0);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ2_ZA_D1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ2_ZA_D1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ2_ZA_D1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ2_ZA_D1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ2_ZA_D1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2322) = {
    SEE = 2322;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVA_MZ2_ZA_D1(size, V, Rs, ZAn, Zd)
}

val execute_MOVA_MZ4_ZA_B1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 4 & 'n == 0 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ4_ZA_B1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ4_ZA_B1 : (bits(2), bits(1), bits(2), bits(2), bits(3)) -> unit

function decode_MOVA_MZ4_ZA_B1 (size, V, Rs, off2, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 8;
    let 'd = UInt(Zd @ 0b00);
    let 'n = 0;
    let 'offset = UInt(off2 @ 0b00);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ4_ZA_B1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ4_ZA_B1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ4_ZA_B1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ4_ZA_B1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ4_ZA_B1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2323) = {
    SEE = 2323;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let off2 = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVA_MZ4_ZA_B1(size, V, Rs, off2, Zd)
}

val execute_MOVA_MZ4_ZA_H1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 'n in {0, 1} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ4_ZA_H1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ4_ZA_H1 : (bits(2), bits(1), bits(2), bits(1), bits(1), bits(3)) -> unit

function decode_MOVA_MZ4_ZA_H1 (size, V, Rs, ZAn, o1, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 16;
    let 'd = UInt(Zd @ 0b00);
    let 'n = UInt(ZAn);
    let 'offset = UInt(o1 @ 0b00);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ4_ZA_H1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ4_ZA_H1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ4_ZA_H1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ4_ZA_H1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ4_ZA_H1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2324) = {
    SEE = 2324;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 6, 1);
    let o1 = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVA_MZ4_ZA_H1(size, V, Rs, ZAn, o1, Zd)
}

val execute_MOVA_MZ4_ZA_W1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 4 & 'n in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ4_ZA_W1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ4_ZA_W1 : (bits(2), bits(1), bits(2), bits(2), bits(3)) -> unit

function decode_MOVA_MZ4_ZA_W1 (size, V, Rs, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 32;
    let 'd = UInt(Zd @ 0b00);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ4_ZA_W1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ4_ZA_W1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ4_ZA_W1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ4_ZA_W1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ4_ZA_W1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2325) = {
    SEE = 2325;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVA_MZ4_ZA_W1(size, V, Rs, ZAn, Zd)
}

val execute_MOVA_MZ4_ZA_D1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 4 & 'n in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVA_MZ4_ZA_D1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVA_MZ4_ZA_D1 : (bits(2), bits(1), bits(2), bits(3), bits(3)) -> unit

function decode_MOVA_MZ4_ZA_D1 (size, V, Rs, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 64;
    let 'd = UInt(Zd @ 0b00);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVA_MZ4_ZA_D1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVA_MZ4_ZA_D1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVA_MZ4_ZA_D1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVA_MZ4_ZA_D1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVA_MZ4_ZA_D1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2326) = {
    SEE = 2326;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVA_MZ4_ZA_D1(size, V, Rs, ZAn, Zd)
}

val execute_MOVA_MZ_ZA2_1 : forall 'VL 'd 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('nreg), int('offset), int('v)) -> unit

function execute_MOVA_MZ_ZA2_1 (VL, d, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        Z_set(d + r, VL) = result;
        vec = vec + vstride
    }
}

val decode_MOVA_MZ_ZA2_1 : (bits(2), bits(3), bits(4)) -> unit

function decode_MOVA_MZ_ZA2_1 (Rv, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_MOVA_MZ_ZA2_1(128, d, nreg, offset, v)
      },
      256 => {
          execute_MOVA_MZ_ZA2_1(256, d, nreg, offset, v)
      },
      512 => {
          execute_MOVA_MZ_ZA2_1(512, d, nreg, offset, v)
      },
      1024 => {
          execute_MOVA_MZ_ZA2_1(1024, d, nreg, offset, v)
      },
      2048 => {
          execute_MOVA_MZ_ZA2_1(2048, d, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2327) = {
    SEE = 2327;
    let Rv = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVA_MZ_ZA2_1(Rv, off3, Zd)
}

val execute_MOVA_MZ_ZA4_1 : forall 'VL 'd 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('nreg), int('offset), int('v)) -> unit

function execute_MOVA_MZ_ZA4_1 (VL, d, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        Z_set(d + r, VL) = result;
        vec = vec + vstride
    }
}

val decode_MOVA_MZ_ZA4_1 : (bits(2), bits(3), bits(3)) -> unit

function decode_MOVA_MZ_ZA4_1 (Rv, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_MOVA_MZ_ZA4_1(128, d, nreg, offset, v)
      },
      256 => {
          execute_MOVA_MZ_ZA4_1(256, d, nreg, offset, v)
      },
      512 => {
          execute_MOVA_MZ_ZA4_1(512, d, nreg, offset, v)
      },
      1024 => {
          execute_MOVA_MZ_ZA4_1(1024, d, nreg, offset, v)
      },
      2048 => {
          execute_MOVA_MZ_ZA4_1(2048, d, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2328) = {
    SEE = 2328;
    let Rv = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVA_MZ_ZA4_1(Rv, off3, Zd)
}

val execute_LD1B_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1B_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1B_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1B_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LD1B_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1B_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1B_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1B_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1B_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2329) = {
    SEE = 2329;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1B_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1H_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1H_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1H_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1H_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LD1H_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1H_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1H_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1H_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1H_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2330) = {
    SEE = 2330;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1H_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1W_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1W_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1W_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1W_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LD1W_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1W_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1W_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1W_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1W_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2331) = {
    SEE = 2331;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1W_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1D_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1D_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1D_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1D_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LD1D_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1D_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1D_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1D_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1D_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2332) = {
    SEE = 2332;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1D_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1B_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1B_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1B_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1B_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LD1B_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1B_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1B_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1B_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1B_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2333) = {
    SEE = 2333;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1B_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1H_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1H_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1H_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1H_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LD1H_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1H_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1H_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1H_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1H_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2334) = {
    SEE = 2334;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1H_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1W_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1W_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1W_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1W_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LD1W_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1W_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1W_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1W_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1W_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2335) = {
    SEE = 2335;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1W_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1D_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LD1D_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1D_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1D_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LD1D_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LD1D_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LD1D_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LD1D_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LD1D_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2336) = {
    SEE = 2336;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1D_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1B_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1B_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1B_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1B_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LDNT1B_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1B_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1B_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1B_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1B_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2337) = {
    SEE = 2337;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1B_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1H_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1H_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1H_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1H_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LDNT1H_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1H_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1H_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1H_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1H_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2338) = {
    SEE = 2338;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1H_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1W_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1W_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1W_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1W_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LDNT1W_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1W_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1W_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1W_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1W_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2339) = {
    SEE = 2339;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1W_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1D_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1D_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1D_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1D_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LDNT1D_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1D_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1D_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1D_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1D_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2340) = {
    SEE = 2340;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1D_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1B_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1B_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1B_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1B_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LDNT1B_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1B_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1B_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1B_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1B_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2341) = {
    SEE = 2341;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1B_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1H_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1H_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1H_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1H_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LDNT1H_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1H_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1H_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1H_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1H_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2342) = {
    SEE = 2342;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1H_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1W_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1W_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1W_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1W_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LDNT1W_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1W_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1W_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1W_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1W_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2343) = {
    SEE = 2343;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1W_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1D_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_LDNT1D_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1D_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1D_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LDNT1D_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_LDNT1D_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_LDNT1D_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_LDNT1D_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_LDNT1D_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2344) = {
    SEE = 2344;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1D_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1B_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1B_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1B_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1B_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_ST1B_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1B_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1B_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1B_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1B_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2345) = {
    SEE = 2345;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1B_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1H_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1H_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1H_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1H_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_ST1H_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1H_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1H_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1H_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1H_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2346) = {
    SEE = 2346;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1H_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1W_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1W_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1W_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1W_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_ST1W_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1W_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1W_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1W_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1W_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2347) = {
    SEE = 2347;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1W_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1D_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1D_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1D_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1D_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_ST1D_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1D_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1D_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1D_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1D_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2348) = {
    SEE = 2348;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1D_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1B_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1B_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1B_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1B_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_ST1B_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1B_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1B_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1B_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1B_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2349) = {
    SEE = 2349;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1B_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1H_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1H_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1H_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1H_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_ST1H_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1H_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1H_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1H_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1H_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2350) = {
    SEE = 2350;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1H_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1W_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1W_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1W_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1W_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_ST1W_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1W_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1W_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1W_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1W_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2351) = {
    SEE = 2351;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1W_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1D_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_ST1D_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1D_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1D_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_ST1D_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_ST1D_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_ST1D_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_ST1D_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_ST1D_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2352) = {
    SEE = 2352;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1D_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1B_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1B_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1B_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1B_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_STNT1B_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1B_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1B_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1B_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1B_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2353) = {
    SEE = 2353;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1B_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1H_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1H_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1H_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1H_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_STNT1H_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1H_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1H_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1H_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1H_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2354) = {
    SEE = 2354;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1H_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1W_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1W_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1W_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1W_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_STNT1W_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1W_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1W_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1W_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1W_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2355) = {
    SEE = 2355;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1W_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1D_MZx_P_BR_2x8 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1D_MZx_P_BR_2x8 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1D_MZx_P_BR_2x8 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1D_MZx_P_BR_2x8 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_STNT1D_MZx_P_BR_2x8(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1D_MZx_P_BR_2x8(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1D_MZx_P_BR_2x8(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1D_MZx_P_BR_2x8(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1D_MZx_P_BR_2x8(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2356) = {
    SEE = 2356;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1D_MZx_P_BR_2x8(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1B_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1B_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1B_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1B_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    match VL {
      128 => {
          execute_STNT1B_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1B_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1B_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1B_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1B_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2357) = {
    SEE = 2357;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1B_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1H_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1H_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1H_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1H_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    match VL {
      128 => {
          execute_STNT1H_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1H_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1H_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1H_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1H_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2358) = {
    SEE = 2358;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1H_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1W_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1W_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1W_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1W_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    match VL {
      128 => {
          execute_STNT1W_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1W_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1W_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1W_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1W_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2359) = {
    SEE = 2359;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1W_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1D_MZx_P_BR_4x4 : forall 'VL 'esize 'g 'm 'n 'nreg 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t), int('tstride)) -> unit

function execute_STNT1D_MZx_P_BR_4x4 (VL, esize, g, m, n, nreg, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1D_MZx_P_BR_4x4 : (bits(5), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1D_MZx_P_BR_4x4 (Rm, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    match VL {
      128 => {
          execute_STNT1D_MZx_P_BR_4x4(128, esize, g, m, n, nreg, t, tstride)
      },
      256 => {
          execute_STNT1D_MZx_P_BR_4x4(256, esize, g, m, n, nreg, t, tstride)
      },
      512 => {
          execute_STNT1D_MZx_P_BR_4x4(512, esize, g, m, n, nreg, t, tstride)
      },
      1024 => {
          execute_STNT1D_MZx_P_BR_4x4(1024, esize, g, m, n, nreg, t, tstride)
      },
      2048 => {
          execute_STNT1D_MZx_P_BR_4x4(2048, esize, g, m, n, nreg, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2360) = {
    SEE = 2360;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1D_MZx_P_BR_4x4(Rm, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1B_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1B_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1B_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1B_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1B_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1B_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1B_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1B_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2361) = {
    SEE = 2361;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1B_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1H_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1H_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1H_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1H_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1H_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1H_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1H_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1H_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1H_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2362) = {
    SEE = 2362;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1H_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1W_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1W_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1W_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1W_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1W_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1W_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1W_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1W_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1W_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2363) = {
    SEE = 2363;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1W_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1D_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1D_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1D_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LD1D_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1D_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1D_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1D_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1D_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1D_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2364) = {
    SEE = 2364;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LD1D_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1B_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1B_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1B_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1B_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1B_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1B_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1B_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1B_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1B_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2365) = {
    SEE = 2365;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1B_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1H_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1H_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1H_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1H_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1H_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1H_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1H_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1H_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1H_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2366) = {
    SEE = 2366;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1H_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1W_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1W_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1W_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1W_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1W_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1W_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1W_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1W_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1W_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2367) = {
    SEE = 2367;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1W_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1D_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1D_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1D_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_LDNT1D_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1D_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1D_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1D_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1D_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1D_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2368) = {
    SEE = 2368;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_LDNT1D_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1B_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1B_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1B_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1B_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1B_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1B_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1B_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1B_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2369) = {
    SEE = 2369;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1B_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1H_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1H_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1H_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1H_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1H_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1H_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1H_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1H_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1H_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2370) = {
    SEE = 2370;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1H_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1W_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1W_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1W_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1W_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1W_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1W_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1W_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1W_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1W_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2371) = {
    SEE = 2371;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1W_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LD1D_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LD1D_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LD1D_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LD1D_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1D_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LD1D_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LD1D_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LD1D_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LD1D_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2372) = {
    SEE = 2372;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LD1D_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1B_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1B_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1B_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1B_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1B_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1B_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1B_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1B_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1B_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2373) = {
    SEE = 2373;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1B_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1H_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1H_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1H_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1H_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1H_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1H_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1H_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1H_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1H_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2374) = {
    SEE = 2374;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1H_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1W_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1W_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1W_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1W_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1W_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1W_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1W_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1W_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1W_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2375) = {
    SEE = 2375;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1W_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_LDNT1D_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_LDNT1D_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t, VL) = values_name[r];
        t = t + tstride
    }
}

val decode_LDNT1D_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_LDNT1D_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1D_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_LDNT1D_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_LDNT1D_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_LDNT1D_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_LDNT1D_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2376) = {
    SEE = 2376;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_LDNT1D_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1B_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1B_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1B_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1B_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1B_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1B_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1B_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1B_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1B_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2377) = {
    SEE = 2377;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1B_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1H_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1H_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1H_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1H_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1H_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1H_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1H_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1H_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1H_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2378) = {
    SEE = 2378;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1H_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1W_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1W_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1W_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1W_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1W_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1W_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1W_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1W_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1W_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2379) = {
    SEE = 2379;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1W_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1D_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1D_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1D_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_ST1D_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1D_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1D_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1D_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1D_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1D_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2380) = {
    SEE = 2380;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_ST1D_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1B_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1B_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1B_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1B_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1B_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1B_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1B_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1B_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1B_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2381) = {
    SEE = 2381;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1B_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1H_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1H_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1H_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1H_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1H_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1H_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1H_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1H_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1H_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2382) = {
    SEE = 2382;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1H_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1W_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1W_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1W_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1W_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1W_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1W_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1W_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1W_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1W_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2383) = {
    SEE = 2383;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1W_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_ST1D_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_ST1D_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_ST1D_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_ST1D_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1D_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_ST1D_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_ST1D_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_ST1D_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_ST1D_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2384) = {
    SEE = 2384;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_ST1D_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1B_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1B_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1B_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1B_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1B_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1B_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1B_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1B_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1B_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2385) = {
    SEE = 2385;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1B_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1H_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1H_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1H_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1H_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1H_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1H_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1H_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1H_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1H_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2386) = {
    SEE = 2386;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1H_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1W_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1W_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1W_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1W_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1W_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1W_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1W_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1W_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1W_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2387) = {
    SEE = 2387;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1W_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1D_MZx_P_BI_2x8 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 8 & 0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1D_MZx_P_BI_2x8 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1D_MZx_P_BI_2x8 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_STNT1D_MZx_P_BI_2x8 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 'tstride = 8;
    let 't = UInt((T @ 0b0) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1D_MZx_P_BI_2x8(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1D_MZx_P_BI_2x8(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1D_MZx_P_BI_2x8(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1D_MZx_P_BI_2x8(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1D_MZx_P_BI_2x8(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, _, _, _] as __opcode)) if SEE < 2388) = {
    SEE = 2388;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 3);
    decode_STNT1D_MZx_P_BI_2x8(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1B_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1B_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1B_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1B_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1B_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1B_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1B_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1B_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1B_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2389) = {
    SEE = 2389;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1B_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1H_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1H_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1H_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1H_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1H_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1H_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1H_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1H_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1H_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2390) = {
    SEE = 2390;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1H_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1W_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1W_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1W_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1W_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1W_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1W_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1W_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1W_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1W_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2391) = {
    SEE = 2391;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1W_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_STNT1D_MZx_P_BI_4x4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't 'tstride,
  ('tstride == 4 & 0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t), int('tstride)) -> unit

function execute_STNT1D_MZx_P_BI_4x4 (VL, esize, g, n, nreg, offset, t__arg, tstride) = {
    t : int = t__arg;
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        };
        t = t + tstride
    }
}

val decode_STNT1D_MZx_P_BI_4x4 : (bits(4), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_STNT1D_MZx_P_BI_4x4 (imm4, msz, PNg, Rn, T, N, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 'tstride = 4;
    let 't = UInt((T @ 0b00) @ Zt);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1D_MZx_P_BI_4x4(128, esize, g, n, nreg, offset, t, tstride)
      },
      256 => {
          execute_STNT1D_MZx_P_BI_4x4(256, esize, g, n, nreg, offset, t, tstride)
      },
      512 => {
          execute_STNT1D_MZx_P_BI_4x4(512, esize, g, n, nreg, offset, t, tstride)
      },
      1024 => {
          execute_STNT1D_MZx_P_BI_4x4(1024, esize, g, n, nreg, offset, t, tstride)
      },
      2048 => {
          execute_STNT1D_MZx_P_BI_4x4(2048, esize, g, n, nreg, offset, t, tstride)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, bitone, bitzero, _, _] as __opcode)) if SEE < 2392) = {
    SEE = 2392;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let T = Slice(__opcode, 4, 1);
    let N = Slice(__opcode, 3, 1);
    let Zt = Slice(__opcode, 0, 2);
    decode_STNT1D_MZx_P_BI_4x4(imm4, msz, PNg, Rn, T, N, Zt)
}

val execute_FADD_ZA_ZW_2x2 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FADD_ZA_ZW_2x2 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPAdd_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FADD_ZA_ZW_2x2 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FADD_ZA_ZW_2x2 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FADD_ZA_ZW_2x2(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FADD_ZA_ZW_2x2(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FADD_ZA_ZW_2x2(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FADD_ZA_ZW_2x2(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FADD_ZA_ZW_2x2(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2393) = {
    SEE = 2393;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FADD_ZA_ZW_2x2(sz, Rv, Zm, S, off3)
}

val execute_FSUB_ZA_ZW_2x2 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FSUB_ZA_ZW_2x2 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPSub_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FSUB_ZA_ZW_2x2 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FSUB_ZA_ZW_2x2 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FSUB_ZA_ZW_2x2(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FSUB_ZA_ZW_2x2(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FSUB_ZA_ZW_2x2(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FSUB_ZA_ZW_2x2(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FSUB_ZA_ZW_2x2(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2394) = {
    SEE = 2394;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FSUB_ZA_ZW_2x2(sz, Rv, Zm, S, off3)
}

val execute_FADD_ZA_ZW_4x4 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FADD_ZA_ZW_4x4 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPAdd_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FADD_ZA_ZW_4x4 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FADD_ZA_ZW_4x4 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FADD_ZA_ZW_4x4(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FADD_ZA_ZW_4x4(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FADD_ZA_ZW_4x4(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FADD_ZA_ZW_4x4(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FADD_ZA_ZW_4x4(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2395) = {
    SEE = 2395;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FADD_ZA_ZW_4x4(sz, Rv, Zm, S, off3)
}

val execute_FSUB_ZA_ZW_4x4 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FSUB_ZA_ZW_4x4 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPSub_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FSUB_ZA_ZW_4x4 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FSUB_ZA_ZW_4x4 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FSUB_ZA_ZW_4x4(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FSUB_ZA_ZW_4x4(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FSUB_ZA_ZW_4x4(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FSUB_ZA_ZW_4x4(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FSUB_ZA_ZW_4x4(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2396) = {
    SEE = 2396;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FSUB_ZA_ZW_4x4(sz, Rv, Zm, S, off3)
}

val execute_FMLA_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2397) = {
    SEE = 2397;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZW_2x2(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2398) = {
    SEE = 2398;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZW_2x2(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2399) = {
    SEE = 2399;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZV_2x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2400) = {
    SEE = 2400;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZV_2x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2401) = {
    SEE = 2401;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZW_4x4(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2402) = {
    SEE = 2402;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZW_4x4(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2403) = {
    SEE = 2403;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZV_4x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2404) = {
    SEE = 2404;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZV_4x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZi_S2xi (Zm, Rv, i2, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2405) = {
    SEE = 2405;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZi_S2xi(Zm, Rv, i2, Zn, S, off3)
}

val execute_FMLS_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZi_S2xi (Zm, Rv, i2, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2406) = {
    SEE = 2406;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZi_S2xi(Zm, Rv, i2, Zn, S, off3)
}

val execute_FMLA_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZi_D2xi (Zm, Rv, i1, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2407) = {
    SEE = 2407;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZi_D2xi(Zm, Rv, i1, Zn, S, off3)
}

val execute_FMLS_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZi_D2xi (Zm, Rv, i1, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2408) = {
    SEE = 2408;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZi_D2xi(Zm, Rv, i1, Zn, S, off3)
}

val execute_FMLA_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2409) = {
    SEE = 2409;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, S, off3)
}

val execute_FMLS_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2410) = {
    SEE = 2410;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, S, off3)
}

val execute_FMLA_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZi_D4xi (Zm, Rv, i1, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2411) = {
    SEE = 2411;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZi_D4xi(Zm, Rv, i1, Zn, S, off3)
}

val execute_FMLS_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZi_D4xi (Zm, Rv, i1, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEF64F64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2412) = {
    SEE = 2412;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZi_D4xi(Zm, Rv, i1, Zn, S, off3)
}

val execute_BFDOT_ZA_ZZW_2x2 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_BFDOT_ZA_ZZW_2x2 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFDOT_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(3)) -> unit

function decode_BFDOT_ZA_ZZW_2x2 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFDOT_ZA_ZZW_2x2(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_BFDOT_ZA_ZZW_2x2(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_BFDOT_ZA_ZZW_2x2(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_BFDOT_ZA_ZZW_2x2(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_BFDOT_ZA_ZZW_2x2(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2413) = {
    SEE = 2413;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFDOT_ZA_ZZW_2x2(Zm, Rv, Zn, off3)
}

val execute_BFDOT_ZA_ZZV_2x1 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_BFDOT_ZA_ZZV_2x1 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFDOT_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(3)) -> unit

function decode_BFDOT_ZA_ZZV_2x1 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFDOT_ZA_ZZV_2x1(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_BFDOT_ZA_ZZV_2x1(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_BFDOT_ZA_ZZV_2x1(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_BFDOT_ZA_ZZV_2x1(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_BFDOT_ZA_ZZV_2x1(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2414) = {
    SEE = 2414;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFDOT_ZA_ZZV_2x1(Zm, Rv, Zn, off3)
}

val execute_FDOT_ZA_ZZW_2x2 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_FDOT_ZA_ZZW_2x2 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = FPDotAdd_ZA(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FDOT_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(3)) -> unit

function decode_FDOT_ZA_ZZW_2x2 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FDOT_ZA_ZZW_2x2(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_FDOT_ZA_ZZW_2x2(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_FDOT_ZA_ZZW_2x2(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_FDOT_ZA_ZZW_2x2(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_FDOT_ZA_ZZW_2x2(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2415) = {
    SEE = 2415;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_FDOT_ZA_ZZW_2x2(Zm, Rv, Zn, off3)
}

val execute_FDOT_ZA_ZZV_2x1 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_FDOT_ZA_ZZV_2x1 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = FPDotAdd_ZA(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FDOT_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(3)) -> unit

function decode_FDOT_ZA_ZZV_2x1 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FDOT_ZA_ZZV_2x1(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_FDOT_ZA_ZZV_2x1(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_FDOT_ZA_ZZV_2x1(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_FDOT_ZA_ZZV_2x1(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_FDOT_ZA_ZZV_2x1(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2416) = {
    SEE = 2416;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let off3 = Slice(__opcode, 0, 3);
    decode_FDOT_ZA_ZZV_2x1(Zm, Rv, Zn, off3)
}

val execute_BFDOT_ZA_ZZW_4x4 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_BFDOT_ZA_ZZW_4x4 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFDOT_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(3)) -> unit

function decode_BFDOT_ZA_ZZW_4x4 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFDOT_ZA_ZZW_4x4(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_BFDOT_ZA_ZZW_4x4(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_BFDOT_ZA_ZZW_4x4(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_BFDOT_ZA_ZZW_4x4(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_BFDOT_ZA_ZZW_4x4(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2417) = {
    SEE = 2417;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFDOT_ZA_ZZW_4x4(Zm, Rv, Zn, off3)
}

val execute_BFDOT_ZA_ZZV_4x1 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_BFDOT_ZA_ZZV_4x1 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFDOT_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(3)) -> unit

function decode_BFDOT_ZA_ZZV_4x1 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFDOT_ZA_ZZV_4x1(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_BFDOT_ZA_ZZV_4x1(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_BFDOT_ZA_ZZV_4x1(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_BFDOT_ZA_ZZV_4x1(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_BFDOT_ZA_ZZV_4x1(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2418) = {
    SEE = 2418;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFDOT_ZA_ZZV_4x1(Zm, Rv, Zn, off3)
}

val execute_FDOT_ZA_ZZW_4x4 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_FDOT_ZA_ZZW_4x4 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = FPDotAdd_ZA(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FDOT_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(3)) -> unit

function decode_FDOT_ZA_ZZW_4x4 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FDOT_ZA_ZZW_4x4(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_FDOT_ZA_ZZW_4x4(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_FDOT_ZA_ZZW_4x4(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_FDOT_ZA_ZZW_4x4(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_FDOT_ZA_ZZW_4x4(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2419) = {
    SEE = 2419;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let off3 = Slice(__opcode, 0, 3);
    decode_FDOT_ZA_ZZW_4x4(Zm, Rv, Zn, off3)
}

val execute_FDOT_ZA_ZZV_4x1 : forall 'VL 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_FDOT_ZA_ZZV_4x1 (VL, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = FPDotAdd_ZA(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FDOT_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(3)) -> unit

function decode_FDOT_ZA_ZZV_4x1 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FDOT_ZA_ZZV_4x1(128, m, n, nreg, offset, v)
      },
      256 => {
          execute_FDOT_ZA_ZZV_4x1(256, m, n, nreg, offset, v)
      },
      512 => {
          execute_FDOT_ZA_ZZV_4x1(512, m, n, nreg, offset, v)
      },
      1024 => {
          execute_FDOT_ZA_ZZV_4x1(1024, m, n, nreg, offset, v)
      },
      2048 => {
          execute_FDOT_ZA_ZZV_4x1(2048, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2420) = {
    SEE = 2420;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let off3 = Slice(__opcode, 0, 3);
    decode_FDOT_ZA_ZZV_4x1(Zm, Rv, Zn, off3)
}

val execute_BFDOT_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_BFDOT_ZA_ZZi_2xi (VL, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFDOT_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(3)) -> unit

function decode_BFDOT_ZA_ZZi_2xi (Zm, Rv, i2, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFDOT_ZA_ZZi_2xi(128, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_BFDOT_ZA_ZZi_2xi(256, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_BFDOT_ZA_ZZi_2xi(512, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_BFDOT_ZA_ZZi_2xi(1024, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_BFDOT_ZA_ZZi_2xi(2048, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2421) = {
    SEE = 2421;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFDOT_ZA_ZZi_2xi(Zm, Rv, i2, Zn, off3)
}

val execute_BFDOT_ZA_ZZi_4xi : forall 'VL 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_BFDOT_ZA_ZZi_4xi (VL, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFDOT_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(3)) -> unit

function decode_BFDOT_ZA_ZZi_4xi (Zm, Rv, i2, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFDOT_ZA_ZZi_4xi(128, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_BFDOT_ZA_ZZi_4xi(256, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_BFDOT_ZA_ZZi_4xi(512, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_BFDOT_ZA_ZZi_4xi(1024, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_BFDOT_ZA_ZZi_4xi(2048, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2422) = {
    SEE = 2422;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFDOT_ZA_ZZi_4xi(Zm, Rv, i2, Zn, off3)
}

val execute_FDOT_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_FDOT_ZA_ZZi_2xi (VL, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = FPDotAdd_ZA(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FDOT_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(3)) -> unit

function decode_FDOT_ZA_ZZi_2xi (Zm, Rv, i2, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FDOT_ZA_ZZi_2xi(128, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_FDOT_ZA_ZZi_2xi(256, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_FDOT_ZA_ZZi_2xi(512, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_FDOT_ZA_ZZi_2xi(1024, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_FDOT_ZA_ZZi_2xi(2048, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2423) = {
    SEE = 2423;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_FDOT_ZA_ZZi_2xi(Zm, Rv, i2, Zn, off3)
}

val execute_FDOT_ZA_ZZi_4xi : forall 'VL 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_FDOT_ZA_ZZi_4xi (VL, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
            let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = FPDotAdd_ZA(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FDOT_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(3)) -> unit

function decode_FDOT_ZA_ZZi_4xi (Zm, Rv, i2, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FDOT_ZA_ZZi_4xi(128, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_FDOT_ZA_ZZi_4xi(256, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_FDOT_ZA_ZZi_4xi(512, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_FDOT_ZA_ZZi_4xi(1024, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_FDOT_ZA_ZZi_4xi(2048, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2424) = {
    SEE = 2424;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let off3 = Slice(__opcode, 0, 3);
    decode_FDOT_ZA_ZZi_4xi(Zm, Rv, i2, Zn, off3)
}

val execute_BFVDOT_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_BFVDOT_ZA_ZZi_2xi (VL, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 2);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand1a : bits('VL) = Z_read(n, VL);
        let operand1b : bits('VL) = Z_read(n + 1, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let elt1_a : bits(16) = Elem_read(operand1a, 2 * e + r, 16);
            let elt1_b : bits(16) = Elem_read(operand1b, 2 * e + r, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFVDOT_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(3)) -> unit

function decode_BFVDOT_ZA_ZZi_2xi (Zm, Rv, i2, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_BFVDOT_ZA_ZZi_2xi(128, index, m, n, offset, v)
      },
      256 => {
          execute_BFVDOT_ZA_ZZi_2xi(256, index, m, n, offset, v)
      },
      512 => {
          execute_BFVDOT_ZA_ZZi_2xi(512, index, m, n, offset, v)
      },
      1024 => {
          execute_BFVDOT_ZA_ZZi_2xi(1024, index, m, n, offset, v)
      },
      2048 => {
          execute_BFVDOT_ZA_ZZi_2xi(2048, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2425) = {
    SEE = 2425;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFVDOT_ZA_ZZi_2xi(Zm, Rv, i2, Zn, off3)
}

val execute_FVDOT_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_FVDOT_ZA_ZZi_2xi (VL, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 2);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand1a : bits('VL) = Z_read(n, VL);
        let operand1b : bits('VL) = Z_read(n + 1, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let elt1_a : bits(16) = Elem_read(operand1a, 2 * e + r, 16);
            let elt1_b : bits(16) = Elem_read(operand1b, 2 * e + r, 16);
            let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
            let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
            sum : bits(32) = Elem_read(operand3, e, 32);
            let sum : bits(32) = FPDotAdd_ZA(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
            result = Elem_set(result, e, 32, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FVDOT_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(3)) -> unit

function decode_FVDOT_ZA_ZZi_2xi (Zm, Rv, i2, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_FVDOT_ZA_ZZi_2xi(128, index, m, n, offset, v)
      },
      256 => {
          execute_FVDOT_ZA_ZZi_2xi(256, index, m, n, offset, v)
      },
      512 => {
          execute_FVDOT_ZA_ZZi_2xi(512, index, m, n, offset, v)
      },
      1024 => {
          execute_FVDOT_ZA_ZZi_2xi(1024, index, m, n, offset, v)
      },
      2048 => {
          execute_FVDOT_ZA_ZZi_2xi(2048, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2426) = {
    SEE = 2426;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_FVDOT_ZA_ZZi_2xi(Zm, Rv, i2, Zn, off3)
}

val execute_BFMLAL_ZA_ZZV_1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZV_1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLAL_ZA_ZZV_1 (Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZV_1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZV_1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZV_1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZV_1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZV_1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2427) = {
    SEE = 2427;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLAL_ZA_ZZV_1(Zm, Rv, Zn, S, off3)
}

val execute_BFMLAL_ZA_ZZW_2x2 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZW_2x2 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(2)) -> unit

function decode_BFMLAL_ZA_ZZW_2x2 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZW_2x2(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZW_2x2(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZW_2x2(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZW_2x2(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZW_2x2(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2428) = {
    SEE = 2428;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLAL_ZA_ZZW_2x2(Zm, Rv, Zn, S, off2)
}

val execute_BFMLAL_ZA_ZZV_2x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZV_2x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_BFMLAL_ZA_ZZV_2x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZV_2x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZV_2x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZV_2x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZV_2x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZV_2x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2429) = {
    SEE = 2429;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLAL_ZA_ZZV_2x1(Zm, Rv, Zn, S, off2)
}

val execute_BFMLAL_ZA_ZZW_4x4 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZW_4x4 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(2)) -> unit

function decode_BFMLAL_ZA_ZZW_4x4 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZW_4x4(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZW_4x4(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZW_4x4(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZW_4x4(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZW_4x4(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2430) = {
    SEE = 2430;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLAL_ZA_ZZW_4x4(Zm, Rv, Zn, S, off2)
}

val execute_BFMLAL_ZA_ZZV_4x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZV_4x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_BFMLAL_ZA_ZZV_4x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZV_4x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZV_4x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZV_4x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZV_4x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZV_4x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2431) = {
    SEE = 2431;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLAL_ZA_ZZV_4x1(Zm, Rv, Zn, S, off2)
}

val execute_BFMLSL_ZA_ZZV_1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZV_1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLSL_ZA_ZZV_1 (Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZV_1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZV_1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZV_1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZV_1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZV_1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2432) = {
    SEE = 2432;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLSL_ZA_ZZV_1(Zm, Rv, Zn, S, off3)
}

val execute_BFMLSL_ZA_ZZW_2x2 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZW_2x2 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(2)) -> unit

function decode_BFMLSL_ZA_ZZW_2x2 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZW_2x2(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZW_2x2(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZW_2x2(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZW_2x2(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZW_2x2(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2433) = {
    SEE = 2433;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLSL_ZA_ZZW_2x2(Zm, Rv, Zn, S, off2)
}

val execute_BFMLSL_ZA_ZZV_2x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZV_2x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_BFMLSL_ZA_ZZV_2x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZV_2x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZV_2x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZV_2x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZV_2x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZV_2x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2434) = {
    SEE = 2434;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLSL_ZA_ZZV_2x1(Zm, Rv, Zn, S, off2)
}

val execute_BFMLSL_ZA_ZZW_4x4 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZW_4x4 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(2)) -> unit

function decode_BFMLSL_ZA_ZZW_4x4 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZW_4x4(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZW_4x4(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZW_4x4(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZW_4x4(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZW_4x4(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2435) = {
    SEE = 2435;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLSL_ZA_ZZW_4x4(Zm, Rv, Zn, S, off2)
}

val execute_BFMLSL_ZA_ZZV_4x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZV_4x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_BFMLSL_ZA_ZZV_4x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZV_4x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZV_4x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZV_4x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZV_4x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZV_4x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2436) = {
    SEE = 2436;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLSL_ZA_ZZV_4x1(Zm, Rv, Zn, S, off2)
}

val execute_BFMLAL_ZA_ZZi_1 : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZi_1 (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLAL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZi_1(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZi_1(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZi_1(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZi_1(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZi_1(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2437) = {
    SEE = 2437;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLAL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, S, off3)
}

val execute_BFMLAL_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZi_2xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_BFMLAL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZi_2xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZi_2xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZi_2xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZi_2xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZi_2xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2438) = {
    SEE = 2438;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLAL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_BFMLAL_ZA_ZZi_4xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLAL_ZA_ZZi_4xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLAL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_BFMLAL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLAL_ZA_ZZi_4xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLAL_ZA_ZZi_4xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLAL_ZA_ZZi_4xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLAL_ZA_ZZi_4xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLAL_ZA_ZZi_4xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2439) = {
    SEE = 2439;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLAL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_BFMLSL_ZA_ZZi_1 : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZi_1 (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLSL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZi_1(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZi_1(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZi_1(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZi_1(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZi_1(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2440) = {
    SEE = 2440;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLSL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, S, off3)
}

val execute_BFMLSL_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZi_2xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_BFMLSL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZi_2xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZi_2xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZi_2xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZi_2xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZi_2xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2441) = {
    SEE = 2441;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLSL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_BFMLSL_ZA_ZZi_4xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLSL_ZA_ZZi_4xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = BFNeg(element1)
                      };
                      result = Elem_set(result, e, 32, BFMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_BFMLSL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_BFMLSL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLSL_ZA_ZZi_4xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLSL_ZA_ZZi_4xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLSL_ZA_ZZi_4xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLSL_ZA_ZZi_4xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLSL_ZA_ZZi_4xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2442) = {
    SEE = 2442;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_BFMLSL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_FMLAL_ZA_ZZV_1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZV_1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLAL_ZA_ZZV_1 (Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZV_1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZV_1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZV_1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZV_1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZV_1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2443) = {
    SEE = 2443;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLAL_ZA_ZZV_1(Zm, Rv, Zn, S, off3)
}

val execute_FMLAL_ZA_ZZW_2x2 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZW_2x2 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(2)) -> unit

function decode_FMLAL_ZA_ZZW_2x2 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZW_2x2(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZW_2x2(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZW_2x2(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZW_2x2(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZW_2x2(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2444) = {
    SEE = 2444;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLAL_ZA_ZZW_2x2(Zm, Rv, Zn, S, off2)
}

val execute_FMLAL_ZA_ZZV_2x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZV_2x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_FMLAL_ZA_ZZV_2x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZV_2x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZV_2x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZV_2x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZV_2x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZV_2x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2445) = {
    SEE = 2445;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLAL_ZA_ZZV_2x1(Zm, Rv, Zn, S, off2)
}

val execute_FMLAL_ZA_ZZW_4x4 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZW_4x4 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(2)) -> unit

function decode_FMLAL_ZA_ZZW_4x4 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZW_4x4(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZW_4x4(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZW_4x4(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZW_4x4(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZW_4x4(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2446) = {
    SEE = 2446;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLAL_ZA_ZZW_4x4(Zm, Rv, Zn, S, off2)
}

val execute_FMLAL_ZA_ZZV_4x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZV_4x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_FMLAL_ZA_ZZV_4x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZV_4x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZV_4x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZV_4x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZV_4x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZV_4x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2447) = {
    SEE = 2447;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLAL_ZA_ZZV_4x1(Zm, Rv, Zn, S, off2)
}

val execute_FMLAL_ZA_ZZi_1 : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZi_1 (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLAL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZi_1(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZi_1(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZi_1(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZi_1(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZi_1(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2448) = {
    SEE = 2448;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLAL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, S, off3)
}

val execute_FMLAL_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZi_2xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_FMLAL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZi_2xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZi_2xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZi_2xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZi_2xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZi_2xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2449) = {
    SEE = 2449;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLAL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_FMLAL_ZA_ZZi_4xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLAL_ZA_ZZi_4xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLAL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_FMLAL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLAL_ZA_ZZi_4xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLAL_ZA_ZZi_4xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLAL_ZA_ZZi_4xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLAL_ZA_ZZi_4xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLAL_ZA_ZZi_4xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2450) = {
    SEE = 2450;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLAL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_FMLSL_ZA_ZZV_1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZV_1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLSL_ZA_ZZV_1 (Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZV_1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZV_1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZV_1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZV_1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZV_1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2451) = {
    SEE = 2451;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLSL_ZA_ZZV_1(Zm, Rv, Zn, S, off3)
}

val execute_FMLSL_ZA_ZZW_2x2 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZW_2x2 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(2)) -> unit

function decode_FMLSL_ZA_ZZW_2x2 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZW_2x2(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZW_2x2(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZW_2x2(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZW_2x2(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZW_2x2(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2452) = {
    SEE = 2452;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLSL_ZA_ZZW_2x2(Zm, Rv, Zn, S, off2)
}

val execute_FMLSL_ZA_ZZV_2x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZV_2x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_FMLSL_ZA_ZZV_2x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZV_2x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZV_2x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZV_2x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZV_2x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZV_2x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2453) = {
    SEE = 2453;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLSL_ZA_ZZV_2x1(Zm, Rv, Zn, S, off2)
}

val execute_FMLSL_ZA_ZZW_4x4 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZW_4x4 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(2)) -> unit

function decode_FMLSL_ZA_ZZW_4x4 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZW_4x4(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZW_4x4(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZW_4x4(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZW_4x4(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZW_4x4(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2454) = {
    SEE = 2454;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLSL_ZA_ZZW_4x4(Zm, Rv, Zn, S, off2)
}

val execute_FMLSL_ZA_ZZV_4x1 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZV_4x1 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, 2 * e + i, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_FMLSL_ZA_ZZV_4x1 (Zm, Rv, Zn, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZV_4x1(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZV_4x1(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZV_4x1(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZV_4x1(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZV_4x1(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2455) = {
    SEE = 2455;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLSL_ZA_ZZV_4x1(Zm, Rv, Zn, S, off2)
}

val execute_FMLSL_ZA_ZZi_1 : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZi_1 (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLSL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 1;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZi_1(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZi_1(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZi_1(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZi_1(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZi_1(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2456) = {
    SEE = 2456;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLSL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, S, off3)
}

val execute_FMLSL_ZA_ZZi_2xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZi_2xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_FMLSL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZi_2xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZi_2xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZi_2xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZi_2xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZi_2xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2457) = {
    SEE = 2457;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLSL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_FMLSL_ZA_ZZi_4xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLSL_ZA_ZZi_4xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 32);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      element1 : bits(16) = Elem_read(operand1, 2 * e + i, 16);
                      let element2 : bits(16) = Elem_read(operand2, s, 16);
                      let element3 : bits(32) = Elem_read(operand3, e, 32);
                      if sub_op then {
                          element1 = FPNeg(element1)
                      };
                      result = Elem_set(result, e, 32, FPMulAddH_ZA(element3, element1, element2, FPCR_read()))
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_FMLSL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_FMLSL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLSL_ZA_ZZi_4xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLSL_ZA_ZZi_4xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLSL_ZA_ZZi_4xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLSL_ZA_ZZi_4xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLSL_ZA_ZZi_4xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2458) = {
    SEE = 2458;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_FMLSL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, S, i3l, off2)
}

val execute_FMAX_MZ_ZZW_2x2 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAX_MZ_ZZW_2x2 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAX_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMAX_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMAX_MZ_ZZW_2x2(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAX_MZ_ZZW_2x2(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAX_MZ_ZZW_2x2(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAX_MZ_ZZW_2x2(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAX_MZ_ZZW_2x2(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2459) = {
    SEE = 2459;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMAX_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_FMAX_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAX_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAX_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMAX_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMAX_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAX_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAX_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAX_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAX_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2460) = {
    SEE = 2460;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMAX_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_FMIN_MZ_ZZW_2x2 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMIN_MZ_ZZW_2x2 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMIN_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMIN_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMIN_MZ_ZZW_2x2(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMIN_MZ_ZZW_2x2(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMIN_MZ_ZZW_2x2(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMIN_MZ_ZZW_2x2(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMIN_MZ_ZZW_2x2(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone] as __opcode)) if SEE < 2461) = {
    SEE = 2461;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMIN_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_FMIN_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMIN_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMIN_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMIN_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMIN_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMIN_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMIN_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMIN_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMIN_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone] as __opcode)) if SEE < 2462) = {
    SEE = 2462;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMIN_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_FMAX_MZ_ZZW_4x4 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAX_MZ_ZZW_4x4 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAX_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FMAX_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMAX_MZ_ZZW_4x4(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAX_MZ_ZZW_4x4(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAX_MZ_ZZW_4x4(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAX_MZ_ZZW_4x4(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAX_MZ_ZZW_4x4(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2463) = {
    SEE = 2463;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMAX_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_FMAX_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAX_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAX_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_FMAX_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMAX_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAX_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAX_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAX_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAX_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2464) = {
    SEE = 2464;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMAX_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_FMIN_MZ_ZZW_4x4 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMIN_MZ_ZZW_4x4 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMIN_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FMIN_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMIN_MZ_ZZW_4x4(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMIN_MZ_ZZW_4x4(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMIN_MZ_ZZW_4x4(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMIN_MZ_ZZW_4x4(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMIN_MZ_ZZW_4x4(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2465) = {
    SEE = 2465;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMIN_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_FMIN_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMIN_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMIN_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_FMIN_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMIN_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMIN_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMIN_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMIN_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMIN_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2466) = {
    SEE = 2466;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMIN_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_FMAXNM_MZ_ZZW_2x2 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAXNM_MZ_ZZW_2x2 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAXNM_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMAXNM_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMAXNM_MZ_ZZW_2x2(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAXNM_MZ_ZZW_2x2(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAXNM_MZ_ZZW_2x2(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAXNM_MZ_ZZW_2x2(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAXNM_MZ_ZZW_2x2(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2467) = {
    SEE = 2467;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMAXNM_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_FMAXNM_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAXNM_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAXNM_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMAXNM_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMAXNM_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAXNM_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAXNM_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAXNM_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAXNM_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2468) = {
    SEE = 2468;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMAXNM_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_FMINNM_MZ_ZZW_2x2 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMINNM_MZ_ZZW_2x2 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMINNM_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMINNM_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMINNM_MZ_ZZW_2x2(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMINNM_MZ_ZZW_2x2(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMINNM_MZ_ZZW_2x2(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMINNM_MZ_ZZW_2x2(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMINNM_MZ_ZZW_2x2(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2469) = {
    SEE = 2469;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMINNM_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_FMINNM_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMINNM_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMINNM_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_FMINNM_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMINNM_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMINNM_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMINNM_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMINNM_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMINNM_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2470) = {
    SEE = 2470;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_FMINNM_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_FMAXNM_MZ_ZZW_4x4 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAXNM_MZ_ZZW_4x4 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAXNM_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FMAXNM_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMAXNM_MZ_ZZW_4x4(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAXNM_MZ_ZZW_4x4(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAXNM_MZ_ZZW_4x4(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAXNM_MZ_ZZW_4x4(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAXNM_MZ_ZZW_4x4(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2471) = {
    SEE = 2471;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMAXNM_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_FMAXNM_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMAXNM_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMAXNM_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_FMAXNM_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMAXNM_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMAXNM_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMAXNM_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMAXNM_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMAXNM_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2472) = {
    SEE = 2472;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMAXNM_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_FMINNM_MZ_ZZW_4x4 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMINNM_MZ_ZZW_4x4 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMINNM_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FMINNM_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMINNM_MZ_ZZW_4x4(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMINNM_MZ_ZZW_4x4(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMINNM_MZ_ZZW_4x4(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMINNM_MZ_ZZW_4x4(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMINNM_MZ_ZZW_4x4(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2473) = {
    SEE = 2473;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMINNM_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_FMINNM_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_FMINNM_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_FMINNM_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_FMINNM_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMINNM_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_FMINNM_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_FMINNM_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_FMINNM_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_FMINNM_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2474) = {
    SEE = 2474;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_FMINNM_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_FCLAMP_MZ_ZZ_2 : forall 'VL 'd 'esize 'm 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('nreg)) -> unit

function execute_FCLAMP_MZ_ZZ_2 (VL, d, esize, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMinNum(FPMaxNum(element1, element3, FPCR_read()), element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FCLAMP_MZ_ZZ_2 : (bits(2), bits(5), bits(5), bits(4)) -> unit

function decode_FCLAMP_MZ_ZZ_2 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FCLAMP_MZ_ZZ_2(128, d, esize, m, n, nreg)
      },
      256 => {
          execute_FCLAMP_MZ_ZZ_2(256, d, esize, m, n, nreg)
      },
      512 => {
          execute_FCLAMP_MZ_ZZ_2(512, d, esize, m, n, nreg)
      },
      1024 => {
          execute_FCLAMP_MZ_ZZ_2(1024, d, esize, m, n, nreg)
      },
      2048 => {
          execute_FCLAMP_MZ_ZZ_2(2048, d, esize, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2475) = {
    SEE = 2475;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_FCLAMP_MZ_ZZ_2(size, Zm, Zn, Zd)
}

val execute_FCLAMP_MZ_ZZ_4 : forall 'VL 'd 'esize 'm 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('nreg)) -> unit

function execute_FCLAMP_MZ_ZZ_4 (VL, d, esize, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            results[r] = Elem_set(results[r], e, esize, FPMinNum(FPMaxNum(element1, element3, FPCR_read()), element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FCLAMP_MZ_ZZ_4 : (bits(2), bits(5), bits(5), bits(3)) -> unit

function decode_FCLAMP_MZ_ZZ_4 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FCLAMP_MZ_ZZ_4(128, d, esize, m, n, nreg)
      },
      256 => {
          execute_FCLAMP_MZ_ZZ_4(256, d, esize, m, n, nreg)
      },
      512 => {
          execute_FCLAMP_MZ_ZZ_4(512, d, esize, m, n, nreg)
      },
      1024 => {
          execute_FCLAMP_MZ_ZZ_4(1024, d, esize, m, n, nreg)
      },
      2048 => {
          execute_FCLAMP_MZ_ZZ_4(2048, d, esize, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2476) = {
    SEE = 2476;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 2, 3);
    decode_FCLAMP_MZ_ZZ_4(size, Zm, Zn, Zd)
}

val execute_BFCVT_Z_MZ2__ : forall 'VL 'd 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n)) -> unit

function execute_BFCVT_Z_MZ2__ (VL, d, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    result : bits('VL) = undefined;
    let operand1 : bits('VL) = Z_read(n + 0, VL);
    let operand2 : bits('VL) = Z_read(n + 1, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(32) = Elem_read(operand1, e, 32);
        let element2 : bits(32) = Elem_read(operand2, e, 32);
        let res1 : bits(16) = FPConvertBF__1(element1, FPCR_read());
        let res2 : bits(16) = FPConvertBF__1(element2, FPCR_read());
        result = Elem_set(result, e, 16, res1);
        result = Elem_set(result, elements + e, 16, res2)
    };
    Z_set(d, VL) = result
}

val decode_BFCVT_Z_MZ2__ : (bits(4), bits(1), bits(5)) -> unit

function decode_BFCVT_Z_MZ2__ (Zn, N, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFCVT_Z_MZ2__(128, d, n)
      },
      256 => {
          execute_BFCVT_Z_MZ2__(256, d, n)
      },
      512 => {
          execute_BFCVT_Z_MZ2__(512, d, n)
      },
      1024 => {
          execute_BFCVT_Z_MZ2__(1024, d, n)
      },
      2048 => {
          execute_BFCVT_Z_MZ2__(2048, d, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2477) = {
    SEE = 2477;
    let Zn = Slice(__opcode, 6, 4);
    let N = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFCVT_Z_MZ2__(Zn, N, Zd)
}

val execute_FCVT_Z_MZ2__ : forall 'VL 'd 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n)) -> unit

function execute_FCVT_Z_MZ2__ (VL, d, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    result : bits('VL) = undefined;
    let operand1 : bits('VL) = Z_read(n + 0, VL);
    let operand2 : bits('VL) = Z_read(n + 1, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(32) = Elem_read(operand1, e, 32);
        let element2 : bits(32) = Elem_read(operand2, e, 32);
        let res1 : bits(16) = FPConvertSVE__1(element1, FPCR_read(), 16);
        let res2 : bits(16) = FPConvertSVE__1(element2, FPCR_read(), 16);
        result = Elem_set(result, e, 16, res1);
        result = Elem_set(result, elements + e, 16, res2)
    };
    Z_set(d, VL) = result
}

val decode_FCVT_Z_MZ2__ : (bits(4), bits(1), bits(5)) -> unit

function decode_FCVT_Z_MZ2__ (Zn, N, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCVT_Z_MZ2__(128, d, n)
      },
      256 => {
          execute_FCVT_Z_MZ2__(256, d, n)
      },
      512 => {
          execute_FCVT_Z_MZ2__(512, d, n)
      },
      1024 => {
          execute_FCVT_Z_MZ2__(1024, d, n)
      },
      2048 => {
          execute_FCVT_Z_MZ2__(2048, d, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2478) = {
    SEE = 2478;
    let Zn = Slice(__opcode, 6, 4);
    let N = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVT_Z_MZ2__(Zn, N, Zd)
}

val execute_BFCVTN_Z_MZ2__ : forall 'VL 'd 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n)) -> unit

function execute_BFCVTN_Z_MZ2__ (VL, d, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    result : bits('VL) = undefined;
    let operand1 : bits('VL) = Z_read(n + 0, VL);
    let operand2 : bits('VL) = Z_read(n + 1, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(32) = Elem_read(operand1, e, 32);
        let element2 : bits(32) = Elem_read(operand2, e, 32);
        let res1 : bits(16) = FPConvertBF__1(element1, FPCR_read());
        let res2 : bits(16) = FPConvertBF__1(element2, FPCR_read());
        result = Elem_set(result, 2 * e + 0, 16, res1);
        result = Elem_set(result, 2 * e + 1, 16, res2)
    };
    Z_set(d, VL) = result
}

val decode_BFCVTN_Z_MZ2__ : (bits(4), bits(1), bits(5)) -> unit

function decode_BFCVTN_Z_MZ2__ (Zn, N, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFCVTN_Z_MZ2__(128, d, n)
      },
      256 => {
          execute_BFCVTN_Z_MZ2__(256, d, n)
      },
      512 => {
          execute_BFCVTN_Z_MZ2__(512, d, n)
      },
      1024 => {
          execute_BFCVTN_Z_MZ2__(1024, d, n)
      },
      2048 => {
          execute_BFCVTN_Z_MZ2__(2048, d, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, _, _, _, _, _] as __opcode)) if SEE < 2479) = {
    SEE = 2479;
    let Zn = Slice(__opcode, 6, 4);
    let N = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFCVTN_Z_MZ2__(Zn, N, Zd)
}

val execute_FCVTN_Z_MZ2__ : forall 'VL 'd 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n)) -> unit

function execute_FCVTN_Z_MZ2__ (VL, d, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    result : bits('VL) = undefined;
    let operand1 : bits('VL) = Z_read(n + 0, VL);
    let operand2 : bits('VL) = Z_read(n + 1, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(32) = Elem_read(operand1, e, 32);
        let element2 : bits(32) = Elem_read(operand2, e, 32);
        let res1 : bits(16) = FPConvertSVE__1(element1, FPCR_read(), 16);
        let res2 : bits(16) = FPConvertSVE__1(element2, FPCR_read(), 16);
        result = Elem_set(result, 2 * e + 0, 16, res1);
        result = Elem_set(result, 2 * e + 1, 16, res2)
    };
    Z_set(d, VL) = result
}

val decode_FCVTN_Z_MZ2__ : (bits(4), bits(1), bits(5)) -> unit

function decode_FCVTN_Z_MZ2__ (Zn, N, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCVTN_Z_MZ2__(128, d, n)
      },
      256 => {
          execute_FCVTN_Z_MZ2__(256, d, n)
      },
      512 => {
          execute_FCVTN_Z_MZ2__(512, d, n)
      },
      1024 => {
          execute_FCVTN_Z_MZ2__(1024, d, n)
      },
      2048 => {
          execute_FCVTN_Z_MZ2__(2048, d, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, _, _, _, _, _] as __opcode)) if SEE < 2480) = {
    SEE = 2480;
    let Zn = Slice(__opcode, 6, 4);
    let N = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTN_Z_MZ2__(Zn, N, Zd)
}

val execute_FCVTZU_MZ_Z_2 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_FCVTZU_MZ_Z_2 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPToFixed(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FCVTZU_MZ_Z_2 : (bits(4), bits(1), bits(4)) -> unit

function decode_FCVTZU_MZ_Z_2 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_MZ_Z_2(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_FCVTZU_MZ_Z_2(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_FCVTZU_MZ_Z_2(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_MZ_Z_2(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_MZ_Z_2(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2481) = {
    SEE = 2481;
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 1, 4);
    decode_FCVTZU_MZ_Z_2(Zn, U, Zd)
}

val execute_FCVTZU_MZ_Z_4 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_FCVTZU_MZ_Z_4 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPToFixed(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FCVTZU_MZ_Z_4 : (bits(3), bits(1), bits(3)) -> unit

function decode_FCVTZU_MZ_Z_4 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_MZ_Z_4(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_FCVTZU_MZ_Z_4(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_FCVTZU_MZ_Z_4(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_MZ_Z_4(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_MZ_Z_4(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2482) = {
    SEE = 2482;
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 2, 3);
    decode_FCVTZU_MZ_Z_4(Zn, U, Zd)
}

val execute_FCVTZS_MZ_Z_2 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_FCVTZS_MZ_Z_2 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPToFixed(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FCVTZS_MZ_Z_2 : (bits(4), bits(1), bits(4)) -> unit

function decode_FCVTZS_MZ_Z_2 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_MZ_Z_2(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_FCVTZS_MZ_Z_2(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_FCVTZS_MZ_Z_2(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_MZ_Z_2(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_MZ_Z_2(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2483) = {
    SEE = 2483;
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 1, 4);
    decode_FCVTZS_MZ_Z_2(Zn, U, Zd)
}

val execute_FCVTZS_MZ_Z_4 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_FCVTZS_MZ_Z_4 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPToFixed(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FCVTZS_MZ_Z_4 : (bits(3), bits(1), bits(3)) -> unit

function decode_FCVTZS_MZ_Z_4 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_MZ_Z_4(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_FCVTZS_MZ_Z_4(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_FCVTZS_MZ_Z_4(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_MZ_Z_4(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_MZ_Z_4(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2484) = {
    SEE = 2484;
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 2, 3);
    decode_FCVTZS_MZ_Z_4(Zn, U, Zd)
}

val execute_UCVTF_MZ_Z_2 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_UCVTF_MZ_Z_2 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FixedToFP(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_UCVTF_MZ_Z_2 : (bits(4), bits(1), bits(4)) -> unit

function decode_UCVTF_MZ_Z_2 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_MZ_Z_2(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_UCVTF_MZ_Z_2(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_UCVTF_MZ_Z_2(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_UCVTF_MZ_Z_2(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_UCVTF_MZ_Z_2(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2485) = {
    SEE = 2485;
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 1, 4);
    decode_UCVTF_MZ_Z_2(Zn, U, Zd)
}

val execute_UCVTF_MZ_Z_4 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_UCVTF_MZ_Z_4 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FixedToFP(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_UCVTF_MZ_Z_4 : (bits(3), bits(1), bits(3)) -> unit

function decode_UCVTF_MZ_Z_4 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_MZ_Z_4(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_UCVTF_MZ_Z_4(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_UCVTF_MZ_Z_4(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_UCVTF_MZ_Z_4(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_UCVTF_MZ_Z_4(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2486) = {
    SEE = 2486;
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 2, 3);
    decode_UCVTF_MZ_Z_4(Zn, U, Zd)
}

val execute_SCVTF_MZ_Z_2 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_SCVTF_MZ_Z_2 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FixedToFP(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SCVTF_MZ_Z_2 : (bits(4), bits(1), bits(4)) -> unit

function decode_SCVTF_MZ_Z_2 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_MZ_Z_2(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_SCVTF_MZ_Z_2(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_SCVTF_MZ_Z_2(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_SCVTF_MZ_Z_2(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_SCVTF_MZ_Z_2(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2487) = {
    SEE = 2487;
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 1, 4);
    decode_SCVTF_MZ_Z_2(Zn, U, Zd)
}

val execute_SCVTF_MZ_Z_4 : forall 'VL 'd ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n), int('nreg), FPRounding, bool('is_unsigned)) -> unit

function execute_SCVTF_MZ_Z_4 (VL, d, n, nreg, rounding, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FixedToFP(element, 0, is_unsigned, FPCR_read(), rounding, 32))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SCVTF_MZ_Z_4 : (bits(3), bits(1), bits(3)) -> unit

function decode_SCVTF_MZ_Z_4 (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_MZ_Z_4(128, d, n, nreg, rounding, is_unsigned)
      },
      256 => {
          execute_SCVTF_MZ_Z_4(256, d, n, nreg, rounding, is_unsigned)
      },
      512 => {
          execute_SCVTF_MZ_Z_4(512, d, n, nreg, rounding, is_unsigned)
      },
      1024 => {
          execute_SCVTF_MZ_Z_4(1024, d, n, nreg, rounding, is_unsigned)
      },
      2048 => {
          execute_SCVTF_MZ_Z_4(2048, d, n, nreg, rounding, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2488) = {
    SEE = 2488;
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 2, 3);
    decode_SCVTF_MZ_Z_4(Zn, U, Zd)
}

val execute_FRINTA_MZ_Z_2 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTA_MZ_Z_2 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTA_MZ_Z_2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FRINTA_MZ_Z_2 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_TIEAWAY;
    match VL {
      128 => {
          execute_FRINTA_MZ_Z_2(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTA_MZ_Z_2(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTA_MZ_Z_2(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTA_MZ_Z_2(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTA_MZ_Z_2(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2489) = {
    SEE = 2489;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 1, 4);
    decode_FRINTA_MZ_Z_2(size, Zn, Zd)
}

val execute_FRINTM_MZ_Z_2 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTM_MZ_Z_2 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTM_MZ_Z_2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FRINTM_MZ_Z_2 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_NEGINF;
    match VL {
      128 => {
          execute_FRINTM_MZ_Z_2(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTM_MZ_Z_2(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTM_MZ_Z_2(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTM_MZ_Z_2(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTM_MZ_Z_2(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2490) = {
    SEE = 2490;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 1, 4);
    decode_FRINTM_MZ_Z_2(size, Zn, Zd)
}

val execute_FRINTN_MZ_Z_2 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTN_MZ_Z_2 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTN_MZ_Z_2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FRINTN_MZ_Z_2 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_TIEEVEN;
    match VL {
      128 => {
          execute_FRINTN_MZ_Z_2(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTN_MZ_Z_2(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTN_MZ_Z_2(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTN_MZ_Z_2(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTN_MZ_Z_2(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2491) = {
    SEE = 2491;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 1, 4);
    decode_FRINTN_MZ_Z_2(size, Zn, Zd)
}

val execute_FRINTP_MZ_Z_2 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTP_MZ_Z_2 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTP_MZ_Z_2 : (bits(2), bits(4), bits(4)) -> unit

function decode_FRINTP_MZ_Z_2 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_POSINF;
    match VL {
      128 => {
          execute_FRINTP_MZ_Z_2(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTP_MZ_Z_2(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTP_MZ_Z_2(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTP_MZ_Z_2(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTP_MZ_Z_2(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2492) = {
    SEE = 2492;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 1, 4);
    decode_FRINTP_MZ_Z_2(size, Zn, Zd)
}

val execute_FRINTA_MZ_Z_4 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTA_MZ_Z_4 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTA_MZ_Z_4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FRINTA_MZ_Z_4 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_TIEAWAY;
    match VL {
      128 => {
          execute_FRINTA_MZ_Z_4(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTA_MZ_Z_4(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTA_MZ_Z_4(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTA_MZ_Z_4(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTA_MZ_Z_4(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2493) = {
    SEE = 2493;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_FRINTA_MZ_Z_4(size, Zn, Zd)
}

val execute_FRINTM_MZ_Z_4 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTM_MZ_Z_4 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTM_MZ_Z_4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FRINTM_MZ_Z_4 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_NEGINF;
    match VL {
      128 => {
          execute_FRINTM_MZ_Z_4(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTM_MZ_Z_4(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTM_MZ_Z_4(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTM_MZ_Z_4(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTM_MZ_Z_4(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2494) = {
    SEE = 2494;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_FRINTM_MZ_Z_4(size, Zn, Zd)
}

val execute_FRINTN_MZ_Z_4 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTN_MZ_Z_4 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTN_MZ_Z_4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FRINTN_MZ_Z_4 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_TIEEVEN;
    match VL {
      128 => {
          execute_FRINTN_MZ_Z_4(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTN_MZ_Z_4(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTN_MZ_Z_4(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTN_MZ_Z_4(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTN_MZ_Z_4(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2495) = {
    SEE = 2495;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_FRINTN_MZ_Z_4(size, Zn, Zd)
}

val execute_FRINTP_MZ_Z_4 : forall 'VL 'd ('exact : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('exact), int('n), int('nreg), FPRounding) -> unit

function execute_FRINTP_MZ_Z_4 (VL, d, exact, n, nreg, rounding) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 32);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(32) = Elem_read(operand, e, 32);
            results[r] = Elem_set(results[r], e, 32, FPRoundInt(element, FPCR_read(), rounding, exact))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_FRINTP_MZ_Z_4 : (bits(2), bits(3), bits(3)) -> unit

function decode_FRINTP_MZ_Z_4 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_POSINF;
    match VL {
      128 => {
          execute_FRINTP_MZ_Z_4(128, d, exact, n, nreg, rounding)
      },
      256 => {
          execute_FRINTP_MZ_Z_4(256, d, exact, n, nreg, rounding)
      },
      512 => {
          execute_FRINTP_MZ_Z_4(512, d, exact, n, nreg, rounding)
      },
      1024 => {
          execute_FRINTP_MZ_Z_4(1024, d, exact, n, nreg, rounding)
      },
      2048 => {
          execute_FRINTP_MZ_Z_4(2048, d, exact, n, nreg, rounding)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2496) = {
    SEE = 2496;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_FRINTP_MZ_Z_4(size, Zn, Zd)
}

val execute_ADD_ZA_ZW_2x2 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_ADD_ZA_ZW_2x2 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 + element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_ADD_ZA_ZW_2x2 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_ADD_ZA_ZW_2x2 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ADD_ZA_ZW_2x2(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_ADD_ZA_ZW_2x2(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_ADD_ZA_ZW_2x2(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_ADD_ZA_ZW_2x2(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_ADD_ZA_ZW_2x2(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2497) = {
    SEE = 2497;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_ADD_ZA_ZW_2x2(sz, Rv, Zm, S, off3)
}

val execute_SUB_ZA_ZW_2x2 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_SUB_ZA_ZW_2x2 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 - element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUB_ZA_ZW_2x2 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SUB_ZA_ZW_2x2 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SUB_ZA_ZW_2x2(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_SUB_ZA_ZW_2x2(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_SUB_ZA_ZW_2x2(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_SUB_ZA_ZW_2x2(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_SUB_ZA_ZW_2x2(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2498) = {
    SEE = 2498;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUB_ZA_ZW_2x2(sz, Rv, Zm, S, off3)
}

val execute_ADD_ZA_ZW_4x4 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_ADD_ZA_ZW_4x4 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 + element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_ADD_ZA_ZW_4x4 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_ADD_ZA_ZW_4x4 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ADD_ZA_ZW_4x4(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_ADD_ZA_ZW_4x4(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_ADD_ZA_ZW_4x4(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_ADD_ZA_ZW_4x4(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_ADD_ZA_ZW_4x4(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2499) = {
    SEE = 2499;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_ADD_ZA_ZW_4x4(sz, Rv, Zm, S, off3)
}

val execute_SUB_ZA_ZW_4x4 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_SUB_ZA_ZW_4x4 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 - element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUB_ZA_ZW_4x4 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SUB_ZA_ZW_4x4 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SUB_ZA_ZW_4x4(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_SUB_ZA_ZW_4x4(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_SUB_ZA_ZW_4x4(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_SUB_ZA_ZW_4x4(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_SUB_ZA_ZW_4x4(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2500) = {
    SEE = 2500;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUB_ZA_ZW_4x4(sz, Rv, Zm, S, off3)
}

val execute_ADD_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_ADD_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 + element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_ADD_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_ADD_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ADD_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_ADD_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_ADD_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_ADD_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_ADD_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2501) = {
    SEE = 2501;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_ADD_ZA_ZZW_2x2(sz, Zm, Rv, Zn, S, off3)
}

val execute_SUB_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUB_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 - element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUB_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SUB_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SUB_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUB_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUB_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUB_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUB_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2502) = {
    SEE = 2502;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUB_ZA_ZZW_2x2(sz, Zm, Rv, Zn, S, off3)
}

val execute_ADD_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_ADD_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 + element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_ADD_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_ADD_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ADD_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_ADD_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_ADD_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_ADD_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_ADD_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2503) = {
    SEE = 2503;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_ADD_ZA_ZZV_2x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_SUB_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUB_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 - element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUB_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SUB_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SUB_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUB_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUB_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUB_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUB_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2504) = {
    SEE = 2504;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUB_ZA_ZZV_2x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_ADD_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_ADD_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 + element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_ADD_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_ADD_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ADD_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_ADD_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_ADD_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_ADD_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_ADD_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2505) = {
    SEE = 2505;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_ADD_ZA_ZZW_4x4(sz, Zm, Rv, Zn, S, off3)
}

val execute_SUB_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUB_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 - element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUB_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SUB_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SUB_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUB_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUB_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUB_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUB_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2506) = {
    SEE = 2506;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUB_ZA_ZZW_4x4(sz, Zm, Rv, Zn, S, off3)
}

val execute_ADD_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_ADD_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 + element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_ADD_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_ADD_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ADD_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_ADD_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_ADD_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_ADD_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_ADD_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2507) = {
    SEE = 2507;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_ADD_ZA_ZZV_4x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_SUB_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUB_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, element1 - element2)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUB_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SUB_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SUB_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUB_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUB_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUB_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUB_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2508) = {
    SEE = 2508;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUB_ZA_ZZV_4x1(sz, Zm, Rv, Zn, S, off3)
}

val execute_UDOT_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2509) = {
    SEE = 2509;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZW_2x2(sz, Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2510) = {
    SEE = 2510;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZW_2x2(sz, Zm, Rv, Zn, U, off3)
}

val execute_USDOT_ZA_ZZW_S2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USDOT_ZA_ZZW_S2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_USDOT_ZA_ZZW_S2x2 : (bits(4), bits(2), bits(4), bits(3)) -> unit

function decode_USDOT_ZA_ZZW_S2x2 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_USDOT_ZA_ZZW_S2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USDOT_ZA_ZZW_S2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USDOT_ZA_ZZW_S2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USDOT_ZA_ZZW_S2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USDOT_ZA_ZZW_S2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2511) = {
    SEE = 2511;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let off3 = Slice(__opcode, 0, 3);
    decode_USDOT_ZA_ZZW_S2x2(Zm, Rv, Zn, off3)
}

val execute_UDOT_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2512) = {
    SEE = 2512;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZV_2x1(sz, Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2513) = {
    SEE = 2513;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZV_2x1(sz, Zm, Rv, Zn, U, off3)
}

val execute_USDOT_ZA_ZZV_S2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USDOT_ZA_ZZV_S2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_USDOT_ZA_ZZV_S2x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_USDOT_ZA_ZZV_S2x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_USDOT_ZA_ZZV_S2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USDOT_ZA_ZZV_S2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USDOT_ZA_ZZV_S2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USDOT_ZA_ZZV_S2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USDOT_ZA_ZZV_S2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2514) = {
    SEE = 2514;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_USDOT_ZA_ZZV_S2x1(Zm, Rv, Zn, U, off3)
}

val execute_SUDOT_ZA_ZZV_S2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUDOT_ZA_ZZV_S2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUDOT_ZA_ZZV_S2x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SUDOT_ZA_ZZV_S2x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SUDOT_ZA_ZZV_S2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUDOT_ZA_ZZV_S2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUDOT_ZA_ZZV_S2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUDOT_ZA_ZZV_S2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUDOT_ZA_ZZV_S2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2515) = {
    SEE = 2515;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUDOT_ZA_ZZV_S2x1(Zm, Rv, Zn, U, off3)
}

val execute_UDOT_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2516) = {
    SEE = 2516;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZW_4x4(sz, Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2517) = {
    SEE = 2517;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZW_4x4(sz, Zm, Rv, Zn, U, off3)
}

val execute_USDOT_ZA_ZZW_S4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USDOT_ZA_ZZW_S4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_USDOT_ZA_ZZW_S4x4 : (bits(3), bits(2), bits(3), bits(3)) -> unit

function decode_USDOT_ZA_ZZW_S4x4 (Zm, Rv, Zn, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_USDOT_ZA_ZZW_S4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USDOT_ZA_ZZW_S4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USDOT_ZA_ZZW_S4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USDOT_ZA_ZZW_S4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USDOT_ZA_ZZW_S4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitone, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2518) = {
    SEE = 2518;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let off3 = Slice(__opcode, 0, 3);
    decode_USDOT_ZA_ZZW_S4x4(Zm, Rv, Zn, off3)
}

val execute_UDOT_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2519) = {
    SEE = 2519;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZV_4x1(sz, Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2520) = {
    SEE = 2520;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZV_4x1(sz, Zm, Rv, Zn, U, off3)
}

val execute_USDOT_ZA_ZZV_S4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USDOT_ZA_ZZV_S4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_USDOT_ZA_ZZV_S4x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_USDOT_ZA_ZZV_S4x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_USDOT_ZA_ZZV_S4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USDOT_ZA_ZZV_S4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USDOT_ZA_ZZV_S4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USDOT_ZA_ZZV_S4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USDOT_ZA_ZZV_S4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2521) = {
    SEE = 2521;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_USDOT_ZA_ZZV_S4x1(Zm, Rv, Zn, U, off3)
}

val execute_SUDOT_ZA_ZZV_S4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUDOT_ZA_ZZV_S4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUDOT_ZA_ZZV_S4x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SUDOT_ZA_ZZV_S4x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SUDOT_ZA_ZZV_S4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUDOT_ZA_ZZV_S4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUDOT_ZA_ZZV_S4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUDOT_ZA_ZZV_S4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUDOT_ZA_ZZV_S4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2522) = {
    SEE = 2522;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUDOT_ZA_ZZV_S4x1(Zm, Rv, Zn, U, off3)
}

val execute_UDOT_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZi_S2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2523) = {
    SEE = 2523;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZi_S2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SDOT_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZi_S2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2524) = {
    SEE = 2524;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZi_S2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_USDOT_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USDOT_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_USDOT_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_USDOT_ZA_ZZi_S2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_USDOT_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_USDOT_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_USDOT_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USDOT_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USDOT_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitone, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2525) = {
    SEE = 2525;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_USDOT_ZA_ZZi_S2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SUDOT_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUDOT_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUDOT_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SUDOT_ZA_ZZi_S2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SUDOT_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUDOT_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUDOT_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUDOT_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUDOT_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _] as __opcode)) if SEE < 2526) = {
    SEE = 2526;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUDOT_ZA_ZZi_S2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_UDOT_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZi_D2xi (Zm, Rv, i1, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2527) = {
    SEE = 2527;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZi_D2xi(Zm, Rv, i1, Zn, U, off3)
}

val execute_SDOT_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZi_D2xi (Zm, Rv, i1, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2528) = {
    SEE = 2528;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZi_D2xi(Zm, Rv, i1, Zn, U, off3)
}

val execute_UDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2529) = {
    SEE = 2529;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2530) = {
    SEE = 2530;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_USDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_USDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_USDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_USDOT_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_USDOT_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_USDOT_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2531) = {
    SEE = 2531;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_USDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SUDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SUDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SUDOT_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUDOT_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUDOT_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _] as __opcode)) if SEE < 2532) = {
    SEE = 2532;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_UDOT_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(3)) -> unit

function decode_UDOT_ZA_ZZi_D4xi (Zm, Rv, i1, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UDOT_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2533) = {
    SEE = 2533;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA_ZZi_D4xi(Zm, Rv, i1, Zn, U, off3)
}

val execute_SDOT_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 3 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(3)) -> unit

function decode_SDOT_ZA_ZZi_D4xi (Zm, Rv, i1, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SDOT_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2534) = {
    SEE = 2534;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA_ZZi_D4xi(Zm, Rv, i1, Zn, U, off3)
}

val execute_UVDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_UVDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 4);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = UInt(Elem_read(operand1, 4 * e + r, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UVDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_UVDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_UVDOT_ZA_ZZi_S4xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_UVDOT_ZA_ZZi_S4xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_UVDOT_ZA_ZZi_S4xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_UVDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_UVDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2535) = {
    SEE = 2535;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UVDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SVDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_SVDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 4);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = SInt(Elem_read(operand1, 4 * e + r, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SVDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SVDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_SVDOT_ZA_ZZi_S4xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_SVDOT_ZA_ZZi_S4xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_SVDOT_ZA_ZZi_S4xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_SVDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_SVDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2536) = {
    SEE = 2536;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SVDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_USVDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_USVDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 4);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = UInt(Elem_read(operand1, 4 * e + r, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_USVDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_USVDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_USVDOT_ZA_ZZi_S4xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_USVDOT_ZA_ZZi_S4xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_USVDOT_ZA_ZZi_S4xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_USVDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_USVDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2537) = {
    SEE = 2537;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_USVDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SUVDOT_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_SUVDOT_ZA_ZZi_S4xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 4);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = SInt(Elem_read(operand1, 4 * e + r, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SUVDOT_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SUVDOT_ZA_ZZi_S4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_SUVDOT_ZA_ZZi_S4xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_SUVDOT_ZA_ZZi_S4xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_SUVDOT_ZA_ZZi_S4xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_SUVDOT_ZA_ZZi_S4xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_SUVDOT_ZA_ZZi_S4xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _] as __opcode)) if SEE < 2538) = {
    SEE = 2538;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SUVDOT_ZA_ZZi_S4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_UVDOT_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_UVDOT_ZA_ZZi_D4xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 4);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = UInt(Elem_read(operand1, 4 * e + r, DIV(esize, 4)));
                let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UVDOT_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(3)) -> unit

function decode_UVDOT_ZA_ZZi_D4xi (Zm, Rv, i1, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    match VL {
      128 => {
          execute_UVDOT_ZA_ZZi_D4xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_UVDOT_ZA_ZZi_D4xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_UVDOT_ZA_ZZi_D4xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_UVDOT_ZA_ZZi_D4xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_UVDOT_ZA_ZZi_D4xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2539) = {
    SEE = 2539;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UVDOT_ZA_ZZi_D4xi(Zm, Rv, i1, Zn, U, off3)
}

val execute_SVDOT_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_SVDOT_ZA_ZZi_D4xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 4);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 3 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = SInt(Elem_read(operand1, 4 * e + r, DIV(esize, 4)));
                let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SVDOT_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(3)) -> unit

function decode_SVDOT_ZA_ZZi_D4xi (Zm, Rv, i1, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 64;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i1);
    match VL {
      128 => {
          execute_SVDOT_ZA_ZZi_D4xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_SVDOT_ZA_ZZi_D4xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_SVDOT_ZA_ZZi_D4xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_SVDOT_ZA_ZZi_D4xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_SVDOT_ZA_ZZi_D4xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2540) = {
    SEE = 2540;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i1 = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SVDOT_ZA_ZZi_D4xi(Zm, Rv, i1, Zn, U, off3)
}

val execute_UDOT_ZA32_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA32_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA32_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_UDOT_ZA32_ZZW_2x2 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UDOT_ZA32_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA32_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA32_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA32_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA32_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2541) = {
    SEE = 2541;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA32_ZZW_2x2(Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA32_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA32_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA32_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SDOT_ZA32_ZZW_2x2 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SDOT_ZA32_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA32_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA32_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA32_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA32_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2542) = {
    SEE = 2542;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA32_ZZW_2x2(Zm, Rv, Zn, U, off3)
}

val execute_UDOT_ZA32_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA32_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA32_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_UDOT_ZA32_ZZV_2x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UDOT_ZA32_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA32_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA32_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA32_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA32_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2543) = {
    SEE = 2543;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA32_ZZV_2x1(Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA32_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA32_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA32_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SDOT_ZA32_ZZV_2x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SDOT_ZA32_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA32_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA32_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA32_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA32_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2544) = {
    SEE = 2544;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA32_ZZV_2x1(Zm, Rv, Zn, U, off3)
}

val execute_UDOT_ZA32_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA32_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA32_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_UDOT_ZA32_ZZW_4x4 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UDOT_ZA32_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA32_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA32_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA32_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA32_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitone, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2545) = {
    SEE = 2545;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA32_ZZW_4x4(Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA32_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA32_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA32_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SDOT_ZA32_ZZW_4x4 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SDOT_ZA32_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA32_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA32_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA32_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA32_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitone, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2546) = {
    SEE = 2546;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA32_ZZW_4x4(Zm, Rv, Zn, U, off3)
}

val execute_UDOT_ZA32_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA32_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA32_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_UDOT_ZA32_ZZV_4x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UDOT_ZA32_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA32_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA32_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA32_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA32_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2547) = {
    SEE = 2547;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA32_ZZV_4x1(Zm, Rv, Zn, U, off3)
}

val execute_SDOT_ZA32_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA32_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA32_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_SDOT_ZA32_ZZV_4x1 (Zm, Rv, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SDOT_ZA32_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA32_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA32_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA32_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA32_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2548) = {
    SEE = 2548;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA32_ZZV_4x1(Zm, Rv, Zn, U, off3)
}

val execute_UDOT_ZA32_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA32_ZZi_2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = UInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA32_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_UDOT_ZA32_ZZi_2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UDOT_ZA32_ZZi_2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA32_ZZi_2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA32_ZZi_2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA32_ZZi_2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA32_ZZi_2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2549) = {
    SEE = 2549;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA32_ZZi_2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SDOT_ZA32_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA32_ZZi_2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = SInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA32_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SDOT_ZA32_ZZi_2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SDOT_ZA32_ZZi_2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA32_ZZi_2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA32_ZZi_2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA32_ZZi_2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA32_ZZi_2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2550) = {
    SEE = 2550;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA32_ZZi_2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_UDOT_ZA32_ZZi_4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UDOT_ZA32_ZZi_4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = UInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UDOT_ZA32_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_UDOT_ZA32_ZZi_4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UDOT_ZA32_ZZi_4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UDOT_ZA32_ZZi_4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UDOT_ZA32_ZZi_4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UDOT_ZA32_ZZi_4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UDOT_ZA32_ZZi_4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2551) = {
    SEE = 2551;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UDOT_ZA32_ZZi_4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SDOT_ZA32_ZZi_4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SDOT_ZA32_ZZi_4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            foreach (i from 0 to 1 by 1 in inc) {
                let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                let 'element2 = SInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SDOT_ZA32_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_SDOT_ZA32_ZZi_4xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SDOT_ZA32_ZZi_4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SDOT_ZA32_ZZi_4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SDOT_ZA32_ZZi_4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SDOT_ZA32_ZZi_4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SDOT_ZA32_ZZi_4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2552) = {
    SEE = 2552;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SDOT_ZA32_ZZi_4xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_UVDOT_ZA32_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_UVDOT_ZA32_ZZi_2xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 2);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = UInt(Elem_read(operand1, 2 * e + r, DIV(esize, 2)));
                let 'element2 = UInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_UVDOT_ZA32_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_UVDOT_ZA32_ZZi_2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_UVDOT_ZA32_ZZi_2xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_UVDOT_ZA32_ZZi_2xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_UVDOT_ZA32_ZZi_2xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_UVDOT_ZA32_ZZi_2xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_UVDOT_ZA32_ZZi_2xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2553) = {
    SEE = 2553;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UVDOT_ZA32_ZZi_2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_SVDOT_ZA32_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('offset), int('v)) -> unit

function execute_SVDOT_ZA32_ZZi_2xi (VL, esize, index, m, n, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, 2);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            sum : bits('esize) = Elem_read(operand3, e, esize);
            foreach (i from 0 to 1 by 1 in inc) {
                let operand1 : bits('VL) = Z_read(n + i, VL);
                let 'element1 = SInt(Elem_read(operand1, 2 * e + r, DIV(esize, 2)));
                let 'element2 = SInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
                sum = sum + element1 * element2
            };
            result = Elem_set(result, e, esize, sum)
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_SVDOT_ZA32_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_SVDOT_ZA32_ZZi_2xi (Zm, Rv, i2, Zn, U, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 32;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_SVDOT_ZA32_ZZi_2xi(128, esize, index, m, n, offset, v)
      },
      256 => {
          execute_SVDOT_ZA32_ZZi_2xi(256, esize, index, m, n, offset, v)
      },
      512 => {
          execute_SVDOT_ZA32_ZZi_2xi(512, esize, index, m, n, offset, v)
      },
      1024 => {
          execute_SVDOT_ZA32_ZZi_2xi(1024, esize, index, m, n, offset, v)
      },
      2048 => {
          execute_SVDOT_ZA32_ZZi_2xi(2048, esize, index, m, n, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2554) = {
    SEE = 2554;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i2 = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SVDOT_ZA32_ZZi_2xi(Zm, Rv, i2, Zn, U, off3)
}

val execute_UMLALL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZV_1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLALL_ZA_ZZV_1 (sz, Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2555) = {
    SEE = 2555;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLALL_ZA_ZZV_1(sz, Zm, Rv, Zn, U, S, off2)
}

val execute_UMLSLL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZV_1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSLL_ZA_ZZV_1 (sz, Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2556) = {
    SEE = 2556;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSLL_ZA_ZZV_1(sz, Zm, Rv, Zn, U, S, off2)
}

val execute_SMLALL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZV_1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLALL_ZA_ZZV_1 (sz, Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2557) = {
    SEE = 2557;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLALL_ZA_ZZV_1(sz, Zm, Rv, Zn, U, S, off2)
}

val execute_SMLSLL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZV_1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSLL_ZA_ZZV_1 (sz, Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2558) = {
    SEE = 2558;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSLL_ZA_ZZV_1(sz, Zm, Rv, Zn, U, S, off2)
}

val execute_USMLALL_ZA_ZZV_S : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZV_S (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZV_S : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_USMLALL_ZA_ZZV_S (sz, Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZV_S(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZV_S(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZV_S(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZV_S(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZV_S(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _] as __opcode)) if SEE < 2559) = {
    SEE = 2559;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_USMLALL_ZA_ZZV_S(sz, Zm, Rv, Zn, U, S, off2)
}

val execute_UMLALL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(1), bits(1)) -> unit

function decode_UMLALL_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2560) = {
    SEE = 2560;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZW_2x2(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLSLL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(1), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2561) = {
    SEE = 2561;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZW_2x2(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLALL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(1), bits(1)) -> unit

function decode_SMLALL_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2562) = {
    SEE = 2562;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZW_2x2(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLSLL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZW_2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(1), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZW_2x2 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2563) = {
    SEE = 2563;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZW_2x2(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_USMLALL_ZA_ZZW_S2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZW_S2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZW_S2x2 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(1), bits(1)) -> unit

function decode_USMLALL_ZA_ZZW_S2x2 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZW_S2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZW_S2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZW_S2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZW_S2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZW_S2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _] as __opcode)) if SEE < 2564) = {
    SEE = 2564;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_USMLALL_ZA_ZZW_S2x2(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLALL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_UMLALL_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2565) = {
    SEE = 2565;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZV_2x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLSLL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2566) = {
    SEE = 2566;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZV_2x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLALL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_SMLALL_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2567) = {
    SEE = 2567;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZV_2x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLSLL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZV_2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZV_2x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2568) = {
    SEE = 2568;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZV_2x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_USMLALL_ZA_ZZV_S2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZV_S2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZV_S2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_USMLALL_ZA_ZZV_S2x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZV_S2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZV_S2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZV_S2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZV_S2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZV_S2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _] as __opcode)) if SEE < 2569) = {
    SEE = 2569;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_USMLALL_ZA_ZZV_S2x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SUMLALL_ZA_ZZV_S2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUMLALL_ZA_ZZV_S2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SUMLALL_ZA_ZZV_S2x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_SUMLALL_ZA_ZZV_S2x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SUMLALL_ZA_ZZV_S2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUMLALL_ZA_ZZV_S2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUMLALL_ZA_ZZV_S2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUMLALL_ZA_ZZV_S2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUMLALL_ZA_ZZV_S2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _] as __opcode)) if SEE < 2570) = {
    SEE = 2570;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SUMLALL_ZA_ZZV_S2x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLALL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(1), bits(1)) -> unit

function decode_UMLALL_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2571) = {
    SEE = 2571;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZW_4x4(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLSLL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(1), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2572) = {
    SEE = 2572;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZW_4x4(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLALL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(1), bits(1)) -> unit

function decode_SMLALL_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2573) = {
    SEE = 2573;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZW_4x4(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLSLL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZW_4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(1), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZW_4x4 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2574) = {
    SEE = 2574;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZW_4x4(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_USMLALL_ZA_ZZW_S4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZW_S4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZW_S4x4 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(1), bits(1)) -> unit

function decode_USMLALL_ZA_ZZW_S4x4 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZW_S4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZW_S4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZW_S4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZW_S4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZW_S4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _] as __opcode)) if SEE < 2575) = {
    SEE = 2575;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_USMLALL_ZA_ZZW_S4x4(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLALL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_UMLALL_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2576) = {
    SEE = 2576;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZV_4x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLSLL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2577) = {
    SEE = 2577;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZV_4x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLALL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_SMLALL_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2578) = {
    SEE = 2578;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZV_4x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SMLSLL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZV_4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZV_4x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if sz == 0b1 & not_bool(HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2579) = {
    SEE = 2579;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZV_4x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_USMLALL_ZA_ZZV_S4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZV_S4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZV_S4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_USMLALL_ZA_ZZV_S4x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZV_S4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZV_S4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZV_S4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZV_S4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZV_S4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _] as __opcode)) if SEE < 2580) = {
    SEE = 2580;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_USMLALL_ZA_ZZV_S4x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_SUMLALL_ZA_ZZV_S4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUMLALL_ZA_ZZV_S4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SUMLALL_ZA_ZZV_S4x1 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(1), bits(1)) -> unit

function decode_SUMLALL_ZA_ZZV_S4x1 (sz, Zm, Rv, Zn, U, S, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SUMLALL_ZA_ZZV_S4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUMLALL_ZA_ZZV_S4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUMLALL_ZA_ZZV_S4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUMLALL_ZA_ZZV_S4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUMLALL_ZA_ZZV_S4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _] as __opcode)) if SEE < 2581) = {
    SEE = 2581;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let o1 = Slice(__opcode, 0, 1);
    decode_SUMLALL_ZA_ZZV_S4x1(sz, Zm, Rv, Zn, U, S, o1)
}

val execute_UMLALL_ZA_ZZi_S : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZi_S (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZi_S : (bits(4), bits(1), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLALL_ZA_ZZi_S (Zm, i4h, Rv, i4l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZi_S(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZi_S(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZi_S(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZi_S(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZi_S(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2582) = {
    SEE = 2582;
    let Zm = Slice(__opcode, 16, 4);
    let i4h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i4l = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLALL_ZA_ZZi_S(Zm, i4h, Rv, i4l, Zn, U, S, off2)
}

val execute_UMLSLL_ZA_ZZi_S : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZi_S (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZi_S : (bits(4), bits(1), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSLL_ZA_ZZi_S (Zm, i4h, Rv, i4l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZi_S(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZi_S(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZi_S(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZi_S(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZi_S(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2583) = {
    SEE = 2583;
    let Zm = Slice(__opcode, 16, 4);
    let i4h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i4l = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSLL_ZA_ZZi_S(Zm, i4h, Rv, i4l, Zn, U, S, off2)
}

val execute_SMLALL_ZA_ZZi_S : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZi_S (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZi_S : (bits(4), bits(1), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLALL_ZA_ZZi_S (Zm, i4h, Rv, i4l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZi_S(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZi_S(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZi_S(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZi_S(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZi_S(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2584) = {
    SEE = 2584;
    let Zm = Slice(__opcode, 16, 4);
    let i4h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i4l = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLALL_ZA_ZZi_S(Zm, i4h, Rv, i4l, Zn, U, S, off2)
}

val execute_SMLSLL_ZA_ZZi_S : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZi_S (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZi_S : (bits(4), bits(1), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSLL_ZA_ZZi_S (Zm, i4h, Rv, i4l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZi_S(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZi_S(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZi_S(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZi_S(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZi_S(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2585) = {
    SEE = 2585;
    let Zm = Slice(__opcode, 16, 4);
    let i4h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i4l = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSLL_ZA_ZZi_S(Zm, i4h, Rv, i4l, Zn, U, S, off2)
}

val execute_USMLALL_ZA_ZZi_S : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZi_S (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZi_S : (bits(4), bits(1), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_USMLALL_ZA_ZZi_S (Zm, i4h, Rv, i4l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZi_S(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZi_S(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZi_S(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZi_S(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZi_S(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _] as __opcode)) if SEE < 2586) = {
    SEE = 2586;
    let Zm = Slice(__opcode, 16, 4);
    let i4h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i4l = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_USMLALL_ZA_ZZi_S(Zm, i4h, Rv, i4l, Zn, U, S, off2)
}

val execute_SUMLALL_ZA_ZZi_S : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUMLALL_ZA_ZZi_S (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SUMLALL_ZA_ZZi_S : (bits(4), bits(1), bits(2), bits(3), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SUMLALL_ZA_ZZi_S (Zm, i4h, Rv, i4l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SUMLALL_ZA_ZZi_S(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUMLALL_ZA_ZZi_S(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUMLALL_ZA_ZZi_S(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUMLALL_ZA_ZZi_S(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUMLALL_ZA_ZZi_S(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitzero, bitone, _, _] as __opcode)) if SEE < 2587) = {
    SEE = 2587;
    let Zm = Slice(__opcode, 16, 4);
    let i4h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i4l = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SUMLALL_ZA_ZZi_S(Zm, i4h, Rv, i4l, Zn, U, S, off2)
}

val execute_UMLALL_ZA_ZZi_D : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZi_D (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZi_D : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLALL_ZA_ZZi_D (Zm, i3h, Rv, i3l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZi_D(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZi_D(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZi_D(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZi_D(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZi_D(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2588) = {
    SEE = 2588;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLALL_ZA_ZZi_D(Zm, i3h, Rv, i3l, Zn, U, S, off2)
}

val execute_UMLSLL_ZA_ZZi_D : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZi_D (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZi_D : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSLL_ZA_ZZi_D (Zm, i3h, Rv, i3l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZi_D(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZi_D(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZi_D(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZi_D(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZi_D(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2589) = {
    SEE = 2589;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSLL_ZA_ZZi_D(Zm, i3h, Rv, i3l, Zn, U, S, off2)
}

val execute_SMLALL_ZA_ZZi_D : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZi_D (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZi_D : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLALL_ZA_ZZi_D (Zm, i3h, Rv, i3l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZi_D(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZi_D(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZi_D(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZi_D(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZi_D(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2590) = {
    SEE = 2590;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLALL_ZA_ZZi_D(Zm, i3h, Rv, i3l, Zn, U, S, off2)
}

val execute_SMLSLL_ZA_ZZi_D : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZi_D (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZi_D : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSLL_ZA_ZZi_D (Zm, i3h, Rv, i3l, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZi_D(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZi_D(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZi_D(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZi_D(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZi_D(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2591) = {
    SEE = 2591;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSLL_ZA_ZZi_D(Zm, i3h, Rv, i3l, Zn, U, S, off2)
}

val execute_UMLALL_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLALL_ZA_ZZi_S2xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2592) = {
    SEE = 2592;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZi_S2xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_UMLSLL_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZi_S2xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2593) = {
    SEE = 2593;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZi_S2xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_SMLALL_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLALL_ZA_ZZi_S2xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2594) = {
    SEE = 2594;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZi_S2xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_SMLSLL_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZi_S2xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2595) = {
    SEE = 2595;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZi_S2xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_USMLALL_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_USMLALL_ZA_ZZi_S2xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2596) = {
    SEE = 2596;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_USMLALL_ZA_ZZi_S2xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_SUMLALL_ZA_ZZi_S2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUMLALL_ZA_ZZi_S2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SUMLALL_ZA_ZZi_S2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SUMLALL_ZA_ZZi_S2xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SUMLALL_ZA_ZZi_S2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUMLALL_ZA_ZZi_S2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUMLALL_ZA_ZZi_S2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUMLALL_ZA_ZZi_S2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUMLALL_ZA_ZZi_S2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2597) = {
    SEE = 2597;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SUMLALL_ZA_ZZi_S2xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_UMLALL_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLALL_ZA_ZZi_D2xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2598) = {
    SEE = 2598;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZi_D2xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_UMLSLL_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZi_D2xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2599) = {
    SEE = 2599;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZi_D2xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_SMLALL_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLALL_ZA_ZZi_D2xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2600) = {
    SEE = 2600;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZi_D2xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_SMLSLL_ZA_ZZi_D2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZi_D2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZi_D2xi : (bits(4), bits(2), bits(1), bits(4), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZi_D2xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZi_D2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZi_D2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZi_D2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZi_D2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZi_D2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2601) = {
    SEE = 2601;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZi_D2xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_UMLALL_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLALL_ZA_ZZi_S4xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2602) = {
    SEE = 2602;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZi_S4xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_UMLSLL_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZi_S4xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2603) = {
    SEE = 2603;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZi_S4xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_SMLALL_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLALL_ZA_ZZi_S4xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2604) = {
    SEE = 2604;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZi_S4xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_SMLSLL_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZi_S4xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2605) = {
    SEE = 2605;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZi_S4xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_USMLALL_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_USMLALL_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_USMLALL_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_USMLALL_ZA_ZZi_S4xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_USMLALL_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_USMLALL_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_USMLALL_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_USMLALL_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_USMLALL_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2606) = {
    SEE = 2606;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_USMLALL_ZA_ZZi_S4xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_SUMLALL_ZA_ZZi_S4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'index & 'index <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SUMLALL_ZA_ZZi_S4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SUMLALL_ZA_ZZi_S4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SUMLALL_ZA_ZZi_S4xi (Zm, Rv, i4h, Zn, U, S, i4l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i4h @ i4l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SUMLALL_ZA_ZZi_S4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SUMLALL_ZA_ZZi_S4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SUMLALL_ZA_ZZi_S4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SUMLALL_ZA_ZZi_S4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SUMLALL_ZA_ZZi_S4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2607) = {
    SEE = 2607;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i4h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i4l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SUMLALL_ZA_ZZi_S4xi(Zm, Rv, i4h, Zn, U, S, i4l, o1)
}

val execute_UMLALL_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLALL_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLALL_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLALL_ZA_ZZi_D4xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLALL_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLALL_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLALL_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLALL_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLALL_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2608) = {
    SEE = 2608;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLALL_ZA_ZZi_D4xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_UMLSLL_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSLL_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSLL_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_UMLSLL_ZA_ZZi_D4xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLSLL_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSLL_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSLL_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSLL_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSLL_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2609) = {
    SEE = 2609;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_UMLSLL_ZA_ZZi_D4xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_SMLALL_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLALL_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLALL_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLALL_ZA_ZZi_D4xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLALL_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLALL_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLALL_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLALL_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLALL_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2610) = {
    SEE = 2610;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLALL_ZA_ZZi_D4xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_SMLSLL_ZA_ZZi_D4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSLL_ZA_ZZi_D4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 4);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 3 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 4 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 4)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSLL_ZA_ZZi_D4xi : (bits(4), bits(2), bits(1), bits(3), bits(1), bits(1), bits(2), bits(1)) -> unit

function decode_SMLSLL_ZA_ZZi_D4xi (Zm, Rv, i3h, Zn, U, S, i3l, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2() & HaveSMEI16I64()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(o1 @ 0b00);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLSLL_ZA_ZZi_D4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSLL_ZA_ZZi_D4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSLL_ZA_ZZi_D4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSLL_ZA_ZZi_D4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSLL_ZA_ZZi_D4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2611) = {
    SEE = 2611;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 1, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_SMLSLL_ZA_ZZi_D4xi(Zm, Rv, i3h, Zn, U, S, i3l, o1)
}

val execute_UMLAL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_UMLAL_ZA_ZZV_1 (Zm, Rv, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2612) = {
    SEE = 2612;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UMLAL_ZA_ZZV_1(Zm, Rv, Zn, U, S, off3)
}

val execute_UMLSL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_UMLSL_ZA_ZZV_1 (Zm, Rv, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2613) = {
    SEE = 2613;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UMLSL_ZA_ZZV_1(Zm, Rv, Zn, U, S, off3)
}

val execute_SMLAL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_SMLAL_ZA_ZZV_1 (Zm, Rv, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2614) = {
    SEE = 2614;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SMLAL_ZA_ZZV_1(Zm, Rv, Zn, U, S, off3)
}

val execute_SMLSL_ZA_ZZV_1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZV_1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZV_1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_SMLSL_ZA_ZZV_1 (Zm, Rv, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZV_1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZV_1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZV_1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZV_1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZV_1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2615) = {
    SEE = 2615;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SMLSL_ZA_ZZV_1(Zm, Rv, Zn, U, S, off3)
}

val execute_UMLAL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_UMLAL_ZA_ZZW_2x2 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2616) = {
    SEE = 2616;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLAL_ZA_ZZW_2x2(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLSL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSL_ZA_ZZW_2x2 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2617) = {
    SEE = 2617;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSL_ZA_ZZW_2x2(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLAL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_SMLAL_ZA_ZZW_2x2 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2618) = {
    SEE = 2618;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLAL_ZA_ZZW_2x2(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLSL_ZA_ZZW_2x2 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZW_2x2 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZW_2x2 : (bits(4), bits(2), bits(4), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSL_ZA_ZZW_2x2 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZW_2x2(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZW_2x2(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZW_2x2(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZW_2x2(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZW_2x2(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2619) = {
    SEE = 2619;
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSL_ZA_ZZW_2x2(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLAL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLAL_ZA_ZZV_2x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2620) = {
    SEE = 2620;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLAL_ZA_ZZV_2x1(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLSL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSL_ZA_ZZV_2x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2621) = {
    SEE = 2621;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSL_ZA_ZZV_2x1(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLAL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLAL_ZA_ZZV_2x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2622) = {
    SEE = 2622;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLAL_ZA_ZZV_2x1(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLSL_ZA_ZZV_2x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZV_2x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZV_2x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSL_ZA_ZZV_2x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZV_2x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZV_2x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZV_2x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZV_2x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZV_2x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2623) = {
    SEE = 2623;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSL_ZA_ZZV_2x1(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLAL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_UMLAL_ZA_ZZW_4x4 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2624) = {
    SEE = 2624;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLAL_ZA_ZZW_4x4(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLSL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSL_ZA_ZZW_4x4 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2625) = {
    SEE = 2625;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSL_ZA_ZZW_4x4(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLAL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_SMLAL_ZA_ZZW_4x4 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2626) = {
    SEE = 2626;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLAL_ZA_ZZW_4x4(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLSL_ZA_ZZW_4x4 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZW_4x4 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZW_4x4 : (bits(3), bits(2), bits(3), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSL_ZA_ZZW_4x4 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZW_4x4(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZW_4x4(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZW_4x4(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZW_4x4(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZW_4x4(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2627) = {
    SEE = 2627;
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSL_ZA_ZZW_4x4(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLAL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLAL_ZA_ZZV_4x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _] as __opcode)) if SEE < 2628) = {
    SEE = 2628;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLAL_ZA_ZZV_4x1(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLSL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSL_ZA_ZZV_4x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2629) = {
    SEE = 2629;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSL_ZA_ZZV_4x1(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLAL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLAL_ZA_ZZV_4x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2630) = {
    SEE = 2630;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLAL_ZA_ZZV_4x1(Zm, Rv, Zn, U, S, off2)
}

val execute_SMLSL_ZA_ZZV_4x1 : forall 'VL 'esize 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZV_4x1 (VL, esize, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZV_4x1 : (bits(4), bits(2), bits(5), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSL_ZA_ZZV_4x1 (Zm, Rv, Zn, U, S, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZV_4x1(128, esize, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZV_4x1(256, esize, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZV_4x1(512, esize, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZV_4x1(1024, esize, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZV_4x1(2048, esize, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2631) = {
    SEE = 2631;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSL_ZA_ZZV_4x1(Zm, Rv, Zn, U, S, off2)
}

val execute_UMLAL_ZA_ZZi_1 : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZi_1 (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_UMLAL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZi_1(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZi_1(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZi_1(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZi_1(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZi_1(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2632) = {
    SEE = 2632;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UMLAL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, U, S, off3)
}

val execute_UMLSL_ZA_ZZi_1 : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZi_1 (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_UMLSL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZi_1(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZi_1(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZi_1(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZi_1(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZi_1(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 2633) = {
    SEE = 2633;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_UMLSL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, U, S, off3)
}

val execute_SMLAL_ZA_ZZi_1 : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZi_1 (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_SMLAL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZi_1(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZi_1(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZi_1(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZi_1(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZi_1(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2634) = {
    SEE = 2634;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SMLAL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, U, S, off3)
}

val execute_SMLSL_ZA_ZZi_1 : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZi_1 (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZi_1 : (bits(4), bits(1), bits(2), bits(2), bits(5), bits(1), bits(1), bits(3)) -> unit

function decode_SMLSL_ZA_ZZi_1 (Zm, i3h, Rv, i3l, Zn, U, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZi_1(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZi_1(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZi_1(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZi_1(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZi_1(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2635) = {
    SEE = 2635;
    let Zm = Slice(__opcode, 16, 4);
    let i3h = Slice(__opcode, 15, 1);
    let Rv = Slice(__opcode, 13, 2);
    let i3l = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_SMLSL_ZA_ZZi_1(Zm, i3h, Rv, i3l, Zn, U, S, off3)
}

val execute_UMLAL_ZA_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZi_2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_UMLAL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZi_2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZi_2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZi_2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZi_2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZi_2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2636) = {
    SEE = 2636;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLAL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_UMLSL_ZA_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZi_2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZi_2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZi_2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZi_2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZi_2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZi_2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2637) = {
    SEE = 2637;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_SMLAL_ZA_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZi_2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_SMLAL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZi_2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZi_2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZi_2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZi_2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZi_2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2638) = {
    SEE = 2638;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLAL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_SMLSL_ZA_ZZi_2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZi_2xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZi_2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSL_ZA_ZZi_2xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZi_2xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZi_2xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZi_2xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZi_2xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZi_2xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2639) = {
    SEE = 2639;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSL_ZA_ZZi_2xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_UMLAL_ZA_ZZi_4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLAL_ZA_ZZi_4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLAL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_UMLAL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLAL_ZA_ZZi_4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLAL_ZA_ZZi_4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLAL_ZA_ZZi_4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLAL_ZA_ZZi_4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLAL_ZA_ZZi_4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 2640) = {
    SEE = 2640;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLAL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_UMLSL_ZA_ZZi_4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_UMLSL_ZA_ZZi_4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = UInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_UMLSL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_UMLSL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UMLSL_ZA_ZZi_4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_UMLSL_ZA_ZZi_4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_UMLSL_ZA_ZZi_4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_UMLSL_ZA_ZZi_4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_UMLSL_ZA_ZZi_4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2641) = {
    SEE = 2641;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_UMLSL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_SMLAL_ZA_ZZi_4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLAL_ZA_ZZi_4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLAL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_SMLAL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLAL_ZA_ZZi_4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLAL_ZA_ZZi_4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLAL_ZA_ZZi_4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLAL_ZA_ZZi_4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLAL_ZA_ZZi_4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2642) = {
    SEE = 2642;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLAL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_SMLSL_ZA_ZZi_4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), int('v)) -> unit

function execute_SMLSL_ZA_ZZi_4xi (VL, esize, index, m, n, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    vec : int = vec - MOD(vec, 2);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let 'vec = vec in
          {
              foreach (i from 0 to 1 by 1 in inc) {
                  let operand3 : bits('VL) = ZAvector_read(vec + i, VL);
                  foreach (e from 0 to (elements - 1) by 1 in inc) {
                      let 'segmentbase = e - MOD(e, eltspersegment);
                      let 's = 2 * segmentbase + index;
                      let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
                      let 'element2 = SInt(Elem_read(operand2, s, DIV(esize, 2)));
                      let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
                      result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
                  };
                  ZAvector_set(vec + i, VL) = result
              }
          };
        vec = vec + vstride
    }
}

val decode_SMLSL_ZA_ZZi_4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(2)) -> unit

function decode_SMLSL_ZA_ZZi_4xi (Zm, Rv, i3h, Zn, U, S, i3l, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off2 @ 0b0);
    let 'index = UInt(i3h @ i3l);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SMLSL_ZA_ZZi_4xi(128, esize, index, m, n, nreg, offset, v)
      },
      256 => {
          execute_SMLSL_ZA_ZZi_4xi(256, esize, index, m, n, nreg, offset, v)
      },
      512 => {
          execute_SMLSL_ZA_ZZi_4xi(512, esize, index, m, n, nreg, offset, v)
      },
      1024 => {
          execute_SMLSL_ZA_ZZi_4xi(1024, esize, index, m, n, nreg, offset, v)
      },
      2048 => {
          execute_SMLSL_ZA_ZZi_4xi(2048, esize, index, m, n, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2643) = {
    SEE = 2643;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 4, 1);
    let S = Slice(__opcode, 3, 1);
    let i3l = Slice(__opcode, 2, 1);
    let off2 = Slice(__opcode, 0, 2);
    decode_SMLSL_ZA_ZZi_4xi(Zm, Rv, i3h, Zn, U, S, i3l, off2)
}

val execute_UMAX_MZ_ZZW_2x2 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMAX_MZ_ZZW_2x2 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMAX_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_UMAX_MZ_ZZW_2x2 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMAX_MZ_ZZW_2x2(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMAX_MZ_ZZW_2x2(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMAX_MZ_ZZW_2x2(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMAX_MZ_ZZW_2x2(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMAX_MZ_ZZW_2x2(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone] as __opcode)) if SEE < 2644) = {
    SEE = 2644;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_UMAX_MZ_ZZW_2x2(size, Zm, Zdn, U)
}

val execute_SMAX_MZ_ZZW_2x2 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMAX_MZ_ZZW_2x2 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMAX_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_SMAX_MZ_ZZW_2x2 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMAX_MZ_ZZW_2x2(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMAX_MZ_ZZW_2x2(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMAX_MZ_ZZW_2x2(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMAX_MZ_ZZW_2x2(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMAX_MZ_ZZW_2x2(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2645) = {
    SEE = 2645;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SMAX_MZ_ZZW_2x2(size, Zm, Zdn, U)
}

val execute_UMAX_MZ_ZZV_2x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMAX_MZ_ZZV_2x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMAX_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_UMAX_MZ_ZZV_2x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMAX_MZ_ZZV_2x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMAX_MZ_ZZV_2x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMAX_MZ_ZZV_2x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMAX_MZ_ZZV_2x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMAX_MZ_ZZV_2x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone] as __opcode)) if SEE < 2646) = {
    SEE = 2646;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_UMAX_MZ_ZZV_2x1(size, Zm, Zdn, U)
}

val execute_SMAX_MZ_ZZV_2x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMAX_MZ_ZZV_2x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMAX_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_SMAX_MZ_ZZV_2x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMAX_MZ_ZZV_2x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMAX_MZ_ZZV_2x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMAX_MZ_ZZV_2x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMAX_MZ_ZZV_2x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMAX_MZ_ZZV_2x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2647) = {
    SEE = 2647;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SMAX_MZ_ZZV_2x1(size, Zm, Zdn, U)
}

val execute_UMAX_MZ_ZZW_4x4 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMAX_MZ_ZZW_4x4 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMAX_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3), bits(1)) -> unit

function decode_UMAX_MZ_ZZW_4x4 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMAX_MZ_ZZW_4x4(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMAX_MZ_ZZW_4x4(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMAX_MZ_ZZW_4x4(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMAX_MZ_ZZW_4x4(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMAX_MZ_ZZW_4x4(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2648) = {
    SEE = 2648;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_UMAX_MZ_ZZW_4x4(size, Zm, Zdn, U)
}

val execute_SMAX_MZ_ZZW_4x4 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMAX_MZ_ZZW_4x4 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMAX_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3), bits(1)) -> unit

function decode_SMAX_MZ_ZZW_4x4 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMAX_MZ_ZZW_4x4(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMAX_MZ_ZZW_4x4(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMAX_MZ_ZZW_4x4(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMAX_MZ_ZZW_4x4(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMAX_MZ_ZZW_4x4(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2649) = {
    SEE = 2649;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SMAX_MZ_ZZW_4x4(size, Zm, Zdn, U)
}

val execute_UMAX_MZ_ZZV_4x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMAX_MZ_ZZV_4x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMAX_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_UMAX_MZ_ZZV_4x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMAX_MZ_ZZV_4x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMAX_MZ_ZZV_4x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMAX_MZ_ZZV_4x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMAX_MZ_ZZV_4x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMAX_MZ_ZZV_4x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2650) = {
    SEE = 2650;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_UMAX_MZ_ZZV_4x1(size, Zm, Zdn, U)
}

val execute_SMAX_MZ_ZZV_4x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMAX_MZ_ZZV_4x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Max(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMAX_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_SMAX_MZ_ZZV_4x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMAX_MZ_ZZV_4x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMAX_MZ_ZZV_4x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMAX_MZ_ZZV_4x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMAX_MZ_ZZV_4x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMAX_MZ_ZZV_4x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2651) = {
    SEE = 2651;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SMAX_MZ_ZZV_4x1(size, Zm, Zdn, U)
}

val execute_UMIN_MZ_ZZW_2x2 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMIN_MZ_ZZW_2x2 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMIN_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_UMIN_MZ_ZZW_2x2 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMIN_MZ_ZZW_2x2(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMIN_MZ_ZZW_2x2(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMIN_MZ_ZZW_2x2(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMIN_MZ_ZZW_2x2(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMIN_MZ_ZZW_2x2(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2652) = {
    SEE = 2652;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_UMIN_MZ_ZZW_2x2(size, Zm, Zdn, U)
}

val execute_SMIN_MZ_ZZW_2x2 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMIN_MZ_ZZW_2x2 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMIN_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_SMIN_MZ_ZZW_2x2 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMIN_MZ_ZZW_2x2(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMIN_MZ_ZZW_2x2(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMIN_MZ_ZZW_2x2(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMIN_MZ_ZZW_2x2(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMIN_MZ_ZZW_2x2(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2653) = {
    SEE = 2653;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SMIN_MZ_ZZW_2x2(size, Zm, Zdn, U)
}

val execute_UMIN_MZ_ZZV_2x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMIN_MZ_ZZV_2x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMIN_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_UMIN_MZ_ZZV_2x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMIN_MZ_ZZV_2x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMIN_MZ_ZZV_2x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMIN_MZ_ZZV_2x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMIN_MZ_ZZV_2x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMIN_MZ_ZZV_2x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2654) = {
    SEE = 2654;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_UMIN_MZ_ZZV_2x1(size, Zm, Zdn, U)
}

val execute_SMIN_MZ_ZZV_2x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMIN_MZ_ZZV_2x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMIN_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_SMIN_MZ_ZZV_2x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMIN_MZ_ZZV_2x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMIN_MZ_ZZV_2x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMIN_MZ_ZZV_2x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMIN_MZ_ZZV_2x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMIN_MZ_ZZV_2x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2655) = {
    SEE = 2655;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SMIN_MZ_ZZV_2x1(size, Zm, Zdn, U)
}

val execute_UMIN_MZ_ZZW_4x4 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMIN_MZ_ZZW_4x4 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMIN_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3), bits(1)) -> unit

function decode_UMIN_MZ_ZZW_4x4 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMIN_MZ_ZZW_4x4(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMIN_MZ_ZZW_4x4(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMIN_MZ_ZZW_4x4(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMIN_MZ_ZZW_4x4(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMIN_MZ_ZZW_4x4(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2656) = {
    SEE = 2656;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_UMIN_MZ_ZZW_4x4(size, Zm, Zdn, U)
}

val execute_SMIN_MZ_ZZW_4x4 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMIN_MZ_ZZW_4x4 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMIN_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3), bits(1)) -> unit

function decode_SMIN_MZ_ZZW_4x4 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMIN_MZ_ZZW_4x4(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMIN_MZ_ZZW_4x4(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMIN_MZ_ZZW_4x4(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMIN_MZ_ZZW_4x4(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMIN_MZ_ZZW_4x4(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2657) = {
    SEE = 2657;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SMIN_MZ_ZZW_4x4(size, Zm, Zdn, U)
}

val execute_UMIN_MZ_ZZV_4x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_UMIN_MZ_ZZV_4x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_UMIN_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_UMIN_MZ_ZZV_4x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMIN_MZ_ZZV_4x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_UMIN_MZ_ZZV_4x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_UMIN_MZ_ZZV_4x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_UMIN_MZ_ZZV_4x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_UMIN_MZ_ZZV_4x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2658) = {
    SEE = 2658;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_UMIN_MZ_ZZV_4x1(size, Zm, Zdn, U)
}

val execute_SMIN_MZ_ZZV_4x1 : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg), bool('is_unsigned)) -> unit

function execute_SMIN_MZ_ZZV_4x1 (VL, dn, esize, m, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            let 'res = Min(element1, element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SMIN_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_SMIN_MZ_ZZV_4x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMIN_MZ_ZZV_4x1(128, dn, esize, m, nreg, is_unsigned)
      },
      256 => {
          execute_SMIN_MZ_ZZV_4x1(256, dn, esize, m, nreg, is_unsigned)
      },
      512 => {
          execute_SMIN_MZ_ZZV_4x1(512, dn, esize, m, nreg, is_unsigned)
      },
      1024 => {
          execute_SMIN_MZ_ZZV_4x1(1024, dn, esize, m, nreg, is_unsigned)
      },
      2048 => {
          execute_SMIN_MZ_ZZV_4x1(2048, dn, esize, m, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2659) = {
    SEE = 2659;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SMIN_MZ_ZZV_4x1(size, Zm, Zdn, U)
}

val execute_URSHL_MZ_ZZW_2x2 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_URSHL_MZ_ZZW_2x2 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_URSHL_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_URSHL_MZ_ZZW_2x2 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_URSHL_MZ_ZZW_2x2(128, dn, esize, m, nreg)
      },
      256 => {
          execute_URSHL_MZ_ZZW_2x2(256, dn, esize, m, nreg)
      },
      512 => {
          execute_URSHL_MZ_ZZW_2x2(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_URSHL_MZ_ZZW_2x2(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_URSHL_MZ_ZZW_2x2(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2660) = {
    SEE = 2660;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_URSHL_MZ_ZZW_2x2(size, Zm, Zdn, U)
}

val execute_SRSHL_MZ_ZZW_2x2 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SRSHL_MZ_ZZW_2x2 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SRSHL_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_SRSHL_MZ_ZZW_2x2 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SRSHL_MZ_ZZW_2x2(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SRSHL_MZ_ZZW_2x2(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SRSHL_MZ_ZZW_2x2(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SRSHL_MZ_ZZW_2x2(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SRSHL_MZ_ZZW_2x2(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2661) = {
    SEE = 2661;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SRSHL_MZ_ZZW_2x2(size, Zm, Zdn, U)
}

val execute_URSHL_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_URSHL_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_URSHL_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_URSHL_MZ_ZZV_2x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_URSHL_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_URSHL_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_URSHL_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_URSHL_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_URSHL_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2662) = {
    SEE = 2662;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_URSHL_MZ_ZZV_2x1(size, Zm, Zdn, U)
}

val execute_SRSHL_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SRSHL_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SRSHL_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4), bits(1)) -> unit

function decode_SRSHL_MZ_ZZV_2x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SRSHL_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SRSHL_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SRSHL_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SRSHL_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SRSHL_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2663) = {
    SEE = 2663;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SRSHL_MZ_ZZV_2x1(size, Zm, Zdn, U)
}

val execute_URSHL_MZ_ZZW_4x4 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_URSHL_MZ_ZZW_4x4 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_URSHL_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3), bits(1)) -> unit

function decode_URSHL_MZ_ZZW_4x4 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_URSHL_MZ_ZZW_4x4(128, dn, esize, m, nreg)
      },
      256 => {
          execute_URSHL_MZ_ZZW_4x4(256, dn, esize, m, nreg)
      },
      512 => {
          execute_URSHL_MZ_ZZW_4x4(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_URSHL_MZ_ZZW_4x4(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_URSHL_MZ_ZZW_4x4(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2664) = {
    SEE = 2664;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_URSHL_MZ_ZZW_4x4(size, Zm, Zdn, U)
}

val execute_SRSHL_MZ_ZZW_4x4 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SRSHL_MZ_ZZW_4x4 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SRSHL_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3), bits(1)) -> unit

function decode_SRSHL_MZ_ZZW_4x4 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SRSHL_MZ_ZZW_4x4(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SRSHL_MZ_ZZW_4x4(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SRSHL_MZ_ZZW_4x4(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SRSHL_MZ_ZZW_4x4(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SRSHL_MZ_ZZW_4x4(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2665) = {
    SEE = 2665;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SRSHL_MZ_ZZW_4x4(size, Zm, Zdn, U)
}

val execute_URSHL_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_URSHL_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_URSHL_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_URSHL_MZ_ZZV_4x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_URSHL_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_URSHL_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_URSHL_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_URSHL_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_URSHL_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2666) = {
    SEE = 2666;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_URSHL_MZ_ZZV_4x1(size, Zm, Zdn, U)
}

val execute_SRSHL_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SRSHL_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SRSHL_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_SRSHL_MZ_ZZV_4x1 (size, Zm, Zdn, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SRSHL_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SRSHL_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SRSHL_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SRSHL_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SRSHL_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2667) = {
    SEE = 2667;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SRSHL_MZ_ZZV_4x1(size, Zm, Zdn, U)
}

val execute_SQDMULH_MZ_ZZW_2x2 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SQDMULH_MZ_ZZW_2x2 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, e, esize));
            let 'element2 = SInt(Elem_read(operand2, e, esize));
            let 'res = 2 * element1 * element2;
            results[r] = Elem_set(results[r], e, esize, SignedSat((res >> esize), esize))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SQDMULH_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_SQDMULH_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SQDMULH_MZ_ZZW_2x2(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SQDMULH_MZ_ZZW_2x2(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SQDMULH_MZ_ZZW_2x2(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SQDMULH_MZ_ZZW_2x2(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SQDMULH_MZ_ZZW_2x2(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2668) = {
    SEE = 2668;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_SQDMULH_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_SQDMULH_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SQDMULH_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, e, esize));
            let 'element2 = SInt(Elem_read(operand2, e, esize));
            let 'res = 2 * element1 * element2;
            results[r] = Elem_set(results[r], e, esize, SignedSat((res >> esize), esize))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SQDMULH_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_SQDMULH_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SQDMULH_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SQDMULH_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SQDMULH_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SQDMULH_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SQDMULH_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2669) = {
    SEE = 2669;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_SQDMULH_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_SQDMULH_MZ_ZZW_4x4 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SQDMULH_MZ_ZZW_4x4 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, e, esize));
            let 'element2 = SInt(Elem_read(operand2, e, esize));
            let 'res = 2 * element1 * element2;
            results[r] = Elem_set(results[r], e, esize, SignedSat((res >> esize), esize))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SQDMULH_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_SQDMULH_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SQDMULH_MZ_ZZW_4x4(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SQDMULH_MZ_ZZW_4x4(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SQDMULH_MZ_ZZW_4x4(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SQDMULH_MZ_ZZW_4x4(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SQDMULH_MZ_ZZW_4x4(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2670) = {
    SEE = 2670;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_SQDMULH_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_SQDMULH_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_SQDMULH_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, e, esize));
            let 'element2 = SInt(Elem_read(operand2, e, esize));
            let 'res = 2 * element1 * element2;
            results[r] = Elem_set(results[r], e, esize, SignedSat((res >> esize), esize))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_SQDMULH_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_SQDMULH_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SQDMULH_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_SQDMULH_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_SQDMULH_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_SQDMULH_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_SQDMULH_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2671) = {
    SEE = 2671;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_SQDMULH_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_ADD_MZ_ZZV_2x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_ADD_MZ_ZZV_2x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            results[r] = Elem_set(results[r], e, esize, element1 + element2)
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_ADD_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_ADD_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ADD_MZ_ZZV_2x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_ADD_MZ_ZZV_2x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_ADD_MZ_ZZV_2x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_ADD_MZ_ZZV_2x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_ADD_MZ_ZZV_2x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2672) = {
    SEE = 2672;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_ADD_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_ADD_MZ_ZZV_4x1 : forall 'VL 'dn 'esize 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('nreg)) -> unit

function execute_ADD_MZ_ZZV_4x1 (VL, dn, esize, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            results[r] = Elem_set(results[r], e, esize, element1 + element2)
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_ADD_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_ADD_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ADD_MZ_ZZV_4x1(128, dn, esize, m, nreg)
      },
      256 => {
          execute_ADD_MZ_ZZV_4x1(256, dn, esize, m, nreg)
      },
      512 => {
          execute_ADD_MZ_ZZV_4x1(512, dn, esize, m, nreg)
      },
      1024 => {
          execute_ADD_MZ_ZZV_4x1(1024, dn, esize, m, nreg)
      },
      2048 => {
          execute_ADD_MZ_ZZV_4x1(2048, dn, esize, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2673) = {
    SEE = 2673;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_ADD_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_UCLAMP_MZ_ZZ_2 : forall 'VL 'd 'esize 'm 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('nreg)) -> unit

function execute_UCLAMP_MZ_ZZ_2 (VL, d, esize, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, e, esize));
            let 'element2 = UInt(Elem_read(operand2, e, esize));
            let 'element3 = UInt(Elem_read(operand3, e, esize));
            let 'res = Min(Max(element1, element3), element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_UCLAMP_MZ_ZZ_2 : (bits(2), bits(5), bits(5), bits(4), bits(1)) -> unit

function decode_UCLAMP_MZ_ZZ_2 (size, Zm, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_UCLAMP_MZ_ZZ_2(128, d, esize, m, n, nreg)
      },
      256 => {
          execute_UCLAMP_MZ_ZZ_2(256, d, esize, m, n, nreg)
      },
      512 => {
          execute_UCLAMP_MZ_ZZ_2(512, d, esize, m, n, nreg)
      },
      1024 => {
          execute_UCLAMP_MZ_ZZ_2(1024, d, esize, m, n, nreg)
      },
      2048 => {
          execute_UCLAMP_MZ_ZZ_2(2048, d, esize, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2674) = {
    SEE = 2674;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_UCLAMP_MZ_ZZ_2(size, Zm, Zn, Zd, U)
}

val execute_SCLAMP_MZ_ZZ_2 : forall 'VL 'd 'esize 'm 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('nreg)) -> unit

function execute_SCLAMP_MZ_ZZ_2 (VL, d, esize, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, e, esize));
            let 'element2 = SInt(Elem_read(operand2, e, esize));
            let 'element3 = SInt(Elem_read(operand3, e, esize));
            let 'res = Min(Max(element1, element3), element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SCLAMP_MZ_ZZ_2 : (bits(2), bits(5), bits(5), bits(4), bits(1)) -> unit

function decode_SCLAMP_MZ_ZZ_2 (size, Zm, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SCLAMP_MZ_ZZ_2(128, d, esize, m, n, nreg)
      },
      256 => {
          execute_SCLAMP_MZ_ZZ_2(256, d, esize, m, n, nreg)
      },
      512 => {
          execute_SCLAMP_MZ_ZZ_2(512, d, esize, m, n, nreg)
      },
      1024 => {
          execute_SCLAMP_MZ_ZZ_2(1024, d, esize, m, n, nreg)
      },
      2048 => {
          execute_SCLAMP_MZ_ZZ_2(2048, d, esize, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2675) = {
    SEE = 2675;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SCLAMP_MZ_ZZ_2(size, Zm, Zn, Zd, U)
}

val execute_UCLAMP_MZ_ZZ_4 : forall 'VL 'd 'esize 'm 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('nreg)) -> unit

function execute_UCLAMP_MZ_ZZ_4 (VL, d, esize, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, e, esize));
            let 'element2 = UInt(Elem_read(operand2, e, esize));
            let 'element3 = UInt(Elem_read(operand3, e, esize));
            let 'res = Min(Max(element1, element3), element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_UCLAMP_MZ_ZZ_4 : (bits(2), bits(5), bits(5), bits(3), bits(1)) -> unit

function decode_UCLAMP_MZ_ZZ_4 (size, Zm, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_UCLAMP_MZ_ZZ_4(128, d, esize, m, n, nreg)
      },
      256 => {
          execute_UCLAMP_MZ_ZZ_4(256, d, esize, m, n, nreg)
      },
      512 => {
          execute_UCLAMP_MZ_ZZ_4(512, d, esize, m, n, nreg)
      },
      1024 => {
          execute_UCLAMP_MZ_ZZ_4(1024, d, esize, m, n, nreg)
      },
      2048 => {
          execute_UCLAMP_MZ_ZZ_4(2048, d, esize, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2676) = {
    SEE = 2676;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_UCLAMP_MZ_ZZ_4(size, Zm, Zn, Zd, U)
}

val execute_SCLAMP_MZ_ZZ_4 : forall 'VL 'd 'esize 'm 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('nreg)) -> unit

function execute_SCLAMP_MZ_ZZ_4 (VL, d, esize, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, e, esize));
            let 'element2 = SInt(Elem_read(operand2, e, esize));
            let 'element3 = SInt(Elem_read(operand3, e, esize));
            let 'res = Min(Max(element1, element3), element2);
            results[r] = Elem_set(results[r], e, esize, res[esize - 1 .. 0])
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SCLAMP_MZ_ZZ_4 : (bits(2), bits(5), bits(5), bits(3), bits(1)) -> unit

function decode_SCLAMP_MZ_ZZ_4 (size, Zm, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SCLAMP_MZ_ZZ_4(128, d, esize, m, n, nreg)
      },
      256 => {
          execute_SCLAMP_MZ_ZZ_4(256, d, esize, m, n, nreg)
      },
      512 => {
          execute_SCLAMP_MZ_ZZ_4(512, d, esize, m, n, nreg)
      },
      1024 => {
          execute_SCLAMP_MZ_ZZ_4(1024, d, esize, m, n, nreg)
      },
      2048 => {
          execute_SCLAMP_MZ_ZZ_4(2048, d, esize, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2677) = {
    SEE = 2677;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SCLAMP_MZ_ZZ_4(size, Zm, Zn, Zd, U)
}

val execute_UUNPK_MZ_Z_2 : forall 'VL 'd 'esize ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), bool('is_unsigned)) -> unit

function execute_UUNPK_MZ_Z_2 (VL, d, esize, n, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let 'sreg = DIV(nreg, 2);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (sreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (i from 0 to 1 by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                let element : bits('hsize) = Elem_read(operand, i * elements + e, hsize);
                results[2 * r + i] = Elem_set(results[2 * r + i], e, esize, Extend(element, esize, is_unsigned))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_UUNPK_MZ_Z_2 : (bits(2), bits(5), bits(4), bits(1)) -> unit

function decode_UUNPK_MZ_Z_2 (size, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UUNPK_MZ_Z_2(128, d, esize, n, nreg, is_unsigned)
      },
      256 => {
          execute_UUNPK_MZ_Z_2(256, d, esize, n, nreg, is_unsigned)
      },
      512 => {
          execute_UUNPK_MZ_Z_2(512, d, esize, n, nreg, is_unsigned)
      },
      1024 => {
          execute_UUNPK_MZ_Z_2(1024, d, esize, n, nreg, is_unsigned)
      },
      2048 => {
          execute_UUNPK_MZ_Z_2(2048, d, esize, n, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2678) = {
    SEE = 2678;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_UUNPK_MZ_Z_2(size, Zn, Zd, U)
}

val execute_SUNPK_MZ_Z_2 : forall 'VL 'd 'esize ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), bool('is_unsigned)) -> unit

function execute_SUNPK_MZ_Z_2 (VL, d, esize, n, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let 'sreg = DIV(nreg, 2);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (sreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (i from 0 to 1 by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                let element : bits('hsize) = Elem_read(operand, i * elements + e, hsize);
                results[2 * r + i] = Elem_set(results[2 * r + i], e, esize, Extend(element, esize, is_unsigned))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SUNPK_MZ_Z_2 : (bits(2), bits(5), bits(4), bits(1)) -> unit

function decode_SUNPK_MZ_Z_2 (size, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SUNPK_MZ_Z_2(128, d, esize, n, nreg, is_unsigned)
      },
      256 => {
          execute_SUNPK_MZ_Z_2(256, d, esize, n, nreg, is_unsigned)
      },
      512 => {
          execute_SUNPK_MZ_Z_2(512, d, esize, n, nreg, is_unsigned)
      },
      1024 => {
          execute_SUNPK_MZ_Z_2(1024, d, esize, n, nreg, is_unsigned)
      },
      2048 => {
          execute_SUNPK_MZ_Z_2(2048, d, esize, n, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2679) = {
    SEE = 2679;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    let U = Slice(__opcode, 0, 1);
    decode_SUNPK_MZ_Z_2(size, Zn, Zd, U)
}

val execute_UUNPK_MZ_Z_4 : forall 'VL 'd 'esize ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), bool('is_unsigned)) -> unit

function execute_UUNPK_MZ_Z_4 (VL, d, esize, n, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let 'sreg = DIV(nreg, 2);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (sreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (i from 0 to 1 by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                let element : bits('hsize) = Elem_read(operand, i * elements + e, hsize);
                results[2 * r + i] = Elem_set(results[2 * r + i], e, esize, Extend(element, esize, is_unsigned))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_UUNPK_MZ_Z_4 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_UUNPK_MZ_Z_4 (size, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UUNPK_MZ_Z_4(128, d, esize, n, nreg, is_unsigned)
      },
      256 => {
          execute_UUNPK_MZ_Z_4(256, d, esize, n, nreg, is_unsigned)
      },
      512 => {
          execute_UUNPK_MZ_Z_4(512, d, esize, n, nreg, is_unsigned)
      },
      1024 => {
          execute_UUNPK_MZ_Z_4(1024, d, esize, n, nreg, is_unsigned)
      },
      2048 => {
          execute_UUNPK_MZ_Z_4(2048, d, esize, n, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2680) = {
    SEE = 2680;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_UUNPK_MZ_Z_4(size, Zn, Zd, U)
}

val execute_SUNPK_MZ_Z_4 : forall 'VL 'd 'esize ('is_unsigned : Bool) 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), bool('is_unsigned)) -> unit

function execute_SUNPK_MZ_Z_4 (VL, d, esize, n, nreg, is_unsigned) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let 'sreg = DIV(nreg, 2);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (sreg - 1) by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (i from 0 to 1 by 1 in inc) {
            foreach (e from 0 to (elements - 1) by 1 in inc) {
                let element : bits('hsize) = Elem_read(operand, i * elements + e, hsize);
                results[2 * r + i] = Elem_set(results[2 * r + i], e, esize, Extend(element, esize, is_unsigned))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SUNPK_MZ_Z_4 : (bits(2), bits(4), bits(3), bits(1)) -> unit

function decode_SUNPK_MZ_Z_4 (size, Zn, Zd, U) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SUNPK_MZ_Z_4(128, d, esize, n, nreg, is_unsigned)
      },
      256 => {
          execute_SUNPK_MZ_Z_4(256, d, esize, n, nreg, is_unsigned)
      },
      512 => {
          execute_SUNPK_MZ_Z_4(512, d, esize, n, nreg, is_unsigned)
      },
      1024 => {
          execute_SUNPK_MZ_Z_4(1024, d, esize, n, nreg, is_unsigned)
      },
      2048 => {
          execute_SUNPK_MZ_Z_4(2048, d, esize, n, nreg, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2681) = {
    SEE = 2681;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 2, 3);
    let U = Slice(__opcode, 0, 1);
    decode_SUNPK_MZ_Z_4(size, Zn, Zd, U)
}

val execute_SQRSHR_Z_MZ2__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHR_Z_MZ2__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, r * elements + e, esize, SignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHR_Z_MZ2__ : (bits(4), bits(4), bits(1), bits(5)) -> unit

function decode_SQRSHR_Z_MZ2__ (imm4, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    let 'shift = esize - UInt(imm4);
    match VL {
      128 => {
          execute_SQRSHR_Z_MZ2__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHR_Z_MZ2__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHR_Z_MZ2__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHR_Z_MZ2__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHR_Z_MZ2__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2682) = {
    SEE = 2682;
    let imm4 = Slice(__opcode, 16, 4);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHR_Z_MZ2__(imm4, Zn, U, Zd)
}

val execute_UQRSHR_Z_MZ2__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQRSHR_Z_MZ2__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
            let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQRSHR_Z_MZ2__ : (bits(4), bits(4), bits(1), bits(5)) -> unit

function decode_UQRSHR_Z_MZ2__ (imm4, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    let 'shift = esize - UInt(imm4);
    match VL {
      128 => {
          execute_UQRSHR_Z_MZ2__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQRSHR_Z_MZ2__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQRSHR_Z_MZ2__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQRSHR_Z_MZ2__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQRSHR_Z_MZ2__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, _] as __opcode)) if SEE < 2683) = {
    SEE = 2683;
    let imm4 = Slice(__opcode, 16, 4);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQRSHR_Z_MZ2__(imm4, Zn, U, Zd)
}

val execute_SQRSHRU_Z_MZ2__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRU_Z_MZ2__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRU_Z_MZ2__ : (bits(4), bits(4), bits(1), bits(5)) -> unit

function decode_SQRSHRU_Z_MZ2__ (imm4, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    let 'shift = esize - UInt(imm4);
    match VL {
      128 => {
          execute_SQRSHRU_Z_MZ2__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRU_Z_MZ2__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRU_Z_MZ2__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRU_Z_MZ2__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRU_Z_MZ2__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2684) = {
    SEE = 2684;
    let imm4 = Slice(__opcode, 16, 4);
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRU_Z_MZ2__(imm4, Zn, U, Zd)
}

val execute_SQRSHRN_Z_MZ4__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRN_Z_MZ4__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 3 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let element : bits(4 * 'esize) = Elem_read(operand, e, 4 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, 4 * e + i, esize, SignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRN_Z_MZ4__ : (bits(2), bits(5), bits(1), bits(3), bits(1), bits(5)) -> unit

function decode_SQRSHRN_Z_MZ4__ (tsize, imm5, N, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    esize : {8, 16} = 8;
    match tsize {
      0b00 => {
          throw(Error_Undefined())
      },
      0b01 => {
          esize = 8
      },
      [bitone, _] => {
          esize = 16
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    let 'shift = 8 * esize - UInt(tsize @ imm5);
    match VL {
      128 => {
          execute_SQRSHRN_Z_MZ4__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRN_Z_MZ4__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRN_Z_MZ4__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRN_Z_MZ4__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRN_Z_MZ4__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2685) = {
    SEE = 2685;
    let tsize = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRN_Z_MZ4__(tsize, imm5, N, Zn, U, Zd)
}

val execute_UQRSHRN_Z_MZ4__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQRSHRN_Z_MZ4__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 3 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let element : bits(4 * 'esize) = Elem_read(operand, e, 4 * esize);
            let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, 4 * e + i, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQRSHRN_Z_MZ4__ : (bits(2), bits(5), bits(1), bits(3), bits(1), bits(5)) -> unit

function decode_UQRSHRN_Z_MZ4__ (tsize, imm5, N, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    esize : {8, 16} = 8;
    match tsize {
      0b00 => {
          throw(Error_Undefined())
      },
      0b01 => {
          esize = 8
      },
      [bitone, _] => {
          esize = 16
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    let 'shift = 8 * esize - UInt(tsize @ imm5);
    match VL {
      128 => {
          execute_UQRSHRN_Z_MZ4__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQRSHRN_Z_MZ4__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQRSHRN_Z_MZ4__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQRSHRN_Z_MZ4__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQRSHRN_Z_MZ4__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, bitzero, bitone, _, _, _, _, _] as __opcode)) if SEE < 2686) = {
    SEE = 2686;
    let tsize = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQRSHRN_Z_MZ4__(tsize, imm5, N, Zn, U, Zd)
}

val execute_SQRSHRUN_Z_MZ4__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRUN_Z_MZ4__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 3 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let element : bits(4 * 'esize) = Elem_read(operand, e, 4 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, 4 * e + i, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRUN_Z_MZ4__ : (bits(2), bits(5), bits(1), bits(3), bits(1), bits(5)) -> unit

function decode_SQRSHRUN_Z_MZ4__ (tsize, imm5, N, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    esize : {8, 16} = 8;
    match tsize {
      0b00 => {
          throw(Error_Undefined())
      },
      0b01 => {
          esize = 8
      },
      [bitone, _] => {
          esize = 16
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    let 'shift = 8 * esize - UInt(tsize @ imm5);
    match VL {
      128 => {
          execute_SQRSHRUN_Z_MZ4__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRUN_Z_MZ4__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRUN_Z_MZ4__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRUN_Z_MZ4__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRUN_Z_MZ4__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitone, bitone, _, _, _, bitone, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2687) = {
    SEE = 2687;
    let tsize = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRUN_Z_MZ4__(tsize, imm5, N, Zn, U, Zd)
}

val execute_SQRSHR_Z_MZ4__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHR_Z_MZ4__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(4 * 'esize) = Elem_read(operand, e, 4 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, r * elements + e, esize, SignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHR_Z_MZ4__ : (bits(2), bits(5), bits(1), bits(3), bits(1), bits(5)) -> unit

function decode_SQRSHR_Z_MZ4__ (tsize, imm5, N, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    esize : {8, 16} = 8;
    match tsize {
      0b00 => {
          throw(Error_Undefined())
      },
      0b01 => {
          esize = 8
      },
      [bitone, _] => {
          esize = 16
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    let 'shift = 8 * esize - UInt(tsize @ imm5);
    match VL {
      128 => {
          execute_SQRSHR_Z_MZ4__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHR_Z_MZ4__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHR_Z_MZ4__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHR_Z_MZ4__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHR_Z_MZ4__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2688) = {
    SEE = 2688;
    let tsize = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHR_Z_MZ4__(tsize, imm5, N, Zn, U, Zd)
}

val execute_UQRSHR_Z_MZ4__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQRSHR_Z_MZ4__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(4 * 'esize) = Elem_read(operand, e, 4 * esize);
            let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQRSHR_Z_MZ4__ : (bits(2), bits(5), bits(1), bits(3), bits(1), bits(5)) -> unit

function decode_UQRSHR_Z_MZ4__ (tsize, imm5, N, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    esize : {8, 16} = 8;
    match tsize {
      0b00 => {
          throw(Error_Undefined())
      },
      0b01 => {
          esize = 8
      },
      [bitone, _] => {
          esize = 16
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    let 'shift = 8 * esize - UInt(tsize @ imm5);
    match VL {
      128 => {
          execute_UQRSHR_Z_MZ4__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQRSHR_Z_MZ4__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQRSHR_Z_MZ4__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQRSHR_Z_MZ4__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQRSHR_Z_MZ4__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitone, _, _, _, _, _] as __opcode)) if SEE < 2689) = {
    SEE = 2689;
    let tsize = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQRSHR_Z_MZ4__(tsize, imm5, N, Zn, U, Zd)
}

val execute_SQRSHRU_Z_MZ4__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRU_Z_MZ4__ (VL, d, esize, n, shift) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element : bits(4 * 'esize) = Elem_read(operand, e, 4 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRU_Z_MZ4__ : (bits(2), bits(5), bits(1), bits(3), bits(1), bits(5)) -> unit

function decode_SQRSHRU_Z_MZ4__ (tsize, imm5, N, Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    esize : {8, 16} = 8;
    match tsize {
      0b00 => {
          throw(Error_Undefined())
      },
      0b01 => {
          esize = 8
      },
      [bitone, _] => {
          esize = 16
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    let 'shift = 8 * esize - UInt(tsize @ imm5);
    match VL {
      128 => {
          execute_SQRSHRU_Z_MZ4__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRU_Z_MZ4__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRU_Z_MZ4__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRU_Z_MZ4__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRU_Z_MZ4__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitone, bitzero, _, _, _, bitone, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2690) = {
    SEE = 2690;
    let tsize = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 7, 3);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRU_Z_MZ4__(tsize, imm5, N, Zn, U, Zd)
}

val execute_SQCVT_Z_MZ2__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVT_Z_MZ2__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand, e, 2 * esize));
            result = Elem_set(result, r * elements + e, esize, SignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVT_Z_MZ2__ : (bits(4), bits(1), bits(5)) -> unit

function decode_SQCVT_Z_MZ2__ (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQCVT_Z_MZ2__(128, d, esize, n)
      },
      256 => {
          execute_SQCVT_Z_MZ2__(256, d, esize, n)
      },
      512 => {
          execute_SQCVT_Z_MZ2__(512, d, esize, n)
      },
      1024 => {
          execute_SQCVT_Z_MZ2__(1024, d, esize, n)
      },
      2048 => {
          execute_SQCVT_Z_MZ2__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2691) = {
    SEE = 2691;
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVT_Z_MZ2__(Zn, U, Zd)
}

val execute_UQCVT_Z_MZ2__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UQCVT_Z_MZ2__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = UInt(Elem_read(operand, e, 2 * esize));
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQCVT_Z_MZ2__ : (bits(4), bits(1), bits(5)) -> unit

function decode_UQCVT_Z_MZ2__ (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UQCVT_Z_MZ2__(128, d, esize, n)
      },
      256 => {
          execute_UQCVT_Z_MZ2__(256, d, esize, n)
      },
      512 => {
          execute_UQCVT_Z_MZ2__(512, d, esize, n)
      },
      1024 => {
          execute_UQCVT_Z_MZ2__(1024, d, esize, n)
      },
      2048 => {
          execute_UQCVT_Z_MZ2__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, _, _, _, _, _] as __opcode)) if SEE < 2692) = {
    SEE = 2692;
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQCVT_Z_MZ2__(Zn, U, Zd)
}

val execute_SQCVTU_Z_MZ2__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVTU_Z_MZ2__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand, e, 2 * esize));
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVTU_Z_MZ2__ : (bits(4), bits(1), bits(5)) -> unit

function decode_SQCVTU_Z_MZ2__ (Zn, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQCVTU_Z_MZ2__(128, d, esize, n)
      },
      256 => {
          execute_SQCVTU_Z_MZ2__(256, d, esize, n)
      },
      512 => {
          execute_SQCVTU_Z_MZ2__(512, d, esize, n)
      },
      1024 => {
          execute_SQCVTU_Z_MZ2__(1024, d, esize, n)
      },
      2048 => {
          execute_SQCVTU_Z_MZ2__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2693) = {
    SEE = 2693;
    let Zn = Slice(__opcode, 6, 4);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVTU_Z_MZ2__(Zn, U, Zd)
}

val execute_SQCVTN_Z_MZ4__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVTN_Z_MZ4__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 3 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let 'element = SInt(Elem_read(operand, e, 4 * esize));
            result = Elem_set(result, 4 * e + i, esize, SignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVTN_Z_MZ4__ : (bits(1), bits(3), bits(1), bits(1), bits(5)) -> unit

function decode_SQCVTN_Z_MZ4__ (sz, Zn, N, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(128))));
          execute_SQCVTN_Z_MZ4__(128, d, esize, n)
      },
      256 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(256))));
          execute_SQCVTN_Z_MZ4__(256, d, esize, n)
      },
      512 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(512))));
          execute_SQCVTN_Z_MZ4__(512, d, esize, n)
      },
      1024 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(1024))));
          execute_SQCVTN_Z_MZ4__(1024, d, esize, n)
      },
      2048 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(2048))));
          execute_SQCVTN_Z_MZ4__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2694) = {
    SEE = 2694;
    let sz = Slice(__opcode, 23, 1);
    let Zn = Slice(__opcode, 7, 3);
    let N = Slice(__opcode, 6, 1);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVTN_Z_MZ4__(sz, Zn, N, U, Zd)
}

val execute_UQCVTN_Z_MZ4__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UQCVTN_Z_MZ4__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 3 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let 'element = UInt(Elem_read(operand, e, 4 * esize));
            result = Elem_set(result, 4 * e + i, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQCVTN_Z_MZ4__ : (bits(1), bits(3), bits(1), bits(1), bits(5)) -> unit

function decode_UQCVTN_Z_MZ4__ (sz, Zn, N, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(128))));
          execute_UQCVTN_Z_MZ4__(128, d, esize, n)
      },
      256 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(256))));
          execute_UQCVTN_Z_MZ4__(256, d, esize, n)
      },
      512 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(512))));
          execute_UQCVTN_Z_MZ4__(512, d, esize, n)
      },
      1024 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(1024))));
          execute_UQCVTN_Z_MZ4__(1024, d, esize, n)
      },
      2048 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(2048))));
          execute_UQCVTN_Z_MZ4__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, bitone, _, _, _, _, _] as __opcode)) if SEE < 2695) = {
    SEE = 2695;
    let sz = Slice(__opcode, 23, 1);
    let Zn = Slice(__opcode, 7, 3);
    let N = Slice(__opcode, 6, 1);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQCVTN_Z_MZ4__(sz, Zn, N, U, Zd)
}

val execute_SQCVTUN_Z_MZ4__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVTUN_Z_MZ4__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 3 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let 'element = SInt(Elem_read(operand, e, 4 * esize));
            result = Elem_set(result, 4 * e + i, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVTUN_Z_MZ4__ : (bits(1), bits(3), bits(1), bits(1), bits(5)) -> unit

function decode_SQCVTUN_Z_MZ4__ (sz, Zn, N, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(128))));
          execute_SQCVTUN_Z_MZ4__(128, d, esize, n)
      },
      256 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(256))));
          execute_SQCVTUN_Z_MZ4__(256, d, esize, n)
      },
      512 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(512))));
          execute_SQCVTUN_Z_MZ4__(512, d, esize, n)
      },
      1024 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(1024))));
          execute_SQCVTUN_Z_MZ4__(1024, d, esize, n)
      },
      2048 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(2048))));
          execute_SQCVTUN_Z_MZ4__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitone, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2696) = {
    SEE = 2696;
    let sz = Slice(__opcode, 23, 1);
    let Zn = Slice(__opcode, 7, 3);
    let N = Slice(__opcode, 6, 1);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVTUN_Z_MZ4__(sz, Zn, N, U, Zd)
}

val execute_SQCVT_Z_MZ4__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVT_Z_MZ4__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand, e, 4 * esize));
            result = Elem_set(result, r * elements + e, esize, SignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVT_Z_MZ4__ : (bits(1), bits(3), bits(1), bits(1), bits(5)) -> unit

function decode_SQCVT_Z_MZ4__ (sz, Zn, N, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(128))));
          execute_SQCVT_Z_MZ4__(128, d, esize, n)
      },
      256 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(256))));
          execute_SQCVT_Z_MZ4__(256, d, esize, n)
      },
      512 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(512))));
          execute_SQCVT_Z_MZ4__(512, d, esize, n)
      },
      1024 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(1024))));
          execute_SQCVT_Z_MZ4__(1024, d, esize, n)
      },
      2048 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(2048))));
          execute_SQCVT_Z_MZ4__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2697) = {
    SEE = 2697;
    let sz = Slice(__opcode, 23, 1);
    let Zn = Slice(__opcode, 7, 3);
    let N = Slice(__opcode, 6, 1);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVT_Z_MZ4__(sz, Zn, N, U, Zd)
}

val execute_UQCVT_Z_MZ4__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UQCVT_Z_MZ4__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = UInt(Elem_read(operand, e, 4 * esize));
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQCVT_Z_MZ4__ : (bits(1), bits(3), bits(1), bits(1), bits(5)) -> unit

function decode_UQCVT_Z_MZ4__ (sz, Zn, N, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(128))));
          execute_UQCVT_Z_MZ4__(128, d, esize, n)
      },
      256 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(256))));
          execute_UQCVT_Z_MZ4__(256, d, esize, n)
      },
      512 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(512))));
          execute_UQCVT_Z_MZ4__(512, d, esize, n)
      },
      1024 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(1024))));
          execute_UQCVT_Z_MZ4__(1024, d, esize, n)
      },
      2048 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(2048))));
          execute_UQCVT_Z_MZ4__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone, _, _, _, _, _] as __opcode)) if SEE < 2698) = {
    SEE = 2698;
    let sz = Slice(__opcode, 23, 1);
    let Zn = Slice(__opcode, 7, 3);
    let N = Slice(__opcode, 6, 1);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQCVT_Z_MZ4__(sz, Zn, N, U, Zd)
}

val execute_SQCVTU_Z_MZ4__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVTU_Z_MZ4__ (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 4 * esize);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'element = SInt(Elem_read(operand, e, 4 * esize));
            result = Elem_set(result, r * elements + e, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVTU_Z_MZ4__ : (bits(1), bits(3), bits(1), bits(1), bits(5)) -> unit

function decode_SQCVTU_Z_MZ4__ (sz, Zn, N, U, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(sz));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(128))));
          execute_SQCVTU_Z_MZ4__(128, d, esize, n)
      },
      256 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(256))));
          execute_SQCVTU_Z_MZ4__(256, d, esize, n)
      },
      512 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(512))));
          execute_SQCVTU_Z_MZ4__(512, d, esize, n)
      },
      1024 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(1024))));
          execute_SQCVTU_Z_MZ4__(1024, d, esize, n)
      },
      2048 => {
          assert(constraint((0 <= 'n & 'n <= 31 & 'esize in {8, 16} & 0 <= 'd & 'd <= 31 & is_VL(2048))));
          execute_SQCVTU_Z_MZ4__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 2699) = {
    SEE = 2699;
    let sz = Slice(__opcode, 23, 1);
    let Zn = Slice(__opcode, 7, 3);
    let N = Slice(__opcode, 6, 1);
    let U = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVTU_Z_MZ4__(sz, Zn, N, U, Zd)
}

val execute_ZIP_MZ_ZZ_2 : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_ZIP_MZ_ZZ_2 (VL, d, esize, m, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand0 : bits('VL) = Z_read(n, VL);
    let operand1 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let 'base = r * pairs;
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand0, base + p, esize));
            result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand1, base + p, esize))
        };
        Z_set(d + r, VL) = result
    }
}

val decode_ZIP_MZ_ZZ_2 : (bits(2), bits(5), bits(5), bits(4)) -> unit

function decode_ZIP_MZ_ZZ_2 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    match VL {
      128 => {
          execute_ZIP_MZ_ZZ_2(128, d, esize, m, n)
      },
      256 => {
          execute_ZIP_MZ_ZZ_2(256, d, esize, m, n)
      },
      512 => {
          execute_ZIP_MZ_ZZ_2(512, d, esize, m, n)
      },
      1024 => {
          execute_ZIP_MZ_ZZ_2(1024, d, esize, m, n)
      },
      2048 => {
          execute_ZIP_MZ_ZZ_2(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2700) = {
    SEE = 2700;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_ZIP_MZ_ZZ_2(size, Zm, Zn, Zd)
}

val execute_UZP_MZ_ZZ_2 : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UZP_MZ_ZZ_2 (VL, d, esize, m, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    result0 : bits('VL) = undefined;
    result1 : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let 'base = r * pairs;
        let operand : bits('VL) = if r == 0 then Z_read(n, VL) else
          Z_read(m, VL);
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result0 = Elem_set(result0, base + p, esize, Elem_read(operand, 2 * p + 0, esize));
            result1 = Elem_set(result1, base + p, esize, Elem_read(operand, 2 * p + 1, esize))
        }
    };
    Z_set(d + 0, VL) = result0;
    Z_set(d + 1, VL) = result1
}

val decode_UZP_MZ_ZZ_2 : (bits(2), bits(5), bits(5), bits(4)) -> unit

function decode_UZP_MZ_ZZ_2 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    match VL {
      128 => {
          execute_UZP_MZ_ZZ_2(128, d, esize, m, n)
      },
      256 => {
          execute_UZP_MZ_ZZ_2(256, d, esize, m, n)
      },
      512 => {
          execute_UZP_MZ_ZZ_2(512, d, esize, m, n)
      },
      1024 => {
          execute_UZP_MZ_ZZ_2(1024, d, esize, m, n)
      },
      2048 => {
          execute_UZP_MZ_ZZ_2(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2701) = {
    SEE = 2701;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_UZP_MZ_ZZ_2(size, Zm, Zn, Zd)
}

val execute_ZIP_MZ_ZZ_2Q : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_ZIP_MZ_ZZ_2Q (VL, d, esize, m, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand0 : bits('VL) = Z_read(n, VL);
    let operand1 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let 'base = r * pairs;
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand0, base + p, esize));
            result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand1, base + p, esize))
        };
        Z_set(d + r, VL) = result
    }
}

val decode_ZIP_MZ_ZZ_2Q : (bits(5), bits(5), bits(4)) -> unit

function decode_ZIP_MZ_ZZ_2Q (Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    match VL {
      128 => {
          execute_ZIP_MZ_ZZ_2Q(128, d, esize, m, n)
      },
      256 => {
          execute_ZIP_MZ_ZZ_2Q(256, d, esize, m, n)
      },
      512 => {
          execute_ZIP_MZ_ZZ_2Q(512, d, esize, m, n)
      },
      1024 => {
          execute_ZIP_MZ_ZZ_2Q(1024, d, esize, m, n)
      },
      2048 => {
          execute_ZIP_MZ_ZZ_2Q(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2702) = {
    SEE = 2702;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_ZIP_MZ_ZZ_2Q(Zm, Zn, Zd)
}

val execute_UZP_MZ_ZZ_2Q : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UZP_MZ_ZZ_2Q (VL, d, esize, m, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    result0 : bits('VL) = undefined;
    result1 : bits('VL) = undefined;
    foreach (r from 0 to 1 by 1 in inc) {
        let 'base = r * pairs;
        let operand : bits('VL) = if r == 0 then Z_read(n, VL) else
          Z_read(m, VL);
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result0 = Elem_set(result0, base + p, esize, Elem_read(operand, 2 * p + 0, esize));
            result1 = Elem_set(result1, base + p, esize, Elem_read(operand, 2 * p + 1, esize))
        }
    };
    Z_set(d + 0, VL) = result0;
    Z_set(d + 1, VL) = result1
}

val decode_UZP_MZ_ZZ_2Q : (bits(5), bits(5), bits(4)) -> unit

function decode_UZP_MZ_ZZ_2Q (Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    match VL {
      128 => {
          execute_UZP_MZ_ZZ_2Q(128, d, esize, m, n)
      },
      256 => {
          execute_UZP_MZ_ZZ_2Q(256, d, esize, m, n)
      },
      512 => {
          execute_UZP_MZ_ZZ_2Q(512, d, esize, m, n)
      },
      1024 => {
          execute_UZP_MZ_ZZ_2Q(1024, d, esize, m, n)
      },
      2048 => {
          execute_UZP_MZ_ZZ_2Q(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2703) = {
    SEE = 2703;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_UZP_MZ_ZZ_2Q(Zm, Zn, Zd)
}

val execute_ZIP_MZ_Z_4 : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_ZIP_MZ_Z_4 (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 4 then {
        throw(Error_Undefined())
    };
    let 'quads = DIV(VL, esize * 4);
    let operand0 : bits('VL) = Z_read(n, VL);
    let operand1 : bits('VL) = Z_read(n + 1, VL);
    let operand2 : bits('VL) = Z_read(n + 2, VL);
    let operand3 : bits('VL) = Z_read(n + 3, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let 'base = r * quads;
        foreach (q from 0 to (quads - 1) by 1 in inc) {
            result = Elem_set(result, 4 * q + 0, esize, Elem_read(operand0, base + q, esize));
            result = Elem_set(result, 4 * q + 1, esize, Elem_read(operand1, base + q, esize));
            result = Elem_set(result, 4 * q + 2, esize, Elem_read(operand2, base + q, esize));
            result = Elem_set(result, 4 * q + 3, esize, Elem_read(operand3, base + q, esize))
        };
        Z_set(d + r, VL) = result
    }
}

val decode_ZIP_MZ_Z_4 : (bits(2), bits(3), bits(3)) -> unit

function decode_ZIP_MZ_Z_4 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    match VL {
      128 => {
          execute_ZIP_MZ_Z_4(128, d, esize, n)
      },
      256 => {
          execute_ZIP_MZ_Z_4(256, d, esize, n)
      },
      512 => {
          execute_ZIP_MZ_Z_4(512, d, esize, n)
      },
      1024 => {
          execute_ZIP_MZ_Z_4(1024, d, esize, n)
      },
      2048 => {
          execute_ZIP_MZ_Z_4(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2704) = {
    SEE = 2704;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_ZIP_MZ_Z_4(size, Zn, Zd)
}

val execute_UZP_MZ_Z_4 : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UZP_MZ_Z_4 (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 4 then {
        throw(Error_Undefined())
    };
    let 'quads = DIV(VL, esize * 4);
    result0 : bits('VL) = undefined;
    result1 : bits('VL) = undefined;
    result2 : bits('VL) = undefined;
    result3 : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        let 'base = r * quads;
        foreach (q from 0 to (quads - 1) by 1 in inc) {
            result0 = Elem_set(result0, base + q, esize, Elem_read(operand, 4 * q + 0, esize));
            result1 = Elem_set(result1, base + q, esize, Elem_read(operand, 4 * q + 1, esize));
            result2 = Elem_set(result2, base + q, esize, Elem_read(operand, 4 * q + 2, esize));
            result3 = Elem_set(result3, base + q, esize, Elem_read(operand, 4 * q + 3, esize))
        }
    };
    Z_set(d + 0, VL) = result0;
    Z_set(d + 1, VL) = result1;
    Z_set(d + 2, VL) = result2;
    Z_set(d + 3, VL) = result3
}

val decode_UZP_MZ_Z_4 : (bits(2), bits(3), bits(3)) -> unit

function decode_UZP_MZ_Z_4 (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    match VL {
      128 => {
          execute_UZP_MZ_Z_4(128, d, esize, n)
      },
      256 => {
          execute_UZP_MZ_Z_4(256, d, esize, n)
      },
      512 => {
          execute_UZP_MZ_Z_4(512, d, esize, n)
      },
      1024 => {
          execute_UZP_MZ_Z_4(1024, d, esize, n)
      },
      2048 => {
          execute_UZP_MZ_Z_4(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitone, bitzero] as __opcode)) if SEE < 2705) = {
    SEE = 2705;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_UZP_MZ_Z_4(size, Zn, Zd)
}

val execute_ZIP_MZ_Z_4Q : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_ZIP_MZ_Z_4Q (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 4 then {
        throw(Error_Undefined())
    };
    let 'quads = DIV(VL, esize * 4);
    let operand0 : bits('VL) = Z_read(n, VL);
    let operand1 : bits('VL) = Z_read(n + 1, VL);
    let operand2 : bits('VL) = Z_read(n + 2, VL);
    let operand3 : bits('VL) = Z_read(n + 3, VL);
    result : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let 'base = r * quads;
        foreach (q from 0 to (quads - 1) by 1 in inc) {
            result = Elem_set(result, 4 * q + 0, esize, Elem_read(operand0, base + q, esize));
            result = Elem_set(result, 4 * q + 1, esize, Elem_read(operand1, base + q, esize));
            result = Elem_set(result, 4 * q + 2, esize, Elem_read(operand2, base + q, esize));
            result = Elem_set(result, 4 * q + 3, esize, Elem_read(operand3, base + q, esize))
        };
        Z_set(d + r, VL) = result
    }
}

val decode_ZIP_MZ_Z_4Q : (bits(3), bits(3)) -> unit

function decode_ZIP_MZ_Z_4Q (Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    match VL {
      128 => {
          execute_ZIP_MZ_Z_4Q(128, d, esize, n)
      },
      256 => {
          execute_ZIP_MZ_Z_4Q(256, d, esize, n)
      },
      512 => {
          execute_ZIP_MZ_Z_4Q(512, d, esize, n)
      },
      1024 => {
          execute_ZIP_MZ_Z_4Q(1024, d, esize, n)
      },
      2048 => {
          execute_ZIP_MZ_Z_4Q(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2706) = {
    SEE = 2706;
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_ZIP_MZ_Z_4Q(Zn, Zd)
}

val execute_UZP_MZ_Z_4Q : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UZP_MZ_Z_4Q (VL, d, esize, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    if VL < esize * 4 then {
        throw(Error_Undefined())
    };
    let 'quads = DIV(VL, esize * 4);
    result0 : bits('VL) = undefined;
    result1 : bits('VL) = undefined;
    result2 : bits('VL) = undefined;
    result3 : bits('VL) = undefined;
    foreach (r from 0 to 3 by 1 in inc) {
        let operand : bits('VL) = Z_read(n + r, VL);
        let 'base = r * quads;
        foreach (q from 0 to (quads - 1) by 1 in inc) {
            result0 = Elem_set(result0, base + q, esize, Elem_read(operand, 4 * q + 0, esize));
            result1 = Elem_set(result1, base + q, esize, Elem_read(operand, 4 * q + 1, esize));
            result2 = Elem_set(result2, base + q, esize, Elem_read(operand, 4 * q + 2, esize));
            result3 = Elem_set(result3, base + q, esize, Elem_read(operand, 4 * q + 3, esize))
        }
    };
    Z_set(d + 0, VL) = result0;
    Z_set(d + 1, VL) = result1;
    Z_set(d + 2, VL) = result2;
    Z_set(d + 3, VL) = result3
}

val decode_UZP_MZ_Z_4Q : (bits(3), bits(3)) -> unit

function decode_UZP_MZ_Z_4Q (Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    match VL {
      128 => {
          execute_UZP_MZ_Z_4Q(128, d, esize, n)
      },
      256 => {
          execute_UZP_MZ_Z_4Q(256, d, esize, n)
      },
      512 => {
          execute_UZP_MZ_Z_4Q(512, d, esize, n)
      },
      1024 => {
          execute_UZP_MZ_Z_4Q(1024, d, esize, n)
      },
      2048 => {
          execute_UZP_MZ_Z_4Q(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, _, _, _, bitone, bitzero] as __opcode)) if SEE < 2707) = {
    SEE = 2707;
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_UZP_MZ_Z_4Q(Zn, Zd)
}

val execute_SEL_MZ_P_ZZ_2 : forall 'VL 'd 'esize 'g 'm 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), int('nreg)) -> unit

function execute_SEL_MZ_P_ZZ_2 (VL, d, esize, g, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                results[r] = Elem_set(results[r], e, esize, Elem_read(operand1, e, esize))
            } else {
                results[r] = Elem_set(results[r], e, esize, Elem_read(operand2, e, esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SEL_MZ_P_ZZ_2 : (bits(2), bits(4), bits(3), bits(4), bits(4)) -> unit

function decode_SEL_MZ_P_ZZ_2 (size, Zm, PNg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'd = UInt(Zd @ 0b0);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_SEL_MZ_P_ZZ_2(128, d, esize, g, m, n, nreg)
      },
      256 => {
          execute_SEL_MZ_P_ZZ_2(256, d, esize, g, m, n, nreg)
      },
      512 => {
          execute_SEL_MZ_P_ZZ_2(512, d, esize, g, m, n, nreg)
      },
      1024 => {
          execute_SEL_MZ_P_ZZ_2(1024, d, esize, g, m, n, nreg)
      },
      2048 => {
          execute_SEL_MZ_P_ZZ_2(2048, d, esize, g, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2708) = {
    SEE = 2708;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let PNg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 1, 4);
    decode_SEL_MZ_P_ZZ_2(size, Zm, PNg, Zn, Zd)
}

val execute_SEL_MZ_P_ZZ_4 : forall 'VL 'd 'esize 'g 'm 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), int('nreg)) -> unit

function execute_SEL_MZ_P_ZZ_4 (VL, d, esize, g, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    results : vector(4, bits('VL)) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                results[r] = Elem_set(results[r], e, esize, Elem_read(operand1, e, esize))
            } else {
                results[r] = Elem_set(results[r], e, esize, Elem_read(operand2, e, esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_SEL_MZ_P_ZZ_4 : (bits(2), bits(3), bits(3), bits(3), bits(3)) -> unit

function decode_SEL_MZ_P_ZZ_4 (size, Zm, PNg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'd = UInt(Zd @ 0b00);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_SEL_MZ_P_ZZ_4(128, d, esize, g, m, n, nreg)
      },
      256 => {
          execute_SEL_MZ_P_ZZ_4(256, d, esize, g, m, n, nreg)
      },
      512 => {
          execute_SEL_MZ_P_ZZ_4(512, d, esize, g, m, n, nreg)
      },
      1024 => {
          execute_SEL_MZ_P_ZZ_4(1024, d, esize, g, m, n, nreg)
      },
      2048 => {
          execute_SEL_MZ_P_ZZ_4(2048, d, esize, g, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, bitone, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2709) = {
    SEE = 2709;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let PNg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 7, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_SEL_MZ_P_ZZ_4(size, Zm, PNg, Zn, Zd)
}

val execute_BMOPA_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_BMOPA_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, row, esize);
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                res : int = BitCount(not_vec(EOR(element1, element2)));
                if sub_op then {
                    res = negate(res)
                };
                let 'res = res;
                result = Elem_set(result, row * dim + col, esize, element3 + res)
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_BMOPA_ZA_PP_ZZ_32 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_BMOPA_ZA_PP_ZZ_32 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_BMOPA_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_BMOPA_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_BMOPA_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_BMOPA_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_BMOPA_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2710) = {
    SEE = 2710;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_BMOPA_ZA_PP_ZZ_32(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_BMOPS_ZA_PP_ZZ_32 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_BMOPS_ZA_PP_ZZ_32 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, row, esize);
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                res : int = BitCount(not_vec(EOR(element1, element2)));
                if sub_op then {
                    res = negate(res)
                };
                let 'res = res;
                result = Elem_set(result, row * dim + col, esize, element3 + res)
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_BMOPS_ZA_PP_ZZ_32 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_BMOPS_ZA_PP_ZZ_32 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_BMOPS_ZA_PP_ZZ_32(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_BMOPS_ZA_PP_ZZ_32(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_BMOPS_ZA_PP_ZZ_32(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_BMOPS_ZA_PP_ZZ_32(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_BMOPS_ZA_PP_ZZ_32(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2711) = {
    SEE = 2711;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_BMOPS_ZA_PP_ZZ_32(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SMOPA_ZA32_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize ('is_unsigned : Bool) 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op), bool('is_unsigned)) -> unit

function execute_SMOPA_ZA32_PP_ZZ_16 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op, is_unsigned) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 1 by 1 in inc) {
                if ActivePredicateElement(mask1, 2 * row + k, DIV(esize, 2)) & ActivePredicateElement(mask2, 2 * col + k, DIV(esize, 2)) then {
                    prod = asl_Int(Elem_read(operand1, 2 * row + k, DIV(esize, 2)), is_unsigned) * asl_Int(Elem_read(operand2, 2 * col + k, DIV(esize, 2)), is_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SMOPA_ZA32_PP_ZZ_16 : (bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_SMOPA_ZA32_PP_ZZ_16 (u0, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMOPA_ZA32_PP_ZZ_16(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      256 => {
          execute_SMOPA_ZA32_PP_ZZ_16(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      512 => {
          execute_SMOPA_ZA32_PP_ZZ_16(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      1024 => {
          execute_SMOPA_ZA32_PP_ZZ_16(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      2048 => {
          execute_SMOPA_ZA32_PP_ZZ_16(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2712) = {
    SEE = 2712;
    let u0 = Slice(__opcode, 24, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_SMOPA_ZA32_PP_ZZ_16(u0, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_UMOPA_ZA32_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize ('is_unsigned : Bool) 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op), bool('is_unsigned)) -> unit

function execute_UMOPA_ZA32_PP_ZZ_16 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op, is_unsigned) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 1 by 1 in inc) {
                if ActivePredicateElement(mask1, 2 * row + k, DIV(esize, 2)) & ActivePredicateElement(mask2, 2 * col + k, DIV(esize, 2)) then {
                    prod = asl_Int(Elem_read(operand1, 2 * row + k, DIV(esize, 2)), is_unsigned) * asl_Int(Elem_read(operand2, 2 * col + k, DIV(esize, 2)), is_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_UMOPA_ZA32_PP_ZZ_16 : (bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_UMOPA_ZA32_PP_ZZ_16 (u0, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMOPA_ZA32_PP_ZZ_16(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      256 => {
          execute_UMOPA_ZA32_PP_ZZ_16(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      512 => {
          execute_UMOPA_ZA32_PP_ZZ_16(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      1024 => {
          execute_UMOPA_ZA32_PP_ZZ_16(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      2048 => {
          execute_UMOPA_ZA32_PP_ZZ_16(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _] as __opcode)) if SEE < 2713) = {
    SEE = 2713;
    let u0 = Slice(__opcode, 24, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_UMOPA_ZA32_PP_ZZ_16(u0, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_SMOPS_ZA32_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize ('is_unsigned : Bool) 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op), bool('is_unsigned)) -> unit

function execute_SMOPS_ZA32_PP_ZZ_16 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op, is_unsigned) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 1 by 1 in inc) {
                if ActivePredicateElement(mask1, 2 * row + k, DIV(esize, 2)) & ActivePredicateElement(mask2, 2 * col + k, DIV(esize, 2)) then {
                    prod = asl_Int(Elem_read(operand1, 2 * row + k, DIV(esize, 2)), is_unsigned) * asl_Int(Elem_read(operand2, 2 * col + k, DIV(esize, 2)), is_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_SMOPS_ZA32_PP_ZZ_16 : (bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_SMOPS_ZA32_PP_ZZ_16 (u0, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMOPS_ZA32_PP_ZZ_16(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      256 => {
          execute_SMOPS_ZA32_PP_ZZ_16(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      512 => {
          execute_SMOPS_ZA32_PP_ZZ_16(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      1024 => {
          execute_SMOPS_ZA32_PP_ZZ_16(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      2048 => {
          execute_SMOPS_ZA32_PP_ZZ_16(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2714) = {
    SEE = 2714;
    let u0 = Slice(__opcode, 24, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_SMOPS_ZA32_PP_ZZ_16(u0, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_UMOPS_ZA32_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize ('is_unsigned : Bool) 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 'da in {0, 1, 2, 3} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op), bool('is_unsigned)) -> unit

function execute_UMOPS_ZA32_PP_ZZ_16 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op, is_unsigned) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    prod : int = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            sum : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            foreach (k from 0 to 1 by 1 in inc) {
                if ActivePredicateElement(mask1, 2 * row + k, DIV(esize, 2)) & ActivePredicateElement(mask2, 2 * col + k, DIV(esize, 2)) then {
                    prod = asl_Int(Elem_read(operand1, 2 * row + k, DIV(esize, 2)), is_unsigned) * asl_Int(Elem_read(operand2, 2 * col + k, DIV(esize, 2)), is_unsigned);
                    if sub_op then {
                        prod = negate(prod)
                    };
                    sum = sum + prod
                };
                ()
            };
            result = Elem_set(result, row * dim + col, esize, sum)
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_UMOPS_ZA32_PP_ZZ_16 : (bits(1), bits(5), bits(3), bits(3), bits(5), bits(1), bits(2)) -> unit

function decode_UMOPS_ZA32_PP_ZZ_16 (u0, Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMOPS_ZA32_PP_ZZ_16(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      256 => {
          execute_UMOPS_ZA32_PP_ZZ_16(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      512 => {
          execute_UMOPS_ZA32_PP_ZZ_16(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      1024 => {
          execute_UMOPS_ZA32_PP_ZZ_16(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      },
      2048 => {
          execute_UMOPS_ZA32_PP_ZZ_16(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, _, _] as __opcode)) if SEE < 2715) = {
    SEE = 2715;
    let u0 = Slice(__opcode, 24, 1);
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 2);
    decode_UMOPS_ZA32_PP_ZZ_16(u0, Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_LUTI2_Z_ZTZ__ : forall 'VL 'd 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 1 & 0 <= 'n & 'n <= 31 & 'isize == 2 & 0 <= 'imm & 'imm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI2_Z_ZTZ__ (VL, d, esize, imm, isize, n, nreg) = {
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d + r, VL) = result
    }
}

val decode_LUTI2_Z_ZTZ__ : (bits(4), bits(2), bits(5), bits(5)) -> unit

function decode_LUTI2_Z_ZTZ__ (i4, size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 2;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'imm = UInt(i4);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_LUTI2_Z_ZTZ__(128, d, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI2_Z_ZTZ__(256, d, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI2_Z_ZTZ__(512, d, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI2_Z_ZTZ__(1024, d, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI2_Z_ZTZ__(2048, d, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2716) = {
    SEE = 2716;
    let i4 = Slice(__opcode, 14, 4);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_LUTI2_Z_ZTZ__(i4, size, Zn, Zd)
}

val execute_LUTI4_Z_ZTZ__ : forall 'VL 'd 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 1 & 0 <= 'n & 'n <= 31 & 'isize == 4 & 'imm in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI4_Z_ZTZ__ (VL, d, esize, imm, isize, n, nreg) = {
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d + r, VL) = result
    }
}

val decode_LUTI4_Z_ZTZ__ : (bits(3), bits(2), bits(5), bits(5)) -> unit

function decode_LUTI4_Z_ZTZ__ (i3, size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 4;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'imm = UInt(i3);
    let 'nreg = 1;
    match VL {
      128 => {
          execute_LUTI4_Z_ZTZ__(128, d, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI4_Z_ZTZ__(256, d, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI4_Z_ZTZ__(512, d, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI4_Z_ZTZ__(1024, d, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI4_Z_ZTZ__(2048, d, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2717) = {
    SEE = 2717;
    let i3 = Slice(__opcode, 14, 3);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_LUTI4_Z_ZTZ__(i3, size, Zn, Zd)
}

val execute_LUTI2_MZ2_ZTZ_1 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 'isize == 2 & 'imm in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 'dstride == 1 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI2_MZ2_ZTZ_1 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI2_MZ2_ZTZ_1 : (bits(3), bits(2), bits(5), bits(4)) -> unit

function decode_LUTI2_MZ2_ZTZ_1 (i3, size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 2;
    let 'n = UInt(Zn);
    let 'dstride = 1;
    let 'd = UInt(Zd @ 0b0);
    let 'imm = UInt(i3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LUTI2_MZ2_ZTZ_1(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI2_MZ2_ZTZ_1(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI2_MZ2_ZTZ_1(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI2_MZ2_ZTZ_1(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI2_MZ2_ZTZ_1(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2718) = {
    SEE = 2718;
    let i3 = Slice(__opcode, 15, 3);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_LUTI2_MZ2_ZTZ_1(i3, size, Zn, Zd)
}

val execute_LUTI4_MZ2_ZTZ_1 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 'isize == 4 & 'imm in {0, 1, 2, 3} & 'esize in {8, 16, 32, 64} & 'dstride == 1 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI4_MZ2_ZTZ_1 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI4_MZ2_ZTZ_1 : (bits(2), bits(2), bits(5), bits(4)) -> unit

function decode_LUTI4_MZ2_ZTZ_1 (i2, size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 4;
    let 'n = UInt(Zn);
    let 'dstride = 1;
    let 'd = UInt(Zd @ 0b0);
    let 'imm = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LUTI4_MZ2_ZTZ_1(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI4_MZ2_ZTZ_1(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI4_MZ2_ZTZ_1(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI4_MZ2_ZTZ_1(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI4_MZ2_ZTZ_1(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2719) = {
    SEE = 2719;
    let i2 = Slice(__opcode, 15, 2);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_LUTI4_MZ2_ZTZ_1(i2, size, Zn, Zd)
}

val execute_LUTI2_MZ4_ZTZ_1 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 'isize == 2 & 'imm in {0, 1, 2, 3} & 'esize in {8, 16, 32, 64} & 'dstride == 1 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI2_MZ4_ZTZ_1 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI2_MZ4_ZTZ_1 : (bits(2), bits(2), bits(5), bits(3)) -> unit

function decode_LUTI2_MZ4_ZTZ_1 (i2, size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 2;
    let 'n = UInt(Zn);
    let 'dstride = 1;
    let 'd = UInt(Zd @ 0b00);
    let 'imm = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LUTI2_MZ4_ZTZ_1(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI2_MZ4_ZTZ_1(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI2_MZ4_ZTZ_1(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI2_MZ4_ZTZ_1(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI2_MZ4_ZTZ_1(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, bitone, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2720) = {
    SEE = 2720;
    let i2 = Slice(__opcode, 16, 2);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 2, 3);
    decode_LUTI2_MZ4_ZTZ_1(i2, size, Zn, Zd)
}

val execute_LUTI4_MZ4_ZTZ_1 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 'isize == 4 & 'imm in {0, 1} & 'esize in {8, 16, 32, 64} & 'dstride == 1 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI4_MZ4_ZTZ_1 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI4_MZ4_ZTZ_1 : (bits(1), bits(2), bits(5), bits(3)) -> unit

function decode_LUTI4_MZ4_ZTZ_1 (i1, size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 4;
    let 'n = UInt(Zn);
    let 'dstride = 1;
    let 'd = UInt(Zd @ 0b00);
    let 'imm = UInt(i1);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LUTI4_MZ4_ZTZ_1(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI4_MZ4_ZTZ_1(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI4_MZ4_ZTZ_1(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI4_MZ4_ZTZ_1(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI4_MZ4_ZTZ_1(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, bitone, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2721) = {
    SEE = 2721;
    let i1 = Slice(__opcode, 16, 1);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 2, 3);
    decode_LUTI4_MZ4_ZTZ_1(i1, size, Zn, Zd)
}

val execute_LDR_ZT_BR__ : forall 'n, (0 <= 'n & 'n <= 31). int('n) -> unit

function execute_LDR_ZT_BR__ n = {
    CheckSMEEnabled();
    CheckSMEZT0Enabled();
    let 'elements = DIV(512, 8);
    base : bits(64) = undefined;
    result : bits(512) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if HaveTME() & TSTATE.depth > 0 then {
        FailTransaction(TMFailure_ERR, false)
    };
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let aligned : bool = IsAligned__1(base, 16);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, 8, AArch64_MemSingle_read(base + e, 1, accdesc, aligned))
    };
    ZT0_set(512) = result
}

val decode_LDR_ZT_BR__ : bits(5) -> unit

function decode_LDR_ZT_BR__ Rn = {
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    execute_LDR_ZT_BR__(n)
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2722) = {
    SEE = 2722;
    let Rn = Slice(__opcode, 5, 5);
    decode_LDR_ZT_BR__(Rn)
}

val execute_STR_ZT_BR__ : forall 'n, (0 <= 'n & 'n <= 31). int('n) -> unit

function execute_STR_ZT_BR__ n = {
    CheckSMEEnabled();
    CheckSMEZT0Enabled();
    let 'elements = DIV(512, 8);
    base : bits(64) = undefined;
    let table : bits(512) = ZT0_read(512);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSME(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if HaveTME() & TSTATE.depth > 0 then {
        FailTransaction(TMFailure_ERR, false)
    };
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let aligned : bool = IsAligned__1(base, 16);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        AArch64_MemSingle_set(base + e, 1, accdesc, aligned) = Elem_read(table, e, 8)
    }
}

val decode_STR_ZT_BR__ : bits(5) -> unit

function decode_STR_ZT_BR__ Rn = {
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    execute_STR_ZT_BR__(n)
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 2723) = {
    SEE = 2723;
    let Rn = Slice(__opcode, 5, 5);
    decode_STR_ZT_BR__(Rn)
}

val execute_ZERO_ZT_I__ : unit -> unit

function execute_ZERO_ZT_I__ () = {
    CheckSMEEnabled();
    CheckSMEZT0Enabled();
    if HaveTME() & TSTATE.depth > 0 then {
        FailTransaction(TMFailure_ERR, false)
    };
    ZT0_set(512) = Zeros(512)
}

val decode_ZERO_ZT_I__ : unit -> unit

function decode_ZERO_ZT_I__ () = {
    if not_bool(HaveSME2()) then {
        throw(Error_Undefined())
    };
    execute_ZERO_ZT_I__()
}

function clause __DecodeA64_SME ((pc, (0b11000000010010000000000000000001 as __opcode)) if SEE < 2724) = {
    SEE = 2724;
    decode_ZERO_ZT_I__()
}

val execute_MOVT_R_ZT__ : forall 'offset 't,
  (0 <= 't & 't <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('offset), int('t)) -> unit

function execute_MOVT_R_ZT__ (offset, t) = {
    CheckSMEEnabled();
    CheckSMEZT0Enabled();
    let operand : bits(512) = ZT0_read(512);
    X_set(t, 64) = Elem_read(operand, offset, 64)
}

val decode_MOVT_R_ZT__ : (bits(3), bits(5)) -> unit

function decode_MOVT_R_ZT__ (off3, Rt) = {
    if not_bool(HaveSME2()) | not_bool(Halted()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Rt);
    let 'offset = UInt(off3);
    execute_MOVT_R_ZT__(offset, t)
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _] as __opcode)) if SEE < 2725) = {
    SEE = 2725;
    let off3 = Slice(__opcode, 12, 3);
    let Rt = Slice(__opcode, 0, 5);
    decode_MOVT_R_ZT__(off3, Rt)
}

val execute_MOVT_ZT_R__ : forall 'offset 't,
  (0 <= 't & 't <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7}).
  (int('offset), int('t)) -> unit

function execute_MOVT_ZT_R__ (offset, t) = {
    CheckSMEEnabled();
    CheckSMEZT0Enabled();
    result : bits(512) = ZT0_read(512);
    result = Elem_set(result, offset, 64, X_read(t, 64));
    ZT0_set(512) = result
}

val decode_MOVT_ZT_R__ : (bits(3), bits(5)) -> unit

function decode_MOVT_ZT_R__ (off3, Rt) = {
    if not_bool(HaveSME2()) | not_bool(Halted()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Rt);
    let 'offset = UInt(off3);
    execute_MOVT_ZT_R__(offset, t)
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _] as __opcode)) if SEE < 2726) = {
    SEE = 2726;
    let off3 = Slice(__opcode, 12, 3);
    let Rt = Slice(__opcode, 0, 5);
    decode_MOVT_ZT_R__(off3, Rt)
}

val execute_RDSVL_R_I__ : forall 'SVL 'd 'imm,
  (0 <= 'd & 'd <= 31 & is_VL('SVL)).
  (int('SVL), int('d), int('imm)) -> unit

function execute_RDSVL_R_I__ (SVL, d, imm) = {
    CheckSMEEnabled();
    let 'SVL = SVL;
    let 'len = imm * DIV(SVL, 8);
    X_set(d, 64) = len[63 .. 0]
}

val decode_RDSVL_R_I__ : (bits(6), bits(5)) -> unit

function decode_RDSVL_R_I__ (imm6, Rd) = {
    let 'SVL = CurrentSVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(Rd);
    let 'imm = SInt(imm6);
    match SVL {
      128 => {
          execute_RDSVL_R_I__(128, d, imm)
      },
      256 => {
          execute_RDSVL_R_I__(256, d, imm)
      },
      512 => {
          execute_RDSVL_R_I__(512, d, imm)
      },
      1024 => {
          execute_RDSVL_R_I__(1024, d, imm)
      },
      2048 => {
          execute_RDSVL_R_I__(2048, d, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2727) = {
    SEE = 2727;
    let imm6 = Slice(__opcode, 5, 6);
    let Rd = Slice(__opcode, 0, 5);
    decode_RDSVL_R_I__(imm6, Rd)
}

val execute_ADDSPL_R_RI__ : forall 'SVL 'd 'imm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('SVL)).
  (int('SVL), int('d), int('imm), int('n)) -> unit

function execute_ADDSPL_R_RI__ (SVL, d, imm, n) = {
    CheckSMEEnabled();
    let 'SVL = SVL;
    let 'len = imm * DIV(SVL, 64);
    let operand1 : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
    let result : bits(64) = operand1 + len;
    if d == 31 then {
        SP_set() = result
    } else {
        X_set(d, 64) = result
    }
}

val decode_ADDSPL_R_RI__ : (bits(5), bits(6), bits(5)) -> unit

function decode_ADDSPL_R_RI__ (Rn, imm6, Rd) = {
    let 'SVL = CurrentSVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'd = UInt(Rd);
    let 'imm = SInt(imm6);
    match SVL {
      128 => {
          execute_ADDSPL_R_RI__(128, d, imm, n)
      },
      256 => {
          execute_ADDSPL_R_RI__(256, d, imm, n)
      },
      512 => {
          execute_ADDSPL_R_RI__(512, d, imm, n)
      },
      1024 => {
          execute_ADDSPL_R_RI__(1024, d, imm, n)
      },
      2048 => {
          execute_ADDSPL_R_RI__(2048, d, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2728) = {
    SEE = 2728;
    let Rn = Slice(__opcode, 16, 5);
    let imm6 = Slice(__opcode, 5, 6);
    let Rd = Slice(__opcode, 0, 5);
    decode_ADDSPL_R_RI__(Rn, imm6, Rd)
}

val execute_ADDSVL_R_RI__ : forall 'SVL 'd 'imm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('SVL)).
  (int('SVL), int('d), int('imm), int('n)) -> unit

function execute_ADDSVL_R_RI__ (SVL, d, imm, n) = {
    CheckSMEEnabled();
    let 'SVL = SVL;
    let 'len = imm * DIV(SVL, 8);
    let operand1 : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
    let result : bits(64) = operand1 + len;
    if d == 31 then {
        SP_set() = result
    } else {
        X_set(d, 64) = result
    }
}

val decode_ADDSVL_R_RI__ : (bits(5), bits(6), bits(5)) -> unit

function decode_ADDSVL_R_RI__ (Rn, imm6, Rd) = {
    let 'SVL = CurrentSVL_read();
    if not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'd = UInt(Rd);
    let 'imm = SInt(imm6);
    match SVL {
      128 => {
          execute_ADDSVL_R_RI__(128, d, imm, n)
      },
      256 => {
          execute_ADDSVL_R_RI__(256, d, imm, n)
      },
      512 => {
          execute_ADDSVL_R_RI__(512, d, imm, n)
      },
      1024 => {
          execute_ADDSVL_R_RI__(1024, d, imm, n)
      },
      2048 => {
          execute_ADDSVL_R_RI__(2048, d, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2729) = {
    SEE = 2729;
    let Rn = Slice(__opcode, 16, 5);
    let imm6 = Slice(__opcode, 5, 6);
    let Rd = Slice(__opcode, 0, 5);
    decode_ADDSVL_R_RI__(Rn, imm6, Rd)
}

val execute_ZERO_ZA1_RI_2 : forall 'VL 'ngrp 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'ngrp == 2 & is_VL('VL)).
  (int('VL), int('ngrp), int('offset), int('v)) -> unit

function execute_ZERO_ZA1_RI_2 (VL, ngrp, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = Zeros(VL)
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA1_RI_2 : (bits(2), bits(3)) -> unit

function decode_ZERO_ZA1_RI_2 (Rv, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'ngrp = 2;
    match VL {
      128 => {
          execute_ZERO_ZA1_RI_2(128, ngrp, offset, v)
      },
      256 => {
          execute_ZERO_ZA1_RI_2(256, ngrp, offset, v)
      },
      512 => {
          execute_ZERO_ZA1_RI_2(512, ngrp, offset, v)
      },
      1024 => {
          execute_ZERO_ZA1_RI_2(1024, ngrp, offset, v)
      },
      2048 => {
          execute_ZERO_ZA1_RI_2(2048, ngrp, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2730) = {
    SEE = 2730;
    let Rv = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 0, 3);
    decode_ZERO_ZA1_RI_2(Rv, off3)
}

val execute_ZERO_ZA1_RI_4 : forall 'VL 'ngrp 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'ngrp == 4 & is_VL('VL)).
  (int('VL), int('ngrp), int('offset), int('v)) -> unit

function execute_ZERO_ZA1_RI_4 (VL, ngrp, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = Zeros(VL)
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA1_RI_4 : (bits(2), bits(3)) -> unit

function decode_ZERO_ZA1_RI_4 (Rv, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'ngrp = 4;
    match VL {
      128 => {
          execute_ZERO_ZA1_RI_4(128, ngrp, offset, v)
      },
      256 => {
          execute_ZERO_ZA1_RI_4(256, ngrp, offset, v)
      },
      512 => {
          execute_ZERO_ZA1_RI_4(512, ngrp, offset, v)
      },
      1024 => {
          execute_ZERO_ZA1_RI_4(1024, ngrp, offset, v)
      },
      2048 => {
          execute_ZERO_ZA1_RI_4(2048, ngrp, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2731) = {
    SEE = 2731;
    let Rv = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 0, 3);
    decode_ZERO_ZA1_RI_4(Rv, off3)
}

val execute_ZERO_ZA2_RI_1 : forall 'VL 'ngrp 'nvec 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nvec == 2 & 'ngrp == 1 & is_VL('VL)).
  (int('VL), int('ngrp), int('nvec), int('offset), int('v)) -> unit

function execute_ZERO_ZA2_RI_1 (VL, ngrp, nvec, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    vec : int = vec - MOD(vec, nvec);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              foreach (i from 0 to (nvec - 1) by 1 in inc) {
                  ZAvector_set(vec + i, VL) = Zeros(VL)
              }
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA2_RI_1 : (bits(2), bits(3)) -> unit

function decode_ZERO_ZA2_RI_1 (Rv, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3 @ 0b0);
    let 'ngrp = 1;
    let 'nvec = 2;
    match VL {
      128 => {
          execute_ZERO_ZA2_RI_1(128, ngrp, nvec, offset, v)
      },
      256 => {
          execute_ZERO_ZA2_RI_1(256, ngrp, nvec, offset, v)
      },
      512 => {
          execute_ZERO_ZA2_RI_1(512, ngrp, nvec, offset, v)
      },
      1024 => {
          execute_ZERO_ZA2_RI_1(1024, ngrp, nvec, offset, v)
      },
      2048 => {
          execute_ZERO_ZA2_RI_1(2048, ngrp, nvec, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2732) = {
    SEE = 2732;
    let Rv = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 0, 3);
    decode_ZERO_ZA2_RI_1(Rv, off3)
}

val execute_ZERO_ZA2_RI_2 : forall 'VL 'ngrp 'nvec 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nvec == 2 & 'ngrp == 2 & is_VL('VL)).
  (int('VL), int('ngrp), int('nvec), int('offset), int('v)) -> unit

function execute_ZERO_ZA2_RI_2 (VL, ngrp, nvec, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    vec : int = vec - MOD(vec, nvec);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              foreach (i from 0 to (nvec - 1) by 1 in inc) {
                  ZAvector_set(vec + i, VL) = Zeros(VL)
              }
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA2_RI_2 : (bits(2), bits(2)) -> unit

function decode_ZERO_ZA2_RI_2 (Rv, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off2 @ 0b0);
    let 'ngrp = 2;
    let 'nvec = 2;
    match VL {
      128 => {
          execute_ZERO_ZA2_RI_2(128, ngrp, nvec, offset, v)
      },
      256 => {
          execute_ZERO_ZA2_RI_2(256, ngrp, nvec, offset, v)
      },
      512 => {
          execute_ZERO_ZA2_RI_2(512, ngrp, nvec, offset, v)
      },
      1024 => {
          execute_ZERO_ZA2_RI_2(1024, ngrp, nvec, offset, v)
      },
      2048 => {
          execute_ZERO_ZA2_RI_2(2048, ngrp, nvec, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2733) = {
    SEE = 2733;
    let Rv = Slice(__opcode, 13, 2);
    let off2 = Slice(__opcode, 0, 2);
    decode_ZERO_ZA2_RI_2(Rv, off2)
}

val execute_ZERO_ZA2_RI_4 : forall 'VL 'ngrp 'nvec 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nvec == 2 & 'ngrp == 4 & is_VL('VL)).
  (int('VL), int('ngrp), int('nvec), int('offset), int('v)) -> unit

function execute_ZERO_ZA2_RI_4 (VL, ngrp, nvec, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    vec : int = vec - MOD(vec, nvec);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              foreach (i from 0 to (nvec - 1) by 1 in inc) {
                  ZAvector_set(vec + i, VL) = Zeros(VL)
              }
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA2_RI_4 : (bits(2), bits(2)) -> unit

function decode_ZERO_ZA2_RI_4 (Rv, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off2 @ 0b0);
    let 'ngrp = 4;
    let 'nvec = 2;
    match VL {
      128 => {
          execute_ZERO_ZA2_RI_4(128, ngrp, nvec, offset, v)
      },
      256 => {
          execute_ZERO_ZA2_RI_4(256, ngrp, nvec, offset, v)
      },
      512 => {
          execute_ZERO_ZA2_RI_4(512, ngrp, nvec, offset, v)
      },
      1024 => {
          execute_ZERO_ZA2_RI_4(1024, ngrp, nvec, offset, v)
      },
      2048 => {
          execute_ZERO_ZA2_RI_4(2048, ngrp, nvec, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2734) = {
    SEE = 2734;
    let Rv = Slice(__opcode, 13, 2);
    let off2 = Slice(__opcode, 0, 2);
    decode_ZERO_ZA2_RI_4(Rv, off2)
}

val execute_ZERO_ZA4_RI_1 : forall 'VL 'ngrp 'nvec 'offset 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'offset & 'offset <= 15 & 'nvec == 4 & 'ngrp == 1 & is_VL('VL)).
  (int('VL), int('ngrp), int('nvec), int('offset), int('v)) -> unit

function execute_ZERO_ZA4_RI_1 (VL, ngrp, nvec, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    vec : int = vec - MOD(vec, nvec);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              foreach (i from 0 to (nvec - 1) by 1 in inc) {
                  ZAvector_set(vec + i, VL) = Zeros(VL)
              }
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA4_RI_1 : (bits(2), bits(2)) -> unit

function decode_ZERO_ZA4_RI_1 (Rv, off2) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off2 @ 0b00);
    let 'ngrp = 1;
    let 'nvec = 4;
    match VL {
      128 => {
          execute_ZERO_ZA4_RI_1(128, ngrp, nvec, offset, v)
      },
      256 => {
          execute_ZERO_ZA4_RI_1(256, ngrp, nvec, offset, v)
      },
      512 => {
          execute_ZERO_ZA4_RI_1(512, ngrp, nvec, offset, v)
      },
      1024 => {
          execute_ZERO_ZA4_RI_1(1024, ngrp, nvec, offset, v)
      },
      2048 => {
          execute_ZERO_ZA4_RI_1(2048, ngrp, nvec, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _] as __opcode)) if SEE < 2735) = {
    SEE = 2735;
    let Rv = Slice(__opcode, 13, 2);
    let off2 = Slice(__opcode, 0, 2);
    decode_ZERO_ZA4_RI_1(Rv, off2)
}

val execute_ZERO_ZA4_RI_2 : forall 'VL 'ngrp 'nvec 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nvec == 4 & 'ngrp == 2 & is_VL('VL)).
  (int('VL), int('ngrp), int('nvec), int('offset), int('v)) -> unit

function execute_ZERO_ZA4_RI_2 (VL, ngrp, nvec, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    vec : int = vec - MOD(vec, nvec);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              foreach (i from 0 to (nvec - 1) by 1 in inc) {
                  ZAvector_set(vec + i, VL) = Zeros(VL)
              }
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA4_RI_2 : (bits(2), bits(1)) -> unit

function decode_ZERO_ZA4_RI_2 (Rv, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(o1 @ 0b00);
    let 'ngrp = 2;
    let 'nvec = 4;
    match VL {
      128 => {
          execute_ZERO_ZA4_RI_2(128, ngrp, nvec, offset, v)
      },
      256 => {
          execute_ZERO_ZA4_RI_2(256, ngrp, nvec, offset, v)
      },
      512 => {
          execute_ZERO_ZA4_RI_2(512, ngrp, nvec, offset, v)
      },
      1024 => {
          execute_ZERO_ZA4_RI_2(1024, ngrp, nvec, offset, v)
      },
      2048 => {
          execute_ZERO_ZA4_RI_2(2048, ngrp, nvec, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2736) = {
    SEE = 2736;
    let Rv = Slice(__opcode, 13, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_ZERO_ZA4_RI_2(Rv, o1)
}

val execute_ZERO_ZA4_RI_4 : forall 'VL 'ngrp 'nvec 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nvec == 4 & 'ngrp == 4 & is_VL('VL)).
  (int('VL), int('ngrp), int('nvec), int('offset), int('v)) -> unit

function execute_ZERO_ZA4_RI_4 (VL, ngrp, nvec, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, ngrp);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    vec : int = vec - MOD(vec, nvec);
    foreach (r from 0 to (ngrp - 1) by 1 in inc) {
        let 'vec = vec in
          {
              foreach (i from 0 to (nvec - 1) by 1 in inc) {
                  ZAvector_set(vec + i, VL) = Zeros(VL)
              }
          };
        vec = vec + vstride
    }
}

val decode_ZERO_ZA4_RI_4 : (bits(2), bits(1)) -> unit

function decode_ZERO_ZA4_RI_4 (Rv, o1) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(o1 @ 0b00);
    let 'ngrp = 4;
    let 'nvec = 4;
    match VL {
      128 => {
          execute_ZERO_ZA4_RI_4(128, ngrp, nvec, offset, v)
      },
      256 => {
          execute_ZERO_ZA4_RI_4(256, ngrp, nvec, offset, v)
      },
      512 => {
          execute_ZERO_ZA4_RI_4(512, ngrp, nvec, offset, v)
      },
      1024 => {
          execute_ZERO_ZA4_RI_4(1024, ngrp, nvec, offset, v)
      },
      2048 => {
          execute_ZERO_ZA4_RI_4(2048, ngrp, nvec, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _] as __opcode)) if SEE < 2737) = {
    SEE = 2737;
    let Rv = Slice(__opcode, 13, 2);
    let o1 = Slice(__opcode, 0, 1);
    decode_ZERO_ZA4_RI_4(Rv, o1)
}

val execute_LUTI2_MZ2_ZTZ_8 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 'isize == 2 & 'imm in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 'dstride == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI2_MZ2_ZTZ_8 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI2_MZ2_ZTZ_8 : (bits(3), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_LUTI2_MZ2_ZTZ_8 (i3, size, Zn, D, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b10 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 2;
    let 'n = UInt(Zn);
    let 'dstride = 8;
    let 'd = UInt((D @ 0b0) @ Zd);
    let 'imm = UInt(i3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LUTI2_MZ2_ZTZ_8(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI2_MZ2_ZTZ_8(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI2_MZ2_ZTZ_8(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI2_MZ2_ZTZ_8(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI2_MZ2_ZTZ_8(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2738) = {
    SEE = 2738;
    let i3 = Slice(__opcode, 15, 3);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let D = Slice(__opcode, 4, 1);
    let Zd = Slice(__opcode, 0, 3);
    decode_LUTI2_MZ2_ZTZ_8(i3, size, Zn, D, Zd)
}

val execute_LUTI4_MZ2_ZTZ_8 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 'isize == 4 & 'imm in {0, 1, 2, 3} & 'esize in {8, 16, 32, 64} & 'dstride == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI4_MZ2_ZTZ_8 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI4_MZ2_ZTZ_8 : (bits(2), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_LUTI4_MZ2_ZTZ_8 (i2, size, Zn, D, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b10 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 4;
    let 'n = UInt(Zn);
    let 'dstride = 8;
    let 'd = UInt((D @ 0b0) @ Zd);
    let 'imm = UInt(i2);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LUTI4_MZ2_ZTZ_8(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI4_MZ2_ZTZ_8(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI4_MZ2_ZTZ_8(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI4_MZ2_ZTZ_8(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI4_MZ2_ZTZ_8(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, bitone, _, _, bitzero, bitzero, _, _, _, _, _, _, bitzero, _, _, _] as __opcode)) if SEE < 2739) = {
    SEE = 2739;
    let i2 = Slice(__opcode, 15, 2);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let D = Slice(__opcode, 4, 1);
    let Zd = Slice(__opcode, 0, 3);
    decode_LUTI4_MZ2_ZTZ_8(i2, size, Zn, D, Zd)
}

val execute_LUTI2_MZ4_ZTZ_4 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 'isize == 2 & 'imm in {0, 1, 2, 3} & 'esize in {8, 16, 32, 64} & 'dstride == 4 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI2_MZ4_ZTZ_4 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI2_MZ4_ZTZ_4 : (bits(2), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_LUTI2_MZ4_ZTZ_4 (i2, size, Zn, D, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b10 | size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 2;
    let 'n = UInt(Zn);
    let 'dstride = 4;
    let 'd = UInt((D @ 0b00) @ Zd);
    let 'imm = UInt(i2);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LUTI2_MZ4_ZTZ_4(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI2_MZ4_ZTZ_4(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI2_MZ4_ZTZ_4(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI2_MZ4_ZTZ_4(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI2_MZ4_ZTZ_4(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, bitone, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2740) = {
    SEE = 2740;
    let i2 = Slice(__opcode, 16, 2);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let D = Slice(__opcode, 4, 1);
    let Zd = Slice(__opcode, 0, 2);
    decode_LUTI2_MZ4_ZTZ_4(i2, size, Zn, D, Zd)
}

val execute_LUTI4_MZ4_ZTZ_4 : forall 'VL 'd 'dstride 'esize 'imm 'isize 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 'isize == 4 & 'imm in {0, 1} & 'esize in {8, 16, 32, 64} & 'dstride == 4 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('dstride), int('esize), int('imm), int('isize), int('n), int('nreg)) -> unit

function execute_LUTI4_MZ4_ZTZ_4 (VL, d__arg, dstride, esize, imm, isize, n, nreg) = {
    d : int = d__arg;
    CheckStreamingSVEEnabled();
    CheckSMEZT0Enabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'segments = DIV(esize, isize * nreg);
    let 'segment = MOD(imm, segments);
    let indexes : bits('VL) = Z_read(n, VL);
    let table : bits(512) = ZT0_read(512);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let 'base = (segment * nreg + r) * elements;
        result : bits('VL) = undefined;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'index = UInt(Elem_read(indexes, base + e, isize));
            assert(constraint('esize - 1 < 32));
            result = Elem_set(result, e, esize, Elem_read(table, index, 32)[esize - 1 .. 0])
        };
        Z_set(d, VL) = result;
        d = d + dstride
    }
}

val decode_LUTI4_MZ4_ZTZ_4 : (bits(1), bits(2), bits(5), bits(1), bits(2)) -> unit

function decode_LUTI4_MZ4_ZTZ_4 (i1, size, Zn, D, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size != 0b01 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'isize = 4;
    let 'n = UInt(Zn);
    let 'dstride = 4;
    let 'd = UInt((D @ 0b00) @ Zd);
    let 'imm = UInt(i1);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LUTI4_MZ4_ZTZ_4(128, d, dstride, esize, imm, isize, n, nreg)
      },
      256 => {
          execute_LUTI4_MZ4_ZTZ_4(256, d, dstride, esize, imm, isize, n, nreg)
      },
      512 => {
          execute_LUTI4_MZ4_ZTZ_4(512, d, dstride, esize, imm, isize, n, nreg)
      },
      1024 => {
          execute_LUTI4_MZ4_ZTZ_4(1024, d, dstride, esize, imm, isize, n, nreg)
      },
      2048 => {
          execute_LUTI4_MZ4_ZTZ_4(2048, d, dstride, esize, imm, isize, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, bitone, bitzero, _, _, bitzero, bitzero, _, _, _, _, _, _, bitzero, bitzero, _, _] as __opcode)) if SEE < 2741) = {
    SEE = 2741;
    let i1 = Slice(__opcode, 16, 1);
    let size = Slice(__opcode, 12, 2);
    let Zn = Slice(__opcode, 5, 5);
    let D = Slice(__opcode, 4, 1);
    let Zd = Slice(__opcode, 0, 2);
    decode_LUTI4_MZ4_ZTZ_4(i1, size, Zn, D, Zd)
}

val execute_MOVAZ_Z_RZA_B : forall 'VL 'd 'esize 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'n == 0 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_Z_RZA_B (VL, d, esize, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    ZAslice_set(n, esize, vertical, slice_name, VL) = Zeros(VL);
    Z_set(d, VL) = operand
}

val decode_MOVAZ_Z_RZA_B : (bits(2), bits(1), bits(1), bits(2), bits(4), bits(5)) -> unit

function decode_MOVAZ_Z_RZA_B (size, Q, V, Rs, off4, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'n = 0;
    let 'offset = UInt(off4);
    let 'esize = 8;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_Z_RZA_B(128, d, esize, n, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_Z_RZA_B(256, d, esize, n, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_Z_RZA_B(512, d, esize, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_Z_RZA_B(1024, d, esize, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_Z_RZA_B(2048, d, esize, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2742) = {
    SEE = 2742;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let off4 = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVAZ_Z_RZA_B(size, Q, V, Rs, off4, Zd)
}

val execute_MOVAZ_Z_RZA_H : forall 'VL 'd 'esize 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'n in {0, 1} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_Z_RZA_H (VL, d, esize, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    ZAslice_set(n, esize, vertical, slice_name, VL) = Zeros(VL);
    Z_set(d, VL) = operand
}

val decode_MOVAZ_Z_RZA_H : (bits(2), bits(1), bits(1), bits(2), bits(1), bits(3), bits(5)) -> unit

function decode_MOVAZ_Z_RZA_H (size, Q, V, Rs, ZAn, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = UInt(off3);
    let 'esize = 16;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_Z_RZA_H(128, d, esize, n, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_Z_RZA_H(256, d, esize, n, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_Z_RZA_H(512, d, esize, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_Z_RZA_H(1024, d, esize, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_Z_RZA_H(2048, d, esize, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2743) = {
    SEE = 2743;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 8, 1);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVAZ_Z_RZA_H(size, Q, V, Rs, ZAn, off3, Zd)
}

val execute_MOVAZ_Z_RZA_W : forall 'VL 'd 'esize 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 'n in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_Z_RZA_W (VL, d, esize, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    ZAslice_set(n, esize, vertical, slice_name, VL) = Zeros(VL);
    Z_set(d, VL) = operand
}

val decode_MOVAZ_Z_RZA_W : (bits(2), bits(1), bits(1), bits(2), bits(2), bits(2), bits(5)) -> unit

function decode_MOVAZ_Z_RZA_W (size, Q, V, Rs, ZAn, off2, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = UInt(off2);
    let 'esize = 32;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_Z_RZA_W(128, d, esize, n, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_Z_RZA_W(256, d, esize, n, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_Z_RZA_W(512, d, esize, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_Z_RZA_W(1024, d, esize, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_Z_RZA_W(2048, d, esize, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2744) = {
    SEE = 2744;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 7, 2);
    let off2 = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVAZ_Z_RZA_W(size, Q, V, Rs, ZAn, off2, Zd)
}

val execute_MOVAZ_Z_RZA_D : forall 'VL 'd 'esize 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1} & 'n in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_Z_RZA_D (VL, d, esize, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    ZAslice_set(n, esize, vertical, slice_name, VL) = Zeros(VL);
    Z_set(d, VL) = operand
}

val decode_MOVAZ_Z_RZA_D : (bits(2), bits(1), bits(1), bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_MOVAZ_Z_RZA_D (size, Q, V, Rs, ZAn, o1, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = UInt(o1);
    let 'esize = 64;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_Z_RZA_D(128, d, esize, n, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_Z_RZA_D(256, d, esize, n, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_Z_RZA_D(512, d, esize, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_Z_RZA_D(1024, d, esize, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_Z_RZA_D(2048, d, esize, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2745) = {
    SEE = 2745;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 6, 3);
    let o1 = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVAZ_Z_RZA_D(size, Q, V, Rs, ZAn, o1, Zd)
}

val execute_MOVAZ_Z_RZA_Q : forall 'VL 'd 'esize 'n 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 0 <= 'n & 'n <= 15 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_Z_RZA_Q (VL, d, esize, n, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) + offset, dim);
    let operand : bits('VL) = ZAslice_read(n, esize, vertical, slice_name, VL);
    ZAslice_set(n, esize, vertical, slice_name, VL) = Zeros(VL);
    Z_set(d, VL) = operand
}

val decode_MOVAZ_Z_RZA_Q : (bits(2), bits(1), bits(1), bits(2), bits(4), bits(5)) -> unit

function decode_MOVAZ_Z_RZA_Q (size, Q, V, Rs, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let 'esize = 128;
    let 'd = UInt(Zd);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_Z_RZA_Q(128, d, esize, n, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_Z_RZA_Q(256, d, esize, n, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_Z_RZA_Q(512, d, esize, n, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_Z_RZA_Q(1024, d, esize, n, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_Z_RZA_Q(2048, d, esize, n, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2746) = {
    SEE = 2746;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 16, 1);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVAZ_Z_RZA_Q(size, Q, V, Rs, ZAn, Zd)
}

val execute_MOVAZ_MZ2_ZA_B1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 2 & 'n == 0 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ2_ZA_B1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ2_ZA_B1 : (bits(2), bits(1), bits(2), bits(3), bits(4)) -> unit

function decode_MOVAZ_MZ2_ZA_B1 (size, V, Rs, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 8;
    let 'd = UInt(Zd @ 0b0);
    let 'n = 0;
    let 'offset = UInt(off3 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ2_ZA_B1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ2_ZA_B1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ2_ZA_B1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ2_ZA_B1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ2_ZA_B1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2747) = {
    SEE = 2747;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVAZ_MZ2_ZA_B1(size, V, Rs, off3, Zd)
}

val execute_MOVAZ_MZ2_ZA_H1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 'n in {0, 1} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ2_ZA_H1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ2_ZA_H1 : (bits(2), bits(1), bits(2), bits(1), bits(2), bits(4)) -> unit

function decode_MOVAZ_MZ2_ZA_H1 (size, V, Rs, ZAn, off2, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 16;
    let 'd = UInt(Zd @ 0b0);
    let 'n = UInt(ZAn);
    let 'offset = UInt(off2 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ2_ZA_H1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ2_ZA_H1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ2_ZA_H1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ2_ZA_H1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ2_ZA_H1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2748) = {
    SEE = 2748;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 7, 1);
    let off2 = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVAZ_MZ2_ZA_H1(size, V, Rs, ZAn, off2, Zd)
}

val execute_MOVAZ_MZ2_ZA_W1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3} & 'nreg == 2 & 'n in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ2_ZA_W1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ2_ZA_W1 : (bits(2), bits(1), bits(2), bits(2), bits(1), bits(4)) -> unit

function decode_MOVAZ_MZ2_ZA_W1 (size, V, Rs, ZAn, o1, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 32;
    let 'd = UInt(Zd @ 0b0);
    let 'n = UInt(ZAn);
    let 'offset = UInt(o1 @ 0b0);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ2_ZA_W1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ2_ZA_W1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ2_ZA_W1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ2_ZA_W1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ2_ZA_W1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2749) = {
    SEE = 2749;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 6, 2);
    let o1 = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVAZ_MZ2_ZA_W1(size, V, Rs, ZAn, o1, Zd)
}

val execute_MOVAZ_MZ2_ZA_D1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 2 & 'n in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ2_ZA_D1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ2_ZA_D1 : (bits(2), bits(1), bits(2), bits(3), bits(4)) -> unit

function decode_MOVAZ_MZ2_ZA_D1 (size, V, Rs, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 2;
    let 'esize = 64;
    let 'd = UInt(Zd @ 0b0);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ2_ZA_D1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ2_ZA_D1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ2_ZA_D1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ2_ZA_D1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ2_ZA_D1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2750) = {
    SEE = 2750;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVAZ_MZ2_ZA_D1(size, V, Rs, ZAn, Zd)
}

val execute_MOVAZ_MZ4_ZA_B1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 0 <= 'offset & 'offset <= 15 & 'nreg == 4 & 'n == 0 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ4_ZA_B1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ4_ZA_B1 : (bits(2), bits(1), bits(2), bits(2), bits(3)) -> unit

function decode_MOVAZ_MZ4_ZA_B1 (size, V, Rs, off2, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 8;
    let 'd = UInt(Zd @ 0b00);
    let 'n = 0;
    let 'offset = UInt(off2 @ 0b00);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ4_ZA_B1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ4_ZA_B1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ4_ZA_B1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ4_ZA_B1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ4_ZA_B1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2751) = {
    SEE = 2751;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let off2 = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVAZ_MZ4_ZA_B1(size, V, Rs, off2, Zd)
}

val execute_MOVAZ_MZ4_ZA_H1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 'n in {0, 1} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ4_ZA_H1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ4_ZA_H1 : (bits(2), bits(1), bits(2), bits(1), bits(1), bits(3)) -> unit

function decode_MOVAZ_MZ4_ZA_H1 (size, V, Rs, ZAn, o1, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 16;
    let 'd = UInt(Zd @ 0b00);
    let 'n = UInt(ZAn);
    let 'offset = UInt(o1 @ 0b00);
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ4_ZA_H1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ4_ZA_H1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ4_ZA_H1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ4_ZA_H1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ4_ZA_H1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2752) = {
    SEE = 2752;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 6, 1);
    let o1 = Slice(__opcode, 5, 1);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVAZ_MZ4_ZA_H1(size, V, Rs, ZAn, o1, Zd)
}

val execute_MOVAZ_MZ4_ZA_W1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 4 & 'n in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ4_ZA_W1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ4_ZA_W1 : (bits(2), bits(1), bits(2), bits(2), bits(3)) -> unit

function decode_MOVAZ_MZ4_ZA_W1 (size, V, Rs, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 32;
    let 'd = UInt(Zd @ 0b00);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ4_ZA_W1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ4_ZA_W1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ4_ZA_W1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ4_ZA_W1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ4_ZA_W1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2753) = {
    SEE = 2753;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 5, 2);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVAZ_MZ4_ZA_W1(size, V, Rs, ZAn, Zd)
}

val execute_MOVAZ_MZ4_ZA_D1 : forall 'VL 'd 'esize 'n 'nreg 'offset 's ('vertical : Bool),
  (0 <= 's & 's <= 31 & 'offset == 0 & 'nreg == 4 & 'n in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('nreg), int('offset), int('s), bool('vertical)) -> unit

function execute_MOVAZ_MZ4_ZA_D1 (VL, d, esize, n, nreg, offset, s, vertical) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    if (nreg == 4 & esize == 64) & VL == 128 then {
        throw(Error_Undefined())
    };
    let 'slices = DIV(VL, esize);
    let index : bits(32) = X_read(s, 32);
    let 'slice_name = MOD(UInt(index) - MOD(UInt(index), nreg) + offset, slices);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = ZAslice_read(n, esize, vertical, slice_name + r, VL);
        ZAslice_set(n, esize, vertical, slice_name + r, VL) = Zeros(VL);
        Z_set(d + r, VL) = result
    }
}

val decode_MOVAZ_MZ4_ZA_D1 : (bits(2), bits(1), bits(2), bits(3), bits(3)) -> unit

function decode_MOVAZ_MZ4_ZA_D1 (size, V, Rs, ZAn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 's = UInt(0b011 @ Rs);
    let 'nreg = 4;
    let 'esize = 64;
    let 'd = UInt(Zd @ 0b00);
    let 'n = UInt(ZAn);
    let 'offset = 0;
    let vertical : bool = V == 0b1;
    match VL {
      128 => {
          execute_MOVAZ_MZ4_ZA_D1(128, d, esize, n, nreg, offset, s, vertical)
      },
      256 => {
          execute_MOVAZ_MZ4_ZA_D1(256, d, esize, n, nreg, offset, s, vertical)
      },
      512 => {
          execute_MOVAZ_MZ4_ZA_D1(512, d, esize, n, nreg, offset, s, vertical)
      },
      1024 => {
          execute_MOVAZ_MZ4_ZA_D1(1024, d, esize, n, nreg, offset, s, vertical)
      },
      2048 => {
          execute_MOVAZ_MZ4_ZA_D1(2048, d, esize, n, nreg, offset, s, vertical)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2754) = {
    SEE = 2754;
    let size = Slice(__opcode, 22, 2);
    let V = Slice(__opcode, 15, 1);
    let Rs = Slice(__opcode, 13, 2);
    let ZAn = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVAZ_MZ4_ZA_D1(size, V, Rs, ZAn, Zd)
}

val execute_MOVAZ_MZ_ZA2_1 : forall 'VL 'd 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('nreg), int('offset), int('v)) -> unit

function execute_MOVAZ_MZ_ZA2_1 (VL, d, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = Zeros(VL)
          };
        Z_set(d + r, VL) = result;
        vec = vec + vstride
    }
}

val decode_MOVAZ_MZ_ZA2_1 : (bits(2), bits(3), bits(4)) -> unit

function decode_MOVAZ_MZ_ZA2_1 (Rv, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_MOVAZ_MZ_ZA2_1(128, d, nreg, offset, v)
      },
      256 => {
          execute_MOVAZ_MZ_ZA2_1(256, d, nreg, offset, v)
      },
      512 => {
          execute_MOVAZ_MZ_ZA2_1(512, d, nreg, offset, v)
      },
      1024 => {
          execute_MOVAZ_MZ_ZA2_1(1024, d, nreg, offset, v)
      },
      2048 => {
          execute_MOVAZ_MZ_ZA2_1(2048, d, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2755) = {
    SEE = 2755;
    let Rv = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 1, 4);
    decode_MOVAZ_MZ_ZA2_1(Rv, off3, Zd)
}

val execute_MOVAZ_MZ_ZA4_1 : forall 'VL 'd 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('nreg), int('offset), int('v)) -> unit

function execute_MOVAZ_MZ_ZA4_1 (VL, d, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let result : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = Zeros(VL)
          };
        Z_set(d + r, VL) = result;
        vec = vec + vstride
    }
}

val decode_MOVAZ_MZ_ZA4_1 : (bits(2), bits(3), bits(3)) -> unit

function decode_MOVAZ_MZ_ZA4_1 (Rv, off3, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'offset = UInt(off3);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_MOVAZ_MZ_ZA4_1(128, d, nreg, offset, v)
      },
      256 => {
          execute_MOVAZ_MZ_ZA4_1(256, d, nreg, offset, v)
      },
      512 => {
          execute_MOVAZ_MZ_ZA4_1(512, d, nreg, offset, v)
      },
      1024 => {
          execute_MOVAZ_MZ_ZA4_1(1024, d, nreg, offset, v)
      },
      2048 => {
          execute_MOVAZ_MZ_ZA4_1(2048, d, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2756) = {
    SEE = 2756;
    let Rv = Slice(__opcode, 13, 2);
    let off3 = Slice(__opcode, 5, 3);
    let Zd = Slice(__opcode, 2, 3);
    decode_MOVAZ_MZ_ZA4_1(Rv, off3, Zd)
}

val execute_FMOPA_ZA_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & 'da in {0, 1} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPA_ZA_PP_ZZ_16 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, row, esize);
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                if sub_op then {
                    element1 = FPNeg(element1)
                };
                result = Elem_set(result, row * dim + col, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_FMOPA_ZA_PP_ZZ_16 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(1)) -> unit

function decode_FMOPA_ZA_PP_ZZ_16 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_FMOPA_ZA_PP_ZZ_16(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_FMOPA_ZA_PP_ZZ_16(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_FMOPA_ZA_PP_ZZ_16(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_FMOPA_ZA_PP_ZZ_16(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_FMOPA_ZA_PP_ZZ_16(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2757) = {
    SEE = 2757;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 1);
    decode_FMOPA_ZA_PP_ZZ_16(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_FMOPS_ZA_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_esize 'esize 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & 'da in {0, 1} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_esize == div('VL, 'esize) * (div('VL, 'esize) * 'esize)).
  (int('VL), int('dim_dim_esize), int('a), int('b), int('da), int('esize), int('m), int('n), bool('sub_op)) -> unit

function execute_FMOPS_ZA_PP_ZZ_16 (VL, dim_dim_esize, a, b, da, esize, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, esize);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_esize) = ZAtile_read(VL, da, esize, dim_dim_esize);
    result : bits('dim_dim_esize) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, row, esize);
            let element2 : bits('esize) = Elem_read(operand2, col, esize);
            let element3 : bits('esize) = Elem_read(operand3, row * dim + col, esize);
            if ActivePredicateElement(mask1, row, esize) & ActivePredicateElement(mask2, col, esize) then {
                if sub_op then {
                    element1 = FPNeg(element1)
                };
                result = Elem_set(result, row * dim + col, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, esize, element3)
            }
        }
    };
    ZAtile_set(VL, da, esize, dim_dim_esize) = result
}

val decode_FMOPS_ZA_PP_ZZ_16 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(1)) -> unit

function decode_FMOPS_ZA_PP_ZZ_16 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_FMOPS_ZA_PP_ZZ_16(128, DIV(128, esize) * DIV(128, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      256 => {
          execute_FMOPS_ZA_PP_ZZ_16(256, DIV(256, esize) * DIV(256, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      512 => {
          execute_FMOPS_ZA_PP_ZZ_16(512, DIV(512, esize) * DIV(512, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      1024 => {
          execute_FMOPS_ZA_PP_ZZ_16(1024, DIV(1024, esize) * DIV(1024, esize) * esize, a, b, da, esize, m, n, sub_op)
      },
      2048 => {
          execute_FMOPS_ZA_PP_ZZ_16(2048, DIV(2048, esize) * DIV(2048, esize) * esize, a, b, da, esize, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2758) = {
    SEE = 2758;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 1);
    decode_FMOPS_ZA_PP_ZZ_16(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_BFMOPA_ZA_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_16 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'da in {0, 1} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_16 == div('VL, 16) * (div('VL, 16) * 16)).
  (int('VL), int('dim_dim_16), int('a), int('b), int('da), int('m), int('n), bool('sub_op)) -> unit

function execute_BFMOPA_ZA_PP_ZZ_16 (VL, dim_dim_16, a, b, da, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, 16);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_16) = ZAtile_read(VL, da, 16, dim_dim_16);
    result : bits('dim_dim_16) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, row, 16);
            let element2 : bits(16) = Elem_read(operand2, col, 16);
            let element3 : bits(16) = Elem_read(operand3, row * dim + col, 16);
            if ActivePredicateElement(mask1, row, 16) & ActivePredicateElement(mask2, col, 16) then {
                if sub_op then {
                    element1 = BFNeg(element1)
                };
                result = Elem_set(result, row * dim + col, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, 16, element3)
            }
        }
    };
    ZAtile_set(VL, da, 16, dim_dim_16) = result
}

val decode_BFMOPA_ZA_PP_ZZ_16 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(1)) -> unit

function decode_BFMOPA_ZA_PP_ZZ_16 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_BFMOPA_ZA_PP_ZZ_16(128, DIV(128, 16) * DIV(128, 16) * 16, a, b, da, m, n, sub_op)
      },
      256 => {
          execute_BFMOPA_ZA_PP_ZZ_16(256, DIV(256, 16) * DIV(256, 16) * 16, a, b, da, m, n, sub_op)
      },
      512 => {
          execute_BFMOPA_ZA_PP_ZZ_16(512, DIV(512, 16) * DIV(512, 16) * 16, a, b, da, m, n, sub_op)
      },
      1024 => {
          execute_BFMOPA_ZA_PP_ZZ_16(1024, DIV(1024, 16) * DIV(1024, 16) * 16, a, b, da, m, n, sub_op)
      },
      2048 => {
          execute_BFMOPA_ZA_PP_ZZ_16(2048, DIV(2048, 16) * DIV(2048, 16) * 16, a, b, da, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2759) = {
    SEE = 2759;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 1);
    decode_BFMOPA_ZA_PP_ZZ_16(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_BFMOPS_ZA_PP_ZZ_16 : forall 'VL 'a 'b 'da 'dim_dim_16 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'da in {0, 1} & 'b in {0, 1, 2, 3, 4, 5, 6, 7} & 'a in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL) & 'dim_dim_16 == div('VL, 16) * (div('VL, 16) * 16)).
  (int('VL), int('dim_dim_16), int('a), int('b), int('da), int('m), int('n), bool('sub_op)) -> unit

function execute_BFMOPS_ZA_PP_ZZ_16 (VL, dim_dim_16, a, b, da, m, n, sub_op) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'dim = DIV(VL, 16);
    let mask1 : bits('PL) = P_read(a, PL);
    let mask2 : bits('PL) = P_read(b, PL);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('dim_dim_16) = ZAtile_read(VL, da, 16, dim_dim_16);
    result : bits('dim_dim_16) = undefined;
    foreach (row from 0 to (dim - 1) by 1 in inc) {
        foreach (col from 0 to (dim - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, row, 16);
            let element2 : bits(16) = Elem_read(operand2, col, 16);
            let element3 : bits(16) = Elem_read(operand3, row * dim + col, 16);
            if ActivePredicateElement(mask1, row, 16) & ActivePredicateElement(mask2, col, 16) then {
                if sub_op then {
                    element1 = BFNeg(element1)
                };
                result = Elem_set(result, row * dim + col, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
            } else {
                result = Elem_set(result, row * dim + col, 16, element3)
            }
        }
    };
    ZAtile_set(VL, da, 16, dim_dim_16) = result
}

val decode_BFMOPS_ZA_PP_ZZ_16 : (bits(5), bits(3), bits(3), bits(5), bits(1), bits(1)) -> unit

function decode_BFMOPS_ZA_PP_ZZ_16 (Zm, Pm, Pn, Zn, S, ZAda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'a = UInt(Pn);
    let 'b = UInt(Pm);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(ZAda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_BFMOPS_ZA_PP_ZZ_16(128, DIV(128, 16) * DIV(128, 16) * 16, a, b, da, m, n, sub_op)
      },
      256 => {
          execute_BFMOPS_ZA_PP_ZZ_16(256, DIV(256, 16) * DIV(256, 16) * 16, a, b, da, m, n, sub_op)
      },
      512 => {
          execute_BFMOPS_ZA_PP_ZZ_16(512, DIV(512, 16) * DIV(512, 16) * 16, a, b, da, m, n, sub_op)
      },
      1024 => {
          execute_BFMOPS_ZA_PP_ZZ_16(1024, DIV(1024, 16) * DIV(1024, 16) * 16, a, b, da, m, n, sub_op)
      },
      2048 => {
          execute_BFMOPS_ZA_PP_ZZ_16(2048, DIV(2048, 16) * DIV(2048, 16) * 16, a, b, da, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _] as __opcode)) if SEE < 2760) = {
    SEE = 2760;
    let Zm = Slice(__opcode, 16, 5);
    let Pm = Slice(__opcode, 13, 3);
    let Pn = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 4, 1);
    let ZAda = Slice(__opcode, 0, 1);
    decode_BFMOPS_ZA_PP_ZZ_16(Zm, Pm, Pn, Zn, S, ZAda)
}

val execute_FADD_ZA_ZW_2x2_16 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FADD_ZA_ZW_2x2_16 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPAdd_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FADD_ZA_ZW_2x2_16 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FADD_ZA_ZW_2x2_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FADD_ZA_ZW_2x2_16(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FADD_ZA_ZW_2x2_16(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FADD_ZA_ZW_2x2_16(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FADD_ZA_ZW_2x2_16(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FADD_ZA_ZW_2x2_16(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2761) = {
    SEE = 2761;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FADD_ZA_ZW_2x2_16(sz, Rv, Zm, S, off3)
}

val execute_FSUB_ZA_ZW_2x2_16 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FSUB_ZA_ZW_2x2_16 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPSub_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FSUB_ZA_ZW_2x2_16 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FSUB_ZA_ZW_2x2_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FSUB_ZA_ZW_2x2_16(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FSUB_ZA_ZW_2x2_16(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FSUB_ZA_ZW_2x2_16(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FSUB_ZA_ZW_2x2_16(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FSUB_ZA_ZW_2x2_16(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2762) = {
    SEE = 2762;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FSUB_ZA_ZW_2x2_16(sz, Rv, Zm, S, off3)
}

val execute_BFADD_ZA_ZW_2x2_16 : forall 'VL 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_BFADD_ZA_ZW_2x2_16 (VL, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFAdd_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFADD_ZA_ZW_2x2_16 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_BFADD_ZA_ZW_2x2_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFADD_ZA_ZW_2x2_16(128, m, nreg, offset, v)
      },
      256 => {
          execute_BFADD_ZA_ZW_2x2_16(256, m, nreg, offset, v)
      },
      512 => {
          execute_BFADD_ZA_ZW_2x2_16(512, m, nreg, offset, v)
      },
      1024 => {
          execute_BFADD_ZA_ZW_2x2_16(1024, m, nreg, offset, v)
      },
      2048 => {
          execute_BFADD_ZA_ZW_2x2_16(2048, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2763) = {
    SEE = 2763;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFADD_ZA_ZW_2x2_16(sz, Rv, Zm, S, off3)
}

val execute_BFSUB_ZA_ZW_2x2_16 : forall 'VL 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_BFSUB_ZA_ZW_2x2_16 (VL, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFSub_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFSUB_ZA_ZW_2x2_16 : (bits(1), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_BFSUB_ZA_ZW_2x2_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFSUB_ZA_ZW_2x2_16(128, m, nreg, offset, v)
      },
      256 => {
          execute_BFSUB_ZA_ZW_2x2_16(256, m, nreg, offset, v)
      },
      512 => {
          execute_BFSUB_ZA_ZW_2x2_16(512, m, nreg, offset, v)
      },
      1024 => {
          execute_BFSUB_ZA_ZW_2x2_16(1024, m, nreg, offset, v)
      },
      2048 => {
          execute_BFSUB_ZA_ZW_2x2_16(2048, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2764) = {
    SEE = 2764;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFSUB_ZA_ZW_2x2_16(sz, Rv, Zm, S, off3)
}

val execute_FADD_ZA_ZW_4x4_16 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FADD_ZA_ZW_4x4_16 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPAdd_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FADD_ZA_ZW_4x4_16 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FADD_ZA_ZW_4x4_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FADD_ZA_ZW_4x4_16(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FADD_ZA_ZW_4x4_16(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FADD_ZA_ZW_4x4_16(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FADD_ZA_ZW_4x4_16(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FADD_ZA_ZW_4x4_16(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2765) = {
    SEE = 2765;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FADD_ZA_ZW_4x4_16(sz, Rv, Zm, S, off3)
}

val execute_FSUB_ZA_ZW_4x4_16 : forall 'VL 'esize 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_FSUB_ZA_ZW_4x4_16 (VL, esize, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            result = Elem_set(result, e, esize, FPSub_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FSUB_ZA_ZW_4x4_16 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FSUB_ZA_ZW_4x4_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FSUB_ZA_ZW_4x4_16(128, esize, m, nreg, offset, v)
      },
      256 => {
          execute_FSUB_ZA_ZW_4x4_16(256, esize, m, nreg, offset, v)
      },
      512 => {
          execute_FSUB_ZA_ZW_4x4_16(512, esize, m, nreg, offset, v)
      },
      1024 => {
          execute_FSUB_ZA_ZW_4x4_16(1024, esize, m, nreg, offset, v)
      },
      2048 => {
          execute_FSUB_ZA_ZW_4x4_16(2048, esize, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2766) = {
    SEE = 2766;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FSUB_ZA_ZW_4x4_16(sz, Rv, Zm, S, off3)
}

val execute_BFADD_ZA_ZW_4x4_16 : forall 'VL 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_BFADD_ZA_ZW_4x4_16 (VL, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFAdd_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFADD_ZA_ZW_4x4_16 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_BFADD_ZA_ZW_4x4_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFADD_ZA_ZW_4x4_16(128, m, nreg, offset, v)
      },
      256 => {
          execute_BFADD_ZA_ZW_4x4_16(256, m, nreg, offset, v)
      },
      512 => {
          execute_BFADD_ZA_ZW_4x4_16(512, m, nreg, offset, v)
      },
      1024 => {
          execute_BFADD_ZA_ZW_4x4_16(1024, m, nreg, offset, v)
      },
      2048 => {
          execute_BFADD_ZA_ZW_4x4_16(2048, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2767) = {
    SEE = 2767;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFADD_ZA_ZW_4x4_16(sz, Rv, Zm, S, off3)
}

val execute_BFSUB_ZA_ZW_4x4_16 : forall 'VL 'm 'nreg 'offset 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('nreg), int('offset), int('v)) -> unit

function execute_BFSUB_ZA_ZW_4x4_16 (VL, m, nreg, offset, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFSub_ZA(element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFSUB_ZA_ZW_4x4_16 : (bits(1), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_BFSUB_ZA_ZW_4x4_16 (sz, Rv, Zm, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFSUB_ZA_ZW_4x4_16(128, m, nreg, offset, v)
      },
      256 => {
          execute_BFSUB_ZA_ZW_4x4_16(256, m, nreg, offset, v)
      },
      512 => {
          execute_BFSUB_ZA_ZW_4x4_16(512, m, nreg, offset, v)
      },
      1024 => {
          execute_BFSUB_ZA_ZW_4x4_16(1024, m, nreg, offset, v)
      },
      2048 => {
          execute_BFSUB_ZA_ZW_4x4_16(2048, m, nreg, offset, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, bitone, bitone, bitone, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2768) = {
    SEE = 2768;
    let sz = Slice(__opcode, 22, 1);
    let Rv = Slice(__opcode, 13, 2);
    let Zm = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFSUB_ZA_ZW_4x4_16(sz, Rv, Zm, S, off3)
}

val execute_FMLA_ZA_ZZW_2x2_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZW_2x2_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZW_2x2_16 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZW_2x2_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZW_2x2_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZW_2x2_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZW_2x2_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZW_2x2_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZW_2x2_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2769) = {
    SEE = 2769;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZW_2x2_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZW_2x2_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZW_2x2_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZW_2x2_16 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZW_2x2_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZW_2x2_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZW_2x2_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZW_2x2_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZW_2x2_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZW_2x2_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2770) = {
    SEE = 2770;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZW_2x2_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLA_ZA_ZZW_2x2_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLA_ZA_ZZW_2x2_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLA_ZA_ZZW_2x2_16 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_BFMLA_ZA_ZZW_2x2_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLA_ZA_ZZW_2x2_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLA_ZA_ZZW_2x2_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLA_ZA_ZZW_2x2_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLA_ZA_ZZW_2x2_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLA_ZA_ZZW_2x2_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2771) = {
    SEE = 2771;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLA_ZA_ZZW_2x2_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLS_ZA_ZZW_2x2_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLS_ZA_ZZW_2x2_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLS_ZA_ZZW_2x2_16 : (bits(1), bits(4), bits(2), bits(4), bits(1), bits(3)) -> unit

function decode_BFMLS_ZA_ZZW_2x2_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLS_ZA_ZZW_2x2_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLS_ZA_ZZW_2x2_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLS_ZA_ZZW_2x2_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLS_ZA_ZZW_2x2_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLS_ZA_ZZW_2x2_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitzero, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2772) = {
    SEE = 2772;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 17, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLS_ZA_ZZW_2x2_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZV_2x1_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZV_2x1_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZV_2x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZV_2x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZV_2x1_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZV_2x1_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZV_2x1_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZV_2x1_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZV_2x1_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2773) = {
    SEE = 2773;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZV_2x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZV_2x1_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZV_2x1_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZV_2x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZV_2x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZV_2x1_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZV_2x1_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZV_2x1_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZV_2x1_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZV_2x1_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2774) = {
    SEE = 2774;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZV_2x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLA_ZA_ZZV_2x1_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLA_ZA_ZZV_2x1_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLA_ZA_ZZV_2x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLA_ZA_ZZV_2x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLA_ZA_ZZV_2x1_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLA_ZA_ZZV_2x1_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLA_ZA_ZZV_2x1_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLA_ZA_ZZV_2x1_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLA_ZA_ZZV_2x1_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2775) = {
    SEE = 2775;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLA_ZA_ZZV_2x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLS_ZA_ZZV_2x1_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLS_ZA_ZZV_2x1_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLS_ZA_ZZV_2x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLS_ZA_ZZV_2x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLS_ZA_ZZV_2x1_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLS_ZA_ZZV_2x1_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLS_ZA_ZZV_2x1_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLS_ZA_ZZV_2x1_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLS_ZA_ZZV_2x1_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2776) = {
    SEE = 2776;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLS_ZA_ZZV_2x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZW_4x4_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZW_4x4_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZW_4x4_16 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZW_4x4_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZW_4x4_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZW_4x4_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZW_4x4_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZW_4x4_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZW_4x4_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2777) = {
    SEE = 2777;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZW_4x4_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZW_4x4_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZW_4x4_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZW_4x4_16 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZW_4x4_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZW_4x4_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZW_4x4_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZW_4x4_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZW_4x4_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZW_4x4_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2778) = {
    SEE = 2778;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZW_4x4_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLA_ZA_ZZW_4x4_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLA_ZA_ZZW_4x4_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLA_ZA_ZZW_4x4_16 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_BFMLA_ZA_ZZW_4x4_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLA_ZA_ZZW_4x4_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLA_ZA_ZZW_4x4_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLA_ZA_ZZW_4x4_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLA_ZA_ZZW_4x4_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLA_ZA_ZZW_4x4_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2779) = {
    SEE = 2779;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLA_ZA_ZZW_4x4_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLS_ZA_ZZW_4x4_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLS_ZA_ZZW_4x4_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLS_ZA_ZZW_4x4_16 : (bits(1), bits(3), bits(2), bits(3), bits(1), bits(3)) -> unit

function decode_BFMLS_ZA_ZZW_4x4_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLS_ZA_ZZW_4x4_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLS_ZA_ZZW_4x4_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLS_ZA_ZZW_4x4_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLS_ZA_ZZW_4x4_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLS_ZA_ZZW_4x4_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, bitzero, bitone, bitzero, _, _, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _] as __opcode)) if SEE < 2780) = {
    SEE = 2780;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLS_ZA_ZZW_4x4_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZV_4x1_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZV_4x1_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZV_4x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZV_4x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZV_4x1_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZV_4x1_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZV_4x1_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZV_4x1_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZV_4x1_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2781) = {
    SEE = 2781;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZV_4x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLS_ZA_ZZV_4x1_16 : forall 'VL 'esize 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZV_4x1_16 (VL, esize, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZV_4x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZV_4x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZV_4x1_16(128, esize, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZV_4x1_16(256, esize, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZV_4x1_16(512, esize, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZV_4x1_16(1024, esize, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZV_4x1_16(2048, esize, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2782) = {
    SEE = 2782;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZV_4x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLA_ZA_ZZV_4x1_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLA_ZA_ZZV_4x1_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLA_ZA_ZZV_4x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLA_ZA_ZZV_4x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLA_ZA_ZZV_4x1_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLA_ZA_ZZV_4x1_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLA_ZA_ZZV_4x1_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLA_ZA_ZZV_4x1_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLA_ZA_ZZV_4x1_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, _, _, _] as __opcode)) if SEE < 2783) = {
    SEE = 2783;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLA_ZA_ZZV_4x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_BFMLS_ZA_ZZV_4x1_16 : forall 'VL 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & is_VL('VL)).
  (int('VL), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLS_ZA_ZZV_4x1_16 (VL, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(MOD(n + r, 32), VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLS_ZA_ZZV_4x1_16 : (bits(1), bits(4), bits(2), bits(5), bits(1), bits(3)) -> unit

function decode_BFMLS_ZA_ZZV_4x1_16 (sz, Zm, Rv, Zn, S, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'n = UInt(Zn);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLS_ZA_ZZV_4x1_16(128, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLS_ZA_ZZV_4x1_16(256, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLS_ZA_ZZV_4x1_16(512, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLS_ZA_ZZV_4x1_16(1024, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLS_ZA_ZZV_4x1_16(2048, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitzero, _, _, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, _, _, _] as __opcode)) if SEE < 2784) = {
    SEE = 2784;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let Zn = Slice(__opcode, 5, 5);
    let S = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLS_ZA_ZZV_4x1_16(sz, Zm, Rv, Zn, S, off3)
}

val execute_FMLA_ZA_ZZi_H2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZi_H2xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZi_H2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZi_H2xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZi_H2xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZi_H2xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZi_H2xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZi_H2xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZi_H2xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2785) = {
    SEE = 2785;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZi_H2xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_FMLS_ZA_ZZi_H2xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZi_H2xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZi_H2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZi_H2xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZi_H2xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZi_H2xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZi_H2xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZi_H2xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZi_H2xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2786) = {
    SEE = 2786;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZi_H2xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_BFMLA_ZA_ZZi_H2xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLA_ZA_ZZi_H2xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 16);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits(16) = Elem_read(operand2, s, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLA_ZA_ZZi_H2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(3)) -> unit

function decode_BFMLA_ZA_ZZi_H2xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLA_ZA_ZZi_H2xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLA_ZA_ZZi_H2xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLA_ZA_ZZi_H2xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLA_ZA_ZZi_H2xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLA_ZA_ZZi_H2xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2787) = {
    SEE = 2787;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLA_ZA_ZZi_H2xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_BFMLS_ZA_ZZi_H2xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLS_ZA_ZZi_H2xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 16);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits(16) = Elem_read(operand2, s, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLS_ZA_ZZi_H2xi : (bits(4), bits(2), bits(2), bits(4), bits(1), bits(1), bits(3)) -> unit

function decode_BFMLS_ZA_ZZi_H2xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMLS_ZA_ZZi_H2xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLS_ZA_ZZi_H2xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLS_ZA_ZZi_H2xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLS_ZA_ZZi_H2xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLS_ZA_ZZi_H2xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, bitone, _, _, _, _, _, _, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2788) = {
    SEE = 2788;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 6, 4);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLS_ZA_ZZi_H2xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_FMLA_ZA_ZZi_H4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLA_ZA_ZZi_H4xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLA_ZA_ZZi_H4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(3)) -> unit

function decode_FMLA_ZA_ZZi_H4xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLA_ZA_ZZi_H4xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLA_ZA_ZZi_H4xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLA_ZA_ZZi_H4xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLA_ZA_ZZi_H4xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLA_ZA_ZZi_H4xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 2789) = {
    SEE = 2789;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLA_ZA_ZZi_H4xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_FMLS_ZA_ZZi_H4xi : forall 'VL 'esize 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_FMLS_ZA_ZZi_H4xi (VL, esize, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, esize);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits('esize) = Elem_read(operand2, s, esize);
            let element3 : bits('esize) = Elem_read(operand3, e, esize);
            if sub_op then {
                element1 = FPNeg(element1)
            };
            result = Elem_set(result, e, esize, FPMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_FMLS_ZA_ZZi_H4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(3)) -> unit

function decode_FMLS_ZA_ZZi_H4xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_FMLS_ZA_ZZi_H4xi(128, esize, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_FMLS_ZA_ZZi_H4xi(256, esize, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_FMLS_ZA_ZZi_H4xi(512, esize, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_FMLS_ZA_ZZi_H4xi(1024, esize, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_FMLS_ZA_ZZi_H4xi(2048, esize, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _] as __opcode)) if SEE < 2790) = {
    SEE = 2790;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_FMLS_ZA_ZZi_H4xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_BFMLA_ZA_ZZi_H4xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLA_ZA_ZZi_H4xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 16);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits(16) = Elem_read(operand2, s, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLA_ZA_ZZi_H4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(3)) -> unit

function decode_BFMLA_ZA_ZZi_H4xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = false;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLA_ZA_ZZi_H4xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLA_ZA_ZZi_H4xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLA_ZA_ZZi_H4xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLA_ZA_ZZi_H4xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLA_ZA_ZZi_H4xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _] as __opcode)) if SEE < 2791) = {
    SEE = 2791;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLA_ZA_ZZi_H4xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_BFMLS_ZA_ZZi_H4xi : forall 'VL 'index 'm 'n 'nreg 'offset ('sub_op : Bool) 'v,
  (0 <= 'v & 'v <= 31 & 'offset in {0, 1, 2, 3, 4, 5, 6, 7} & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('index), int('m), int('n), int('nreg), int('offset), bool('sub_op), int('v)) -> unit

function execute_BFMLS_ZA_ZZi_H4xi (VL, index, m, n, nreg, offset, sub_op, v) = {
    CheckStreamingSVEAndZAEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let 'vectors_name = DIV(VL, 8);
    let 'vstride = DIV(vectors_name, nreg);
    let 'eltspersegment = DIV(128, 16);
    let vbase : bits(32) = X_read(v, 32);
    vec : int = MOD(UInt(vbase) + offset, vstride);
    result : bits('VL) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = let 'vec = vec in
          {
              ZAvector_read(vec, VL)
          };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let 'segmentbase = e - MOD(e, eltspersegment);
            let 's = segmentbase + index;
            let element2 : bits(16) = Elem_read(operand2, s, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            if sub_op then {
                element1 = BFNeg(element1)
            };
            result = Elem_set(result, e, 16, BFMulAdd_ZA(element3, element1, element2, FPCR_read()))
        };
        let 'vec = vec in
          {
              ZAvector_set(vec, VL) = result
          };
        vec = vec + vstride
    }
}

val decode_BFMLS_ZA_ZZi_H4xi : (bits(4), bits(2), bits(2), bits(3), bits(1), bits(1), bits(3)) -> unit

function decode_BFMLS_ZA_ZZi_H4xi (Zm, Rv, i3h, Zn, S, i3l, off3) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'v = UInt(0b010 @ Rv);
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'offset = UInt(off3);
    let 'index = UInt(i3h @ i3l);
    let sub_op : bool = true;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMLS_ZA_ZZi_H4xi(128, index, m, n, nreg, offset, sub_op, v)
      },
      256 => {
          execute_BFMLS_ZA_ZZi_H4xi(256, index, m, n, nreg, offset, sub_op, v)
      },
      512 => {
          execute_BFMLS_ZA_ZZi_H4xi(512, index, m, n, nreg, offset, sub_op, v)
      },
      1024 => {
          execute_BFMLS_ZA_ZZi_H4xi(1024, index, m, n, nreg, offset, sub_op, v)
      },
      2048 => {
          execute_BFMLS_ZA_ZZi_H4xi(2048, index, m, n, nreg, offset, sub_op, v)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _] as __opcode)) if SEE < 2792) = {
    SEE = 2792;
    let Zm = Slice(__opcode, 16, 4);
    let Rv = Slice(__opcode, 13, 2);
    let i3h = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 7, 3);
    let S = Slice(__opcode, 4, 1);
    let i3l = Slice(__opcode, 3, 1);
    let off3 = Slice(__opcode, 0, 3);
    decode_BFMLS_ZA_ZZi_H4xi(Zm, Rv, i3h, Zn, S, i3l, off3)
}

val execute_BFMAX_MZ_ZZW_2x2 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAX_MZ_ZZW_2x2 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAX_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMAX_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMAX_MZ_ZZW_2x2(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAX_MZ_ZZW_2x2(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAX_MZ_ZZW_2x2(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAX_MZ_ZZW_2x2(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAX_MZ_ZZW_2x2(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2793) = {
    SEE = 2793;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMAX_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_BFMAX_MZ_ZZV_2x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAX_MZ_ZZV_2x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAX_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMAX_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMAX_MZ_ZZV_2x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAX_MZ_ZZV_2x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAX_MZ_ZZV_2x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAX_MZ_ZZV_2x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAX_MZ_ZZV_2x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero] as __opcode)) if SEE < 2794) = {
    SEE = 2794;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMAX_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_BFMIN_MZ_ZZW_2x2 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMIN_MZ_ZZW_2x2 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMIN_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMIN_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMIN_MZ_ZZW_2x2(128, dn, m, nreg)
      },
      256 => {
          execute_BFMIN_MZ_ZZW_2x2(256, dn, m, nreg)
      },
      512 => {
          execute_BFMIN_MZ_ZZW_2x2(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMIN_MZ_ZZW_2x2(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMIN_MZ_ZZW_2x2(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone] as __opcode)) if SEE < 2795) = {
    SEE = 2795;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMIN_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_BFMIN_MZ_ZZV_2x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMIN_MZ_ZZV_2x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMIN_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMIN_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMIN_MZ_ZZV_2x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMIN_MZ_ZZV_2x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMIN_MZ_ZZV_2x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMIN_MZ_ZZV_2x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMIN_MZ_ZZV_2x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone] as __opcode)) if SEE < 2796) = {
    SEE = 2796;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMIN_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_BFMAX_MZ_ZZW_4x4 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAX_MZ_ZZW_4x4 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAX_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_BFMAX_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMAX_MZ_ZZW_4x4(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAX_MZ_ZZW_4x4(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAX_MZ_ZZW_4x4(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAX_MZ_ZZW_4x4(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAX_MZ_ZZW_4x4(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2797) = {
    SEE = 2797;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMAX_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_BFMAX_MZ_ZZV_4x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAX_MZ_ZZV_4x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMax(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAX_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_BFMAX_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMAX_MZ_ZZV_4x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAX_MZ_ZZV_4x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAX_MZ_ZZV_4x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAX_MZ_ZZV_4x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAX_MZ_ZZV_4x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2798) = {
    SEE = 2798;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMAX_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_BFMIN_MZ_ZZW_4x4 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMIN_MZ_ZZW_4x4 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMIN_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_BFMIN_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMIN_MZ_ZZW_4x4(128, dn, m, nreg)
      },
      256 => {
          execute_BFMIN_MZ_ZZW_4x4(256, dn, m, nreg)
      },
      512 => {
          execute_BFMIN_MZ_ZZW_4x4(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMIN_MZ_ZZW_4x4(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMIN_MZ_ZZW_4x4(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2799) = {
    SEE = 2799;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMIN_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_BFMIN_MZ_ZZV_4x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMIN_MZ_ZZV_4x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMin(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMIN_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_BFMIN_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMIN_MZ_ZZV_4x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMIN_MZ_ZZV_4x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMIN_MZ_ZZV_4x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMIN_MZ_ZZV_4x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMIN_MZ_ZZV_4x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2800) = {
    SEE = 2800;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMIN_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_BFMAXNM_MZ_ZZW_2x2 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAXNM_MZ_ZZW_2x2 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAXNM_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMAXNM_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMAXNM_MZ_ZZW_2x2(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAXNM_MZ_ZZW_2x2(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAXNM_MZ_ZZW_2x2(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAXNM_MZ_ZZW_2x2(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAXNM_MZ_ZZW_2x2(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2801) = {
    SEE = 2801;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMAXNM_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_BFMAXNM_MZ_ZZV_2x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAXNM_MZ_ZZV_2x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAXNM_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMAXNM_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMAXNM_MZ_ZZV_2x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAXNM_MZ_ZZV_2x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAXNM_MZ_ZZV_2x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAXNM_MZ_ZZV_2x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAXNM_MZ_ZZV_2x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero] as __opcode)) if SEE < 2802) = {
    SEE = 2802;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMAXNM_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_BFMINNM_MZ_ZZW_2x2 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMINNM_MZ_ZZW_2x2 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMINNM_MZ_ZZW_2x2 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMINNM_MZ_ZZW_2x2 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(Zm @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMINNM_MZ_ZZW_2x2(128, dn, m, nreg)
      },
      256 => {
          execute_BFMINNM_MZ_ZZW_2x2(256, dn, m, nreg)
      },
      512 => {
          execute_BFMINNM_MZ_ZZW_2x2(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMINNM_MZ_ZZW_2x2(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMINNM_MZ_ZZW_2x2(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2803) = {
    SEE = 2803;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 17, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMINNM_MZ_ZZW_2x2(size, Zm, Zdn)
}

val execute_BFMINNM_MZ_ZZV_2x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 2 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMINNM_MZ_ZZV_2x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMINNM_MZ_ZZV_2x1 : (bits(2), bits(4), bits(4)) -> unit

function decode_BFMINNM_MZ_ZZV_2x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b0);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFMINNM_MZ_ZZV_2x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMINNM_MZ_ZZV_2x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMINNM_MZ_ZZV_2x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMINNM_MZ_ZZV_2x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMINNM_MZ_ZZV_2x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone] as __opcode)) if SEE < 2804) = {
    SEE = 2804;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 1, 4);
    decode_BFMINNM_MZ_ZZV_2x1(size, Zm, Zdn)
}

val execute_BFMAXNM_MZ_ZZW_4x4 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAXNM_MZ_ZZW_4x4 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAXNM_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_BFMAXNM_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMAXNM_MZ_ZZW_4x4(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAXNM_MZ_ZZW_4x4(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAXNM_MZ_ZZW_4x4(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAXNM_MZ_ZZW_4x4(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAXNM_MZ_ZZW_4x4(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2805) = {
    SEE = 2805;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMAXNM_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_BFMAXNM_MZ_ZZV_4x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMAXNM_MZ_ZZV_4x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMaxNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMAXNM_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_BFMAXNM_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMAXNM_MZ_ZZV_4x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMAXNM_MZ_ZZV_4x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMAXNM_MZ_ZZV_4x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMAXNM_MZ_ZZV_4x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMAXNM_MZ_ZZV_4x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2806) = {
    SEE = 2806;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMAXNM_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_BFMINNM_MZ_ZZW_4x4 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMINNM_MZ_ZZW_4x4 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMINNM_MZ_ZZW_4x4 : (bits(2), bits(3), bits(3)) -> unit

function decode_BFMINNM_MZ_ZZW_4x4 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(Zm @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMINNM_MZ_ZZW_4x4(128, dn, m, nreg)
      },
      256 => {
          execute_BFMINNM_MZ_ZZW_4x4(256, dn, m, nreg)
      },
      512 => {
          execute_BFMINNM_MZ_ZZW_4x4(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMINNM_MZ_ZZW_4x4(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMINNM_MZ_ZZW_4x4(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2807) = {
    SEE = 2807;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 18, 3);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMINNM_MZ_ZZW_4x4(size, Zm, Zdn)
}

val execute_BFMINNM_MZ_ZZV_4x1 : forall 'VL 'dn 'm 'nreg,
  ('nreg == 4 & 0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('nreg)) -> unit

function execute_BFMINNM_MZ_ZZV_4x1 (VL, dn, m, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(dn + r, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMinNum(element1, element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(dn + r, VL) = results[r]
    }
}

val decode_BFMINNM_MZ_ZZV_4x1 : (bits(2), bits(4), bits(3)) -> unit

function decode_BFMINNM_MZ_ZZV_4x1 (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn @ 0b00);
    let 'm = UInt(0b0 @ Zm);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFMINNM_MZ_ZZV_4x1(128, dn, m, nreg)
      },
      256 => {
          execute_BFMINNM_MZ_ZZV_4x1(256, dn, m, nreg)
      },
      512 => {
          execute_BFMINNM_MZ_ZZV_4x1(512, dn, m, nreg)
      },
      1024 => {
          execute_BFMINNM_MZ_ZZV_4x1(1024, dn, m, nreg)
      },
      2048 => {
          execute_BFMINNM_MZ_ZZV_4x1(2048, dn, m, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2808) = {
    SEE = 2808;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 4);
    let Zdn = Slice(__opcode, 2, 3);
    decode_BFMINNM_MZ_ZZV_4x1(size, Zm, Zdn)
}

val execute_FCVT_MZ2_Z__ : forall 'VL 'd 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n)) -> unit

function execute_FCVT_MZ2_Z__ (VL, d, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits(2 * 'VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(16) = Elem_read(operand, e, 16);
        let res : bits(32) = FPConvertSVE__1(element, FPCR_read(), 32);
        result = Elem_set(result, e, 32, res)
    };
    Z_set(d + 0, VL) = result[VL - 1 .. 0];
    Z_set(d + 1, VL) = result[2 * VL - 1 .. VL]
}

val decode_FCVT_MZ2_Z__ : (bits(5), bits(4), bits(1)) -> unit

function decode_FCVT_MZ2_Z__ (Zn, Zd, L) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'd = UInt(Zd @ 0b0);
    match VL {
      128 => {
          execute_FCVT_MZ2_Z__(128, d, n)
      },
      256 => {
          execute_FCVT_MZ2_Z__(256, d, n)
      },
      512 => {
          execute_FCVT_MZ2_Z__(512, d, n)
      },
      1024 => {
          execute_FCVT_MZ2_Z__(1024, d, n)
      },
      2048 => {
          execute_FCVT_MZ2_Z__(2048, d, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2809) = {
    SEE = 2809;
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    let L = Slice(__opcode, 0, 1);
    decode_FCVT_MZ2_Z__(Zn, Zd, L)
}

val execute_FCVTL_MZ2_Z__ : forall 'VL 'd 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n)) -> unit

function execute_FCVTL_MZ2_Z__ (VL, d, n) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'pairs = DIV(VL, 32);
    let operand : bits('VL) = Z_read(n, VL);
    result0 : bits('VL) = undefined;
    result1 : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand, 2 * p + 0, 16);
        let element2 : bits(16) = Elem_read(operand, 2 * p + 1, 16);
        let res1 : bits(32) = FPConvertSVE__1(element1, FPCR_read(), 32);
        let res2 : bits(32) = FPConvertSVE__1(element2, FPCR_read(), 32);
        result0 = Elem_set(result0, p, 32, res1);
        result1 = Elem_set(result1, p, 32, res2)
    };
    Z_set(d + 0, VL) = result0;
    Z_set(d + 1, VL) = result1
}

val decode_FCVTL_MZ2_Z__ : (bits(5), bits(4), bits(1)) -> unit

function decode_FCVTL_MZ2_Z__ (Zn, Zd, L) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEF16F16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'd = UInt(Zd @ 0b0);
    match VL {
      128 => {
          execute_FCVTL_MZ2_Z__(128, d, n)
      },
      256 => {
          execute_FCVTL_MZ2_Z__(256, d, n)
      },
      512 => {
          execute_FCVTL_MZ2_Z__(512, d, n)
      },
      1024 => {
          execute_FCVTL_MZ2_Z__(1024, d, n)
      },
      2048 => {
          execute_FCVTL_MZ2_Z__(2048, d, n)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2810) = {
    SEE = 2810;
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    let L = Slice(__opcode, 0, 1);
    decode_FCVTL_MZ2_Z__(Zn, Zd, L)
}

val execute_BFCLAMP_MZ_ZZ_2 : forall 'VL 'd 'm 'n 'nreg,
  ('nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n), int('nreg)) -> unit

function execute_BFCLAMP_MZ_ZZ_2 (VL, d, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMinNum(BFMaxNum(element1, element3, FPCR_read()), element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_BFCLAMP_MZ_ZZ_2 : (bits(2), bits(5), bits(5), bits(4)) -> unit

function decode_BFCLAMP_MZ_ZZ_2 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b0);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_BFCLAMP_MZ_ZZ_2(128, d, m, n, nreg)
      },
      256 => {
          execute_BFCLAMP_MZ_ZZ_2(256, d, m, n, nreg)
      },
      512 => {
          execute_BFCLAMP_MZ_ZZ_2(512, d, m, n, nreg)
      },
      1024 => {
          execute_BFCLAMP_MZ_ZZ_2(1024, d, m, n, nreg)
      },
      2048 => {
          execute_BFCLAMP_MZ_ZZ_2(2048, d, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2811) = {
    SEE = 2811;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 1, 4);
    decode_BFCLAMP_MZ_ZZ_2(size, Zm, Zn, Zd)
}

val execute_BFCLAMP_MZ_ZZ_4 : forall 'VL 'd 'm 'n 'nreg,
  ('nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n), int('nreg)) -> unit

function execute_BFCLAMP_MZ_ZZ_4 (VL, d, m, n, nreg) = {
    CheckStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    results : vector(4, bits('VL)) = undefined;
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        let operand1 : bits('VL) = Z_read(n, VL);
        let operand2 : bits('VL) = Z_read(m, VL);
        let operand3 : bits('VL) = Z_read(d + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            let element3 : bits(16) = Elem_read(operand3, e, 16);
            results[r] = Elem_set(results[r], e, 16, BFMinNum(BFMaxNum(element1, element3, FPCR_read()), element2, FPCR_read()))
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(d + r, VL) = results[r]
    }
}

val decode_BFCLAMP_MZ_ZZ_4 : (bits(2), bits(5), bits(5), bits(3)) -> unit

function decode_BFCLAMP_MZ_ZZ_4 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSMEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd @ 0b00);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_BFCLAMP_MZ_ZZ_4(128, d, m, n, nreg)
      },
      256 => {
          execute_BFCLAMP_MZ_ZZ_4(256, d, m, n, nreg)
      },
      512 => {
          execute_BFCLAMP_MZ_ZZ_4(512, d, m, n, nreg)
      },
      1024 => {
          execute_BFCLAMP_MZ_ZZ_4(1024, d, m, n, nreg)
      },
      2048 => {
          execute_BFCLAMP_MZ_ZZ_4(2048, d, m, n, nreg)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2812) = {
    SEE = 2812;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 2, 3);
    decode_BFCLAMP_MZ_ZZ_4(size, Zm, Zn, Zd)
}
