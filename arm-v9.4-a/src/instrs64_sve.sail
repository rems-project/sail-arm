/******************************************************************************/
/*  BSD 3-clause Clear License                                                */
/*                                                                            */
/*  Copyright (c) 2023                                                        */
/*    Arm Limited (or its affiliates),                                        */
/*    Thomas Bauereiss,                                                       */
/*    Brian Campbell,                                                         */
/*    Alasdair Armstrong,                                                     */
/*    Alastair Reid,                                                          */
/*    Peter Sewell                                                            */
/*                                                                            */
/*  All rights reserved.                                                      */
/*                                                                            */
/*  Redistribution and use in source and binary forms, with or without        */
/*  modification, are permitted (subject to the limitations in the            */
/*  disclaimer below) provided that the following conditions are met:         */
/*                                                                            */
/*    * Redistributions of source code must retain the above copyright        */
/*      notice, this list of conditions and the following disclaimer.         */
/*    * Redistributions in binary form must reproduce the above copyright     */
/*      notice, this list of conditions and the following disclaimer in the   */
/*      documentation and/or other materials provided with the distribution.  */
/*    * Neither the name of ARM Limited nor the names of its contributors     */
/*      may be used to endorse or promote products derived from this          */
/*      software without specific prior written permission.                   */
/*                                                                            */
/*  NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED   */
/*  BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND   */
/*  CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,    */
/*  BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND         */
/*  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE   */
/*  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,      */
/*  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT  */
/*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF      */
/*  USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON    */
/*  ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT   */
/*  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF  */
/*  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.         */
/******************************************************************************/

val execute_FADD_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FADD_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPAdd(element1, imm, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FADD_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FADD_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then {
        assert(constraint('esize in {16, 32, 64}));
        FPPointFive(0b0, esize)
    } else {
        assert(constraint('esize in {16, 32, 64}));
        FPOne(0b0, esize)
    };
    match VL {
      128 => {
          execute_FADD_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FADD_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FADD_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FADD_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FADD_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1037) = {
    SEE = 1037;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FADD_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FSUB_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FSUB_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPSub(element1, imm, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FSUB_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FSUB_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then {
        assert(constraint('esize in {16, 32, 64}));
        FPPointFive(0b0, esize)
    } else {
        assert(constraint('esize in {16, 32, 64}));
        FPOne(0b0, esize)
    };
    match VL {
      128 => {
          execute_FSUB_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FSUB_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FSUB_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FSUB_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FSUB_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1038) = {
    SEE = 1038;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FSUB_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FMUL_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FMUL_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMul(element1, imm, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMUL_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FMUL_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then {
        assert(constraint('esize in {16, 32, 64}));
        FPPointFive(0b0, esize)
    } else {
        assert(constraint('esize in {16, 32, 64}));
        FPTwo(0b0, esize)
    };
    match VL {
      128 => {
          execute_FMUL_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FMUL_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FMUL_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FMUL_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FMUL_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1039) = {
    SEE = 1039;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMUL_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FSUBR_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FSUBR_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPSub(imm, element1, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FSUBR_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FSUBR_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then {
        assert(constraint('esize in {16, 32, 64}));
        FPPointFive(0b0, esize)
    } else {
        assert(constraint('esize in {16, 32, 64}));
        FPOne(0b0, esize)
    };
    match VL {
      128 => {
          execute_FSUBR_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FSUBR_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FSUBR_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FSUBR_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FSUBR_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1040) = {
    SEE = 1040;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FSUBR_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FMAXNM_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FMAXNM_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMaxNum(element1, imm, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMAXNM_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FMAXNM_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then Zeros(esize) else {
        assert(constraint('esize in {16, 32, 64}));
        FPOne(0b0, esize)
    };
    match VL {
      128 => {
          execute_FMAXNM_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FMAXNM_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FMAXNM_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FMAXNM_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FMAXNM_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1041) = {
    SEE = 1041;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMAXNM_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FMINNM_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FMINNM_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMinNum(element1, imm, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMINNM_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FMINNM_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then Zeros(esize) else {
        assert(constraint('esize in {16, 32, 64}));
        FPOne(0b0, esize)
    };
    match VL {
      128 => {
          execute_FMINNM_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FMINNM_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FMINNM_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FMINNM_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FMINNM_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1042) = {
    SEE = 1042;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMINNM_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FMAX_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FMAX_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMax(element1, imm, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMAX_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FMAX_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then Zeros(esize) else {
        assert(constraint('esize in {16, 32, 64}));
        FPOne(0b0, esize)
    };
    match VL {
      128 => {
          execute_FMAX_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FMAX_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FMAX_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FMAX_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FMAX_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1043) = {
    SEE = 1043;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMAX_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FMIN_Z_P_ZS__ : forall 'VL 'dn 'esize 'g,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bits('esize)) -> unit

function execute_FMIN_Z_P_ZS__ (VL, dn, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMin(element1, imm, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMIN_Z_P_ZS__ : (bits(2), bits(3), bits(1), bits(5)) -> unit

function decode_FMIN_Z_P_ZS__ (size, Pg, i1, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let imm : bits('esize) = if i1 == 0b0 then Zeros(esize) else {
        assert(constraint('esize in {16, 32, 64}));
        FPOne(0b0, esize)
    };
    match VL {
      128 => {
          execute_FMIN_Z_P_ZS__(128, dn, esize, g, imm)
      },
      256 => {
          execute_FMIN_Z_P_ZS__(256, dn, esize, g, imm)
      },
      512 => {
          execute_FMIN_Z_P_ZS__(512, dn, esize, g, imm)
      },
      1024 => {
          execute_FMIN_Z_P_ZS__(1024, dn, esize, g, imm)
      },
      2048 => {
          execute_FMIN_Z_P_ZS__(2048, dn, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _] as __opcode)) if SEE < 1044) = {
    SEE = 1044;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let i1 = Slice(__opcode, 5, 1);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMIN_Z_P_ZS__(size, Pg, i1, Zdn)
}

val execute_FCMGE_P_P_Z0__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), SVECmp) -> unit

function execute_FCMGE_P_P_Z0__ (VL, d, esize, g, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGT(0[esize - 1 .. 0], element, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGE(0[esize - 1 .. 0], element, FPCR_read())
              },
              _ => PatternMatchFailure("execute_FCMGE_P_P_Z0__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMGE_P_P_Z0__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMGE_P_P_Z0__ (size, eq, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    match VL {
      128 => {
          execute_FCMGE_P_P_Z0__(128, d, esize, g, n, op)
      },
      256 => {
          execute_FCMGE_P_P_Z0__(256, d, esize, g, n, op)
      },
      512 => {
          execute_FCMGE_P_P_Z0__(512, d, esize, g, n, op)
      },
      1024 => {
          execute_FCMGE_P_P_Z0__(1024, d, esize, g, n, op)
      },
      2048 => {
          execute_FCMGE_P_P_Z0__(2048, d, esize, g, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1045) = {
    SEE = 1045;
    let size = Slice(__opcode, 22, 2);
    let eq = Slice(__opcode, 17, 1);
    let lt = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMGE_P_P_Z0__(size, eq, lt, Pg, Zn, ne, Pd)
}

val execute_FCMGT_P_P_Z0__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), SVECmp) -> unit

function execute_FCMGT_P_P_Z0__ (VL, d, esize, g, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGT(0[esize - 1 .. 0], element, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGE(0[esize - 1 .. 0], element, FPCR_read())
              },
              _ => PatternMatchFailure("execute_FCMGT_P_P_Z0__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMGT_P_P_Z0__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMGT_P_P_Z0__ (size, eq, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    match VL {
      128 => {
          execute_FCMGT_P_P_Z0__(128, d, esize, g, n, op)
      },
      256 => {
          execute_FCMGT_P_P_Z0__(256, d, esize, g, n, op)
      },
      512 => {
          execute_FCMGT_P_P_Z0__(512, d, esize, g, n, op)
      },
      1024 => {
          execute_FCMGT_P_P_Z0__(1024, d, esize, g, n, op)
      },
      2048 => {
          execute_FCMGT_P_P_Z0__(2048, d, esize, g, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1046) = {
    SEE = 1046;
    let size = Slice(__opcode, 22, 2);
    let eq = Slice(__opcode, 17, 1);
    let lt = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMGT_P_P_Z0__(size, eq, lt, Pg, Zn, ne, Pd)
}

val execute_FCMLT_P_P_Z0__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), SVECmp) -> unit

function execute_FCMLT_P_P_Z0__ (VL, d, esize, g, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGT(0[esize - 1 .. 0], element, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGE(0[esize - 1 .. 0], element, FPCR_read())
              },
              _ => PatternMatchFailure("execute_FCMLT_P_P_Z0__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMLT_P_P_Z0__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMLT_P_P_Z0__ (size, eq, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LT;
    match VL {
      128 => {
          execute_FCMLT_P_P_Z0__(128, d, esize, g, n, op)
      },
      256 => {
          execute_FCMLT_P_P_Z0__(256, d, esize, g, n, op)
      },
      512 => {
          execute_FCMLT_P_P_Z0__(512, d, esize, g, n, op)
      },
      1024 => {
          execute_FCMLT_P_P_Z0__(1024, d, esize, g, n, op)
      },
      2048 => {
          execute_FCMLT_P_P_Z0__(2048, d, esize, g, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1047) = {
    SEE = 1047;
    let size = Slice(__opcode, 22, 2);
    let eq = Slice(__opcode, 17, 1);
    let lt = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMLT_P_P_Z0__(size, eq, lt, Pg, Zn, ne, Pd)
}

val execute_FCMLE_P_P_Z0__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), SVECmp) -> unit

function execute_FCMLE_P_P_Z0__ (VL, d, esize, g, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGT(0[esize - 1 .. 0], element, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGE(0[esize - 1 .. 0], element, FPCR_read())
              },
              _ => PatternMatchFailure("execute_FCMLE_P_P_Z0__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMLE_P_P_Z0__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMLE_P_P_Z0__ (size, eq, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LE;
    match VL {
      128 => {
          execute_FCMLE_P_P_Z0__(128, d, esize, g, n, op)
      },
      256 => {
          execute_FCMLE_P_P_Z0__(256, d, esize, g, n, op)
      },
      512 => {
          execute_FCMLE_P_P_Z0__(512, d, esize, g, n, op)
      },
      1024 => {
          execute_FCMLE_P_P_Z0__(1024, d, esize, g, n, op)
      },
      2048 => {
          execute_FCMLE_P_P_Z0__(2048, d, esize, g, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1048) = {
    SEE = 1048;
    let size = Slice(__opcode, 22, 2);
    let eq = Slice(__opcode, 17, 1);
    let lt = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMLE_P_P_Z0__(size, eq, lt, Pg, Zn, ne, Pd)
}

val execute_FCMEQ_P_P_Z0__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), SVECmp) -> unit

function execute_FCMEQ_P_P_Z0__ (VL, d, esize, g, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGT(0[esize - 1 .. 0], element, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGE(0[esize - 1 .. 0], element, FPCR_read())
              },
              _ => PatternMatchFailure("execute_FCMEQ_P_P_Z0__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMEQ_P_P_Z0__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMEQ_P_P_Z0__ (size, eq, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_EQ;
    match VL {
      128 => {
          execute_FCMEQ_P_P_Z0__(128, d, esize, g, n, op)
      },
      256 => {
          execute_FCMEQ_P_P_Z0__(256, d, esize, g, n, op)
      },
      512 => {
          execute_FCMEQ_P_P_Z0__(512, d, esize, g, n, op)
      },
      1024 => {
          execute_FCMEQ_P_P_Z0__(1024, d, esize, g, n, op)
      },
      2048 => {
          execute_FCMEQ_P_P_Z0__(2048, d, esize, g, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1049) = {
    SEE = 1049;
    let size = Slice(__opcode, 22, 2);
    let eq = Slice(__opcode, 17, 1);
    let lt = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMEQ_P_P_Z0__(size, eq, lt, Pg, Zn, ne, Pd)
}

val execute_FCMNE_P_P_Z0__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), SVECmp) -> unit

function execute_FCMNE_P_P_Z0__ (VL, d, esize, g, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element, 0[esize - 1 .. 0], FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGT(0[esize - 1 .. 0], element, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint(('esize - 1 - 0 + 1 == 16 | 'esize - 1 - 0 + 1 == 32 | 'esize - 1 - 0 + 1 == 64)));
                  res = FPCompareGE(0[esize - 1 .. 0], element, FPCR_read())
              },
              _ => PatternMatchFailure("execute_FCMNE_P_P_Z0__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMNE_P_P_Z0__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMNE_P_P_Z0__ (size, eq, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_NE;
    match VL {
      128 => {
          execute_FCMNE_P_P_Z0__(128, d, esize, g, n, op)
      },
      256 => {
          execute_FCMNE_P_P_Z0__(256, d, esize, g, n, op)
      },
      512 => {
          execute_FCMNE_P_P_Z0__(512, d, esize, g, n, op)
      },
      1024 => {
          execute_FCMNE_P_P_Z0__(1024, d, esize, g, n, op)
      },
      2048 => {
          execute_FCMNE_P_P_Z0__(2048, d, esize, g, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1050) = {
    SEE = 1050;
    let size = Slice(__opcode, 22, 2);
    let eq = Slice(__opcode, 17, 1);
    let lt = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMNE_P_P_Z0__(size, eq, lt, Pg, Zn, ne, Pd)
}

val execute_FADDA_V_P_Z__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FADDA_V_P_Z__ (VL, dn, esize, g, m) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('esize) = V_read(dn, esize);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('esize) = operand1;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = FPAdd(result, element, FPCR_read())
        };
        ()
    };
    V_set(dn, esize) = result
}

val decode_FADDA_V_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FADDA_V_P_Z__ (size, Pg, Zm, Vdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Vdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FADDA_V_P_Z__(128, dn, esize, g, m)
      },
      256 => {
          execute_FADDA_V_P_Z__(256, dn, esize, g, m)
      },
      512 => {
          execute_FADDA_V_P_Z__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FADDA_V_P_Z__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FADDA_V_P_Z__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1051) = {
    SEE = 1051;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Vdn = Slice(__opcode, 0, 5);
    decode_FADDA_V_P_Z__(size, Pg, Zm, Vdn)
}

val execute_FCVTZU_Z_P_Z_D2X : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZU_Z_P_Z_D2X (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZU_Z_P_Z_D2X : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZU_Z_P_Z_D2X (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 64;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_Z_P_Z_D2X(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZU_Z_P_Z_D2X(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZU_Z_P_Z_D2X(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_Z_P_Z_D2X(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_Z_P_Z_D2X(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1052) = {
    SEE = 1052;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZU_Z_P_Z_D2X(int_U, Pg, Zn, Zd)
}

val execute_FCVTZU_Z_P_Z_D2W : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZU_Z_P_Z_D2W (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZU_Z_P_Z_D2W : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZU_Z_P_Z_D2W (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 32;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_Z_P_Z_D2W(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZU_Z_P_Z_D2W(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZU_Z_P_Z_D2W(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_Z_P_Z_D2W(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_Z_P_Z_D2W(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1053) = {
    SEE = 1053;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZU_Z_P_Z_D2W(int_U, Pg, Zn, Zd)
}

val execute_FCVTZU_Z_P_Z_S2W : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZU_Z_P_Z_S2W (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZU_Z_P_Z_S2W : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZU_Z_P_Z_S2W (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 32;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_Z_P_Z_S2W(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZU_Z_P_Z_S2W(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZU_Z_P_Z_S2W(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_Z_P_Z_S2W(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_Z_P_Z_S2W(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1054) = {
    SEE = 1054;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZU_Z_P_Z_S2W(int_U, Pg, Zn, Zd)
}

val execute_FCVTZU_Z_P_Z_S2X : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZU_Z_P_Z_S2X (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZU_Z_P_Z_S2X : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZU_Z_P_Z_S2X (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 64;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_Z_P_Z_S2X(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZU_Z_P_Z_S2X(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZU_Z_P_Z_S2X(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_Z_P_Z_S2X(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_Z_P_Z_S2X(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1055) = {
    SEE = 1055;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZU_Z_P_Z_S2X(int_U, Pg, Zn, Zd)
}

val execute_FCVTZS_Z_P_Z_D2X : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZS_Z_P_Z_D2X (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZS_Z_P_Z_D2X : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZS_Z_P_Z_D2X (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 64;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_Z_P_Z_D2X(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZS_Z_P_Z_D2X(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZS_Z_P_Z_D2X(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_Z_P_Z_D2X(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_Z_P_Z_D2X(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1056) = {
    SEE = 1056;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZS_Z_P_Z_D2X(int_U, Pg, Zn, Zd)
}

val execute_FCVTZS_Z_P_Z_D2W : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZS_Z_P_Z_D2W (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZS_Z_P_Z_D2W : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZS_Z_P_Z_D2W (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 32;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_Z_P_Z_D2W(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZS_Z_P_Z_D2W(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZS_Z_P_Z_D2W(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_Z_P_Z_D2W(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_Z_P_Z_D2W(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1057) = {
    SEE = 1057;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZS_Z_P_Z_D2W(int_U, Pg, Zn, Zd)
}

val execute_FCVTZS_Z_P_Z_S2W : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZS_Z_P_Z_S2W (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZS_Z_P_Z_S2W : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZS_Z_P_Z_S2W (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 32;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_Z_P_Z_S2W(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZS_Z_P_Z_S2W(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZS_Z_P_Z_S2W(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_Z_P_Z_S2W(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_Z_P_Z_S2W(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1058) = {
    SEE = 1058;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZS_Z_P_Z_S2W(int_U, Pg, Zn, Zd)
}

val execute_FCVTZS_Z_P_Z_S2X : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZS_Z_P_Z_S2X (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZS_Z_P_Z_S2X : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZS_Z_P_Z_S2X (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 64;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_Z_P_Z_S2X(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZS_Z_P_Z_S2X(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZS_Z_P_Z_S2X(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_Z_P_Z_S2X(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_Z_P_Z_S2X(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1059) = {
    SEE = 1059;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZS_Z_P_Z_S2X(int_U, Pg, Zn, Zd)
}

val execute_FCVTZS_Z_P_Z_FP162H : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZS_Z_P_Z_FP162H (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZS_Z_P_Z_FP162H : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZS_Z_P_Z_FP162H (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 16;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_Z_P_Z_FP162H(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZS_Z_P_Z_FP162H(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZS_Z_P_Z_FP162H(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_Z_P_Z_FP162H(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_Z_P_Z_FP162H(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1060) = {
    SEE = 1060;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZS_Z_P_Z_FP162H(int_U, Pg, Zn, Zd)
}

val execute_FCVTZS_Z_P_Z_FP162W : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZS_Z_P_Z_FP162W (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZS_Z_P_Z_FP162W : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZS_Z_P_Z_FP162W (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 32;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_Z_P_Z_FP162W(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZS_Z_P_Z_FP162W(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZS_Z_P_Z_FP162W(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_Z_P_Z_FP162W(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_Z_P_Z_FP162W(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1061) = {
    SEE = 1061;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZS_Z_P_Z_FP162W(int_U, Pg, Zn, Zd)
}

val execute_FCVTZS_Z_P_Z_FP162X : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZS_Z_P_Z_FP162X (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZS_Z_P_Z_FP162X : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZS_Z_P_Z_FP162X (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 64;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZS_Z_P_Z_FP162X(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZS_Z_P_Z_FP162X(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZS_Z_P_Z_FP162X(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZS_Z_P_Z_FP162X(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZS_Z_P_Z_FP162X(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1062) = {
    SEE = 1062;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZS_Z_P_Z_FP162X(int_U, Pg, Zn, Zd)
}

val execute_FCVTZU_Z_P_Z_FP162H : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZU_Z_P_Z_FP162H (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZU_Z_P_Z_FP162H : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZU_Z_P_Z_FP162H (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 16;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_Z_P_Z_FP162H(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZU_Z_P_Z_FP162H(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZU_Z_P_Z_FP162H(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_Z_P_Z_FP162H(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_Z_P_Z_FP162H(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1063) = {
    SEE = 1063;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZU_Z_P_Z_FP162H(int_U, Pg, Zn, Zd)
}

val execute_FCVTZU_Z_P_Z_FP162W : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZU_Z_P_Z_FP162W (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZU_Z_P_Z_FP162W : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZU_Z_P_Z_FP162W (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 32;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_Z_P_Z_FP162W(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZU_Z_P_Z_FP162W(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZU_Z_P_Z_FP162W(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_Z_P_Z_FP162W(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_Z_P_Z_FP162W(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1064) = {
    SEE = 1064;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZU_Z_P_Z_FP162W(int_U, Pg, Zn, Zd)
}

val execute_FCVTZU_Z_P_Z_FP162X : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_FCVTZU_Z_P_Z_FP162X (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPToFixed(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, Extend(res, esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTZU_Z_P_Z_FP162X : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCVTZU_Z_P_Z_FP162X (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 64;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FCVTZU_Z_P_Z_FP162X(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_FCVTZU_Z_P_Z_FP162X(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_FCVTZU_Z_P_Z_FP162X(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_FCVTZU_Z_P_Z_FP162X(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_FCVTZU_Z_P_Z_FP162X(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1065) = {
    SEE = 1065;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTZU_Z_P_Z_FP162X(int_U, Pg, Zn, Zd)
}

val execute_SCVTF_Z_P_Z_H2FP16 : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_SCVTF_Z_P_Z_H2FP16 (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SCVTF_Z_P_Z_H2FP16 : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SCVTF_Z_P_Z_H2FP16 (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 16;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_Z_P_Z_H2FP16(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_SCVTF_Z_P_Z_H2FP16(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_SCVTF_Z_P_Z_H2FP16(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_SCVTF_Z_P_Z_H2FP16(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_SCVTF_Z_P_Z_H2FP16(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1066) = {
    SEE = 1066;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCVTF_Z_P_Z_H2FP16(int_U, Pg, Zn, Zd)
}

val execute_SCVTF_Z_P_Z_W2FP16 : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_SCVTF_Z_P_Z_W2FP16 (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SCVTF_Z_P_Z_W2FP16 : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SCVTF_Z_P_Z_W2FP16 (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 16;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_Z_P_Z_W2FP16(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_SCVTF_Z_P_Z_W2FP16(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_SCVTF_Z_P_Z_W2FP16(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_SCVTF_Z_P_Z_W2FP16(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_SCVTF_Z_P_Z_W2FP16(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1067) = {
    SEE = 1067;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCVTF_Z_P_Z_W2FP16(int_U, Pg, Zn, Zd)
}

val execute_SCVTF_Z_P_Z_X2FP16 : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_SCVTF_Z_P_Z_X2FP16 (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SCVTF_Z_P_Z_X2FP16 : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SCVTF_Z_P_Z_X2FP16 (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 16;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_Z_P_Z_X2FP16(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_SCVTF_Z_P_Z_X2FP16(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_SCVTF_Z_P_Z_X2FP16(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_SCVTF_Z_P_Z_X2FP16(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_SCVTF_Z_P_Z_X2FP16(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1068) = {
    SEE = 1068;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCVTF_Z_P_Z_X2FP16(int_U, Pg, Zn, Zd)
}

val execute_UCVTF_Z_P_Z_H2FP16 : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_UCVTF_Z_P_Z_H2FP16 (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UCVTF_Z_P_Z_H2FP16 : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UCVTF_Z_P_Z_H2FP16 (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 16;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_Z_P_Z_H2FP16(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_UCVTF_Z_P_Z_H2FP16(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_UCVTF_Z_P_Z_H2FP16(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_UCVTF_Z_P_Z_H2FP16(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_UCVTF_Z_P_Z_H2FP16(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1069) = {
    SEE = 1069;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCVTF_Z_P_Z_H2FP16(int_U, Pg, Zn, Zd)
}

val execute_UCVTF_Z_P_Z_W2FP16 : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_UCVTF_Z_P_Z_W2FP16 (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UCVTF_Z_P_Z_W2FP16 : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UCVTF_Z_P_Z_W2FP16 (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 16;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_Z_P_Z_W2FP16(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_UCVTF_Z_P_Z_W2FP16(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_UCVTF_Z_P_Z_W2FP16(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_UCVTF_Z_P_Z_W2FP16(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_UCVTF_Z_P_Z_W2FP16(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1070) = {
    SEE = 1070;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCVTF_Z_P_Z_W2FP16(int_U, Pg, Zn, Zd)
}

val execute_UCVTF_Z_P_Z_X2FP16 : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_UCVTF_Z_P_Z_X2FP16 (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UCVTF_Z_P_Z_X2FP16 : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UCVTF_Z_P_Z_X2FP16 (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 16;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_Z_P_Z_X2FP16(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_UCVTF_Z_P_Z_X2FP16(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_UCVTF_Z_P_Z_X2FP16(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_UCVTF_Z_P_Z_X2FP16(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_UCVTF_Z_P_Z_X2FP16(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1071) = {
    SEE = 1071;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCVTF_Z_P_Z_X2FP16(int_U, Pg, Zn, Zd)
}

val execute_FCVT_Z_P_Z_D2S : forall 'VL 'd 'd_esize 'esize 'g 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), int('s_esize)) -> unit

function execute_FCVT_Z_P_Z_D2S (VL, d, d_esize, esize, g, n, s_esize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPConvertSVE__1(element[s_esize - 1 .. 0], FPCR_read(), d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(res, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVT_Z_P_Z_D2S : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVT_Z_P_Z_D2S (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 32;
    match VL {
      128 => {
          execute_FCVT_Z_P_Z_D2S(128, d, d_esize, esize, g, n, s_esize)
      },
      256 => {
          execute_FCVT_Z_P_Z_D2S(256, d, d_esize, esize, g, n, s_esize)
      },
      512 => {
          execute_FCVT_Z_P_Z_D2S(512, d, d_esize, esize, g, n, s_esize)
      },
      1024 => {
          execute_FCVT_Z_P_Z_D2S(1024, d, d_esize, esize, g, n, s_esize)
      },
      2048 => {
          execute_FCVT_Z_P_Z_D2S(2048, d, d_esize, esize, g, n, s_esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1072) = {
    SEE = 1072;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVT_Z_P_Z_D2S(Pg, Zn, Zd)
}

val execute_FCVT_Z_P_Z_D2H : forall 'VL 'd 'd_esize 'esize 'g 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), int('s_esize)) -> unit

function execute_FCVT_Z_P_Z_D2H (VL, d, d_esize, esize, g, n, s_esize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPConvertSVE__1(element[s_esize - 1 .. 0], FPCR_read(), d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(res, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVT_Z_P_Z_D2H : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVT_Z_P_Z_D2H (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 16;
    match VL {
      128 => {
          execute_FCVT_Z_P_Z_D2H(128, d, d_esize, esize, g, n, s_esize)
      },
      256 => {
          execute_FCVT_Z_P_Z_D2H(256, d, d_esize, esize, g, n, s_esize)
      },
      512 => {
          execute_FCVT_Z_P_Z_D2H(512, d, d_esize, esize, g, n, s_esize)
      },
      1024 => {
          execute_FCVT_Z_P_Z_D2H(1024, d, d_esize, esize, g, n, s_esize)
      },
      2048 => {
          execute_FCVT_Z_P_Z_D2H(2048, d, d_esize, esize, g, n, s_esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1073) = {
    SEE = 1073;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVT_Z_P_Z_D2H(Pg, Zn, Zd)
}

val execute_FCVT_Z_P_Z_S2D : forall 'VL 'd 'd_esize 'esize 'g 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), int('s_esize)) -> unit

function execute_FCVT_Z_P_Z_S2D (VL, d, d_esize, esize, g, n, s_esize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPConvertSVE__1(element[s_esize - 1 .. 0], FPCR_read(), d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(res, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVT_Z_P_Z_S2D : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVT_Z_P_Z_S2D (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 64;
    match VL {
      128 => {
          execute_FCVT_Z_P_Z_S2D(128, d, d_esize, esize, g, n, s_esize)
      },
      256 => {
          execute_FCVT_Z_P_Z_S2D(256, d, d_esize, esize, g, n, s_esize)
      },
      512 => {
          execute_FCVT_Z_P_Z_S2D(512, d, d_esize, esize, g, n, s_esize)
      },
      1024 => {
          execute_FCVT_Z_P_Z_S2D(1024, d, d_esize, esize, g, n, s_esize)
      },
      2048 => {
          execute_FCVT_Z_P_Z_S2D(2048, d, d_esize, esize, g, n, s_esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1074) = {
    SEE = 1074;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVT_Z_P_Z_S2D(Pg, Zn, Zd)
}

val execute_FCVT_Z_P_Z_H2D : forall 'VL 'd 'd_esize 'esize 'g 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), int('s_esize)) -> unit

function execute_FCVT_Z_P_Z_H2D (VL, d, d_esize, esize, g, n, s_esize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPConvertSVE__1(element[s_esize - 1 .. 0], FPCR_read(), d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(res, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVT_Z_P_Z_H2D : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVT_Z_P_Z_H2D (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 64;
    match VL {
      128 => {
          execute_FCVT_Z_P_Z_H2D(128, d, d_esize, esize, g, n, s_esize)
      },
      256 => {
          execute_FCVT_Z_P_Z_H2D(256, d, d_esize, esize, g, n, s_esize)
      },
      512 => {
          execute_FCVT_Z_P_Z_H2D(512, d, d_esize, esize, g, n, s_esize)
      },
      1024 => {
          execute_FCVT_Z_P_Z_H2D(1024, d, d_esize, esize, g, n, s_esize)
      },
      2048 => {
          execute_FCVT_Z_P_Z_H2D(2048, d, d_esize, esize, g, n, s_esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1075) = {
    SEE = 1075;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVT_Z_P_Z_H2D(Pg, Zn, Zd)
}

val execute_FCVT_Z_P_Z_H2S : forall 'VL 'd 'd_esize 'esize 'g 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), int('s_esize)) -> unit

function execute_FCVT_Z_P_Z_H2S (VL, d, d_esize, esize, g, n, s_esize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPConvertSVE__1(element[s_esize - 1 .. 0], FPCR_read(), d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(res, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVT_Z_P_Z_H2S : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVT_Z_P_Z_H2S (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 16;
    let 'd_esize = 32;
    match VL {
      128 => {
          execute_FCVT_Z_P_Z_H2S(128, d, d_esize, esize, g, n, s_esize)
      },
      256 => {
          execute_FCVT_Z_P_Z_H2S(256, d, d_esize, esize, g, n, s_esize)
      },
      512 => {
          execute_FCVT_Z_P_Z_H2S(512, d, d_esize, esize, g, n, s_esize)
      },
      1024 => {
          execute_FCVT_Z_P_Z_H2S(1024, d, d_esize, esize, g, n, s_esize)
      },
      2048 => {
          execute_FCVT_Z_P_Z_H2S(2048, d, d_esize, esize, g, n, s_esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1076) = {
    SEE = 1076;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVT_Z_P_Z_H2S(Pg, Zn, Zd)
}

val execute_FCVT_Z_P_Z_S2H : forall 'VL 'd 'd_esize 'esize 'g 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), int('s_esize)) -> unit

function execute_FCVT_Z_P_Z_S2H (VL, d, d_esize, esize, g, n, s_esize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPConvertSVE__1(element[s_esize - 1 .. 0], FPCR_read(), d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(res, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVT_Z_P_Z_S2H : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVT_Z_P_Z_S2H (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 16;
    match VL {
      128 => {
          execute_FCVT_Z_P_Z_S2H(128, d, d_esize, esize, g, n, s_esize)
      },
      256 => {
          execute_FCVT_Z_P_Z_S2H(256, d, d_esize, esize, g, n, s_esize)
      },
      512 => {
          execute_FCVT_Z_P_Z_S2H(512, d, d_esize, esize, g, n, s_esize)
      },
      1024 => {
          execute_FCVT_Z_P_Z_S2H(1024, d, d_esize, esize, g, n, s_esize)
      },
      2048 => {
          execute_FCVT_Z_P_Z_S2H(2048, d, d_esize, esize, g, n, s_esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1077) = {
    SEE = 1077;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVT_Z_P_Z_S2H(Pg, Zn, Zd)
}

val execute_FRECPE_Z_Z__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_FRECPE_Z_Z__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPRecipEstimate(element, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FRECPE_Z_Z__ : (bits(2), bits(5), bits(5)) -> unit

function decode_FRECPE_Z_Z__ (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FRECPE_Z_Z__(128, d, esize, n)
      },
      256 => {
          execute_FRECPE_Z_Z__(256, d, esize, n)
      },
      512 => {
          execute_FRECPE_Z_Z__(512, d, esize, n)
      },
      1024 => {
          execute_FRECPE_Z_Z__(1024, d, esize, n)
      },
      2048 => {
          execute_FRECPE_Z_Z__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1078) = {
    SEE = 1078;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRECPE_Z_Z__(size, Zn, Zd)
}

val execute_FRSQRTE_Z_Z__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_FRSQRTE_Z_Z__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPRSqrtEstimate(element, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FRSQRTE_Z_Z__ : (bits(2), bits(5), bits(5)) -> unit

function decode_FRSQRTE_Z_Z__ (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FRSQRTE_Z_Z__(128, d, esize, n)
      },
      256 => {
          execute_FRSQRTE_Z_Z__(256, d, esize, n)
      },
      512 => {
          execute_FRSQRTE_Z_Z__(512, d, esize, n)
      },
      1024 => {
          execute_FRSQRTE_Z_Z__(1024, d, esize, n)
      },
      2048 => {
          execute_FRSQRTE_Z_Z__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1079) = {
    SEE = 1079;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRSQRTE_Z_Z__(size, Zn, Zd)
}

val execute_FRECPX_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FRECPX_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRecpX(element, FPCR_read()))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRECPX_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRECPX_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FRECPX_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FRECPX_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FRECPX_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FRECPX_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FRECPX_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1080) = {
    SEE = 1080;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRECPX_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FSQRT_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FSQRT_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPSqrt(element, FPCR_read()))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FSQRT_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FSQRT_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FSQRT_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FSQRT_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FSQRT_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FSQRT_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FSQRT_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1081) = {
    SEE = 1081;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FSQRT_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FRINTA_Z_P_Z__ : forall 'VL 'd 'esize ('exact : Bool) 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('exact), int('g), int('n), FPRounding) -> unit

function execute_FRINTA_Z_P_Z__ (VL, d, esize, exact, g, n, rounding) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRoundInt(element, FPCR_read(), rounding, exact))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRINTA_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRINTA_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_TIEAWAY;
    match VL {
      128 => {
          execute_FRINTA_Z_P_Z__(128, d, esize, exact, g, n, rounding)
      },
      256 => {
          execute_FRINTA_Z_P_Z__(256, d, esize, exact, g, n, rounding)
      },
      512 => {
          execute_FRINTA_Z_P_Z__(512, d, esize, exact, g, n, rounding)
      },
      1024 => {
          execute_FRINTA_Z_P_Z__(1024, d, esize, exact, g, n, rounding)
      },
      2048 => {
          execute_FRINTA_Z_P_Z__(2048, d, esize, exact, g, n, rounding)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1082) = {
    SEE = 1082;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRINTA_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FRINTI_Z_P_Z__ : forall 'VL 'd 'esize ('exact : Bool) 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('exact), int('g), int('n), FPRounding) -> unit

function execute_FRINTI_Z_P_Z__ (VL, d, esize, exact, g, n, rounding) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRoundInt(element, FPCR_read(), rounding, exact))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRINTI_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRINTI_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let exact : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_FRINTI_Z_P_Z__(128, d, esize, exact, g, n, rounding)
      },
      256 => {
          execute_FRINTI_Z_P_Z__(256, d, esize, exact, g, n, rounding)
      },
      512 => {
          execute_FRINTI_Z_P_Z__(512, d, esize, exact, g, n, rounding)
      },
      1024 => {
          execute_FRINTI_Z_P_Z__(1024, d, esize, exact, g, n, rounding)
      },
      2048 => {
          execute_FRINTI_Z_P_Z__(2048, d, esize, exact, g, n, rounding)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1083) = {
    SEE = 1083;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRINTI_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FRINTM_Z_P_Z__ : forall 'VL 'd 'esize ('exact : Bool) 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('exact), int('g), int('n), FPRounding) -> unit

function execute_FRINTM_Z_P_Z__ (VL, d, esize, exact, g, n, rounding) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRoundInt(element, FPCR_read(), rounding, exact))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRINTM_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRINTM_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_NEGINF;
    match VL {
      128 => {
          execute_FRINTM_Z_P_Z__(128, d, esize, exact, g, n, rounding)
      },
      256 => {
          execute_FRINTM_Z_P_Z__(256, d, esize, exact, g, n, rounding)
      },
      512 => {
          execute_FRINTM_Z_P_Z__(512, d, esize, exact, g, n, rounding)
      },
      1024 => {
          execute_FRINTM_Z_P_Z__(1024, d, esize, exact, g, n, rounding)
      },
      2048 => {
          execute_FRINTM_Z_P_Z__(2048, d, esize, exact, g, n, rounding)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1084) = {
    SEE = 1084;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRINTM_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FRINTN_Z_P_Z__ : forall 'VL 'd 'esize ('exact : Bool) 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('exact), int('g), int('n), FPRounding) -> unit

function execute_FRINTN_Z_P_Z__ (VL, d, esize, exact, g, n, rounding) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRoundInt(element, FPCR_read(), rounding, exact))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRINTN_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRINTN_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_TIEEVEN;
    match VL {
      128 => {
          execute_FRINTN_Z_P_Z__(128, d, esize, exact, g, n, rounding)
      },
      256 => {
          execute_FRINTN_Z_P_Z__(256, d, esize, exact, g, n, rounding)
      },
      512 => {
          execute_FRINTN_Z_P_Z__(512, d, esize, exact, g, n, rounding)
      },
      1024 => {
          execute_FRINTN_Z_P_Z__(1024, d, esize, exact, g, n, rounding)
      },
      2048 => {
          execute_FRINTN_Z_P_Z__(2048, d, esize, exact, g, n, rounding)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1085) = {
    SEE = 1085;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRINTN_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FRINTP_Z_P_Z__ : forall 'VL 'd 'esize ('exact : Bool) 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('exact), int('g), int('n), FPRounding) -> unit

function execute_FRINTP_Z_P_Z__ (VL, d, esize, exact, g, n, rounding) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRoundInt(element, FPCR_read(), rounding, exact))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRINTP_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRINTP_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_POSINF;
    match VL {
      128 => {
          execute_FRINTP_Z_P_Z__(128, d, esize, exact, g, n, rounding)
      },
      256 => {
          execute_FRINTP_Z_P_Z__(256, d, esize, exact, g, n, rounding)
      },
      512 => {
          execute_FRINTP_Z_P_Z__(512, d, esize, exact, g, n, rounding)
      },
      1024 => {
          execute_FRINTP_Z_P_Z__(1024, d, esize, exact, g, n, rounding)
      },
      2048 => {
          execute_FRINTP_Z_P_Z__(2048, d, esize, exact, g, n, rounding)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1086) = {
    SEE = 1086;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRINTP_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FRINTX_Z_P_Z__ : forall 'VL 'd 'esize ('exact : Bool) 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('exact), int('g), int('n), FPRounding) -> unit

function execute_FRINTX_Z_P_Z__ (VL, d, esize, exact, g, n, rounding) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRoundInt(element, FPCR_read(), rounding, exact))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRINTX_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRINTX_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let exact : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_FRINTX_Z_P_Z__(128, d, esize, exact, g, n, rounding)
      },
      256 => {
          execute_FRINTX_Z_P_Z__(256, d, esize, exact, g, n, rounding)
      },
      512 => {
          execute_FRINTX_Z_P_Z__(512, d, esize, exact, g, n, rounding)
      },
      1024 => {
          execute_FRINTX_Z_P_Z__(1024, d, esize, exact, g, n, rounding)
      },
      2048 => {
          execute_FRINTX_Z_P_Z__(2048, d, esize, exact, g, n, rounding)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1087) = {
    SEE = 1087;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRINTX_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FRINTZ_Z_P_Z__ : forall 'VL 'd 'esize ('exact : Bool) 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('exact), int('g), int('n), FPRounding) -> unit

function execute_FRINTZ_Z_P_Z__ (VL, d, esize, exact, g, n, rounding) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPRoundInt(element, FPCR_read(), rounding, exact))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FRINTZ_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FRINTZ_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let exact : bool = false;
    let rounding : FPRounding = FPRounding_ZERO;
    match VL {
      128 => {
          execute_FRINTZ_Z_P_Z__(128, d, esize, exact, g, n, rounding)
      },
      256 => {
          execute_FRINTZ_Z_P_Z__(256, d, esize, exact, g, n, rounding)
      },
      512 => {
          execute_FRINTZ_Z_P_Z__(512, d, esize, exact, g, n, rounding)
      },
      1024 => {
          execute_FRINTZ_Z_P_Z__(1024, d, esize, exact, g, n, rounding)
      },
      2048 => {
          execute_FRINTZ_Z_P_Z__(2048, d, esize, exact, g, n, rounding)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1088) = {
    SEE = 1088;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRINTZ_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_UCVTF_Z_P_Z_X2S : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_UCVTF_Z_P_Z_X2S (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UCVTF_Z_P_Z_X2S : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UCVTF_Z_P_Z_X2S (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 32;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_Z_P_Z_X2S(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_UCVTF_Z_P_Z_X2S(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_UCVTF_Z_P_Z_X2S(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_UCVTF_Z_P_Z_X2S(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_UCVTF_Z_P_Z_X2S(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1089) = {
    SEE = 1089;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCVTF_Z_P_Z_X2S(int_U, Pg, Zn, Zd)
}

val execute_UCVTF_Z_P_Z_X2D : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_UCVTF_Z_P_Z_X2D (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UCVTF_Z_P_Z_X2D : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UCVTF_Z_P_Z_X2D (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 64;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_Z_P_Z_X2D(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_UCVTF_Z_P_Z_X2D(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_UCVTF_Z_P_Z_X2D(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_UCVTF_Z_P_Z_X2D(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_UCVTF_Z_P_Z_X2D(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1090) = {
    SEE = 1090;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCVTF_Z_P_Z_X2D(int_U, Pg, Zn, Zd)
}

val execute_UCVTF_Z_P_Z_W2S : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_UCVTF_Z_P_Z_W2S (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UCVTF_Z_P_Z_W2S : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UCVTF_Z_P_Z_W2S (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 32;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_Z_P_Z_W2S(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_UCVTF_Z_P_Z_W2S(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_UCVTF_Z_P_Z_W2S(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_UCVTF_Z_P_Z_W2S(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_UCVTF_Z_P_Z_W2S(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1091) = {
    SEE = 1091;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCVTF_Z_P_Z_W2S(int_U, Pg, Zn, Zd)
}

val execute_UCVTF_Z_P_Z_W2D : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_UCVTF_Z_P_Z_W2D (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UCVTF_Z_P_Z_W2D : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UCVTF_Z_P_Z_W2D (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 64;
    let is_unsigned : bool = true;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_UCVTF_Z_P_Z_W2D(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_UCVTF_Z_P_Z_W2D(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_UCVTF_Z_P_Z_W2D(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_UCVTF_Z_P_Z_W2D(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_UCVTF_Z_P_Z_W2D(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1092) = {
    SEE = 1092;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCVTF_Z_P_Z_W2D(int_U, Pg, Zn, Zd)
}

val execute_SCVTF_Z_P_Z_X2S : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_SCVTF_Z_P_Z_X2S (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SCVTF_Z_P_Z_X2S : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SCVTF_Z_P_Z_X2S (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 32;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_Z_P_Z_X2S(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_SCVTF_Z_P_Z_X2S(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_SCVTF_Z_P_Z_X2S(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_SCVTF_Z_P_Z_X2S(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_SCVTF_Z_P_Z_X2S(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1093) = {
    SEE = 1093;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCVTF_Z_P_Z_X2S(int_U, Pg, Zn, Zd)
}

val execute_SCVTF_Z_P_Z_X2D : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_SCVTF_Z_P_Z_X2D (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SCVTF_Z_P_Z_X2D : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SCVTF_Z_P_Z_X2D (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 64;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_Z_P_Z_X2D(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_SCVTF_Z_P_Z_X2D(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_SCVTF_Z_P_Z_X2D(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_SCVTF_Z_P_Z_X2D(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_SCVTF_Z_P_Z_X2D(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1094) = {
    SEE = 1094;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCVTF_Z_P_Z_X2D(int_U, Pg, Zn, Zd)
}

val execute_SCVTF_Z_P_Z_W2S : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_SCVTF_Z_P_Z_W2S (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SCVTF_Z_P_Z_W2S : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SCVTF_Z_P_Z_W2S (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 32;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_Z_P_Z_W2S(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_SCVTF_Z_P_Z_W2S(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_SCVTF_Z_P_Z_W2S(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_SCVTF_Z_P_Z_W2S(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_SCVTF_Z_P_Z_W2S(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1095) = {
    SEE = 1095;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCVTF_Z_P_Z_W2S(int_U, Pg, Zn, Zd)
}

val execute_SCVTF_Z_P_Z_W2D : forall 'VL 'd 'd_esize 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), FPRounding, int('s_esize), bool('is_unsigned)) -> unit

function execute_SCVTF_Z_P_Z_W2D (VL, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let fpval : bits('d_esize) = FixedToFP(element[s_esize - 1 .. 0], 0, is_unsigned, FPCR_read(), rounding, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(fpval, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SCVTF_Z_P_Z_W2D : (bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SCVTF_Z_P_Z_W2D (int_U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 32;
    let 'd_esize = 64;
    let is_unsigned : bool = false;
    let rounding : FPRounding = FPRoundingMode(FPCR_read());
    match VL {
      128 => {
          execute_SCVTF_Z_P_Z_W2D(128, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      256 => {
          execute_SCVTF_Z_P_Z_W2D(256, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      512 => {
          execute_SCVTF_Z_P_Z_W2D(512, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      1024 => {
          execute_SCVTF_Z_P_Z_W2D(1024, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      },
      2048 => {
          execute_SCVTF_Z_P_Z_W2D(2048, d, d_esize, esize, g, n, rounding, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1096) = {
    SEE = 1096;
    let int_U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCVTF_Z_P_Z_W2D(int_U, Pg, Zn, Zd)
}

val execute_FABD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FABD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPAbs(FPSub(element1, element2, FPCR_read())))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FABD_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FABD_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FABD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FABD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FABD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FABD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FABD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1097) = {
    SEE = 1097;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FABD_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPAdd(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FADD_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FADD_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1098) = {
    SEE = 1098;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FADD_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FDIV_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FDIV_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPDiv(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FDIV_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FDIV_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FDIV_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FDIV_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FDIV_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FDIV_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FDIV_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1099) = {
    SEE = 1099;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FDIV_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FDIVR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FDIVR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPDiv(element2, element1, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FDIVR_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FDIVR_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FDIVR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FDIVR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FDIVR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FDIVR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FDIVR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1100) = {
    SEE = 1100;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FDIVR_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMAXNM_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMAXNM_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMaxNum(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMAXNM_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAXNM_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FMAXNM_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMAXNM_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMAXNM_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMAXNM_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMAXNM_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1101) = {
    SEE = 1101;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMAXNM_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMINNM_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMINNM_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMinNum(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMINNM_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMINNM_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FMINNM_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMINNM_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMINNM_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMINNM_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMINNM_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1102) = {
    SEE = 1102;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMINNM_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMAX_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMAX_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMax(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMAX_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAX_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FMAX_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMAX_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMAX_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMAX_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMAX_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1103) = {
    SEE = 1103;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMAX_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMIN_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMIN_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMin(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMIN_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMIN_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FMIN_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMIN_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMIN_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMIN_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMIN_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1104) = {
    SEE = 1104;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMIN_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMUL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMUL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMul(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMUL_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMUL_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FMUL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMUL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMUL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMUL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMUL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1105) = {
    SEE = 1105;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMUL_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMULX_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMULX_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulX(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMULX_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMULX_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FMULX_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMULX_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMULX_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMULX_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMULX_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1106) = {
    SEE = 1106;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMULX_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FSCALE_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FSCALE_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let 'element2 = SInt(Elem_read(operand2, e, esize));
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPScale(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FSCALE_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FSCALE_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FSCALE_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FSCALE_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FSCALE_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FSCALE_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FSCALE_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1107) = {
    SEE = 1107;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FSCALE_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FSUB_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FSUB_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPSub(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FSUB_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FSUB_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FSUB_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FSUB_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FSUB_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FSUB_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FSUB_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1108) = {
    SEE = 1108;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FSUB_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FSUBR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FSUBR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPSub(element2, element1, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_FSUBR_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FSUBR_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_FSUBR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FSUBR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FSUBR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FSUBR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FSUBR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1109) = {
    SEE = 1109;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FSUBR_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FADDV_V_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FADDV_V_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPZero(0b0, esize);
    V_set(d, esize) = ReducePredicated(ReduceOp_FADD, operand, mask, identity)
}

val decode_FADDV_V_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FADDV_V_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FADDV_V_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FADDV_V_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FADDV_V_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FADDV_V_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FADDV_V_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1110) = {
    SEE = 1110;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FADDV_V_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMAXNMV_V_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMAXNMV_V_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPDefaultNaN(esize);
    V_set(d, esize) = ReducePredicated(ReduceOp_FMAXNUM, operand, mask, identity)
}

val decode_FMAXNMV_V_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAXNMV_V_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMAXNMV_V_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMAXNMV_V_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMAXNMV_V_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMAXNMV_V_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMAXNMV_V_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1111) = {
    SEE = 1111;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMAXNMV_V_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMINNMV_V_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMINNMV_V_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPDefaultNaN(esize);
    V_set(d, esize) = ReducePredicated(ReduceOp_FMINNUM, operand, mask, identity)
}

val decode_FMINNMV_V_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMINNMV_V_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMINNMV_V_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMINNMV_V_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMINNMV_V_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMINNMV_V_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMINNMV_V_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1112) = {
    SEE = 1112;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMINNMV_V_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMAXV_V_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMAXV_V_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPInfinity(0b1, esize);
    V_set(d, esize) = ReducePredicated(ReduceOp_FMAX, operand, mask, identity)
}

val decode_FMAXV_V_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAXV_V_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMAXV_V_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMAXV_V_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMAXV_V_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMAXV_V_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMAXV_V_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1113) = {
    SEE = 1113;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMAXV_V_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMINV_V_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMINV_V_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPInfinity(0b0, esize);
    V_set(d, esize) = ReducePredicated(ReduceOp_FMIN, operand, mask, identity)
}

val decode_FMINV_V_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMINV_V_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMINV_V_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMINV_V_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMINV_V_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMINV_V_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMINV_V_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1114) = {
    SEE = 1114;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMINV_V_P_Z__(size, Pg, Zn, Vd)
}

val execute_FACGE_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp) -> unit

function execute_FACGE_P_P_ZZ__ (VL, d, esize, g, m, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            res : bool = undefined;
            match op {
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(FPAbs(element1), FPAbs(element2), FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(FPAbs(element1), FPAbs(element2), FPCR_read())
              },
              _ => PatternMatchFailure("execute_FACGE_P_P_ZZ__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FACGE_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_FACGE_P_P_ZZ__ (size, Zm, Pg, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    match VL {
      128 => {
          execute_FACGE_P_P_ZZ__(128, d, esize, g, m, n, op)
      },
      256 => {
          execute_FACGE_P_P_ZZ__(256, d, esize, g, m, n, op)
      },
      512 => {
          execute_FACGE_P_P_ZZ__(512, d, esize, g, m, n, op)
      },
      1024 => {
          execute_FACGE_P_P_ZZ__(1024, d, esize, g, m, n, op)
      },
      2048 => {
          execute_FACGE_P_P_ZZ__(2048, d, esize, g, m, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1115) = {
    SEE = 1115;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_FACGE_P_P_ZZ__(size, Zm, Pg, Zn, Pd)
}

val execute_FACGT_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp) -> unit

function execute_FACGT_P_P_ZZ__ (VL, d, esize, g, m, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            res : bool = undefined;
            match op {
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(FPAbs(element1), FPAbs(element2), FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(FPAbs(element1), FPAbs(element2), FPCR_read())
              },
              _ => PatternMatchFailure("execute_FACGT_P_P_ZZ__")
            };
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FACGT_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_FACGT_P_P_ZZ__ (size, Zm, Pg, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    match VL {
      128 => {
          execute_FACGT_P_P_ZZ__(128, d, esize, g, m, n, op)
      },
      256 => {
          execute_FACGT_P_P_ZZ__(256, d, esize, g, m, n, op)
      },
      512 => {
          execute_FACGT_P_P_ZZ__(512, d, esize, g, m, n, op)
      },
      1024 => {
          execute_FACGT_P_P_ZZ__(1024, d, esize, g, m, n, op)
      },
      2048 => {
          execute_FACGT_P_P_ZZ__(2048, d, esize, g, m, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1116) = {
    SEE = 1116;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_FACGT_P_P_ZZ__(size, Zm, Pg, Zn, Pd)
}

val execute_FCMUO_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp) -> unit

function execute_FCMUO_P_P_ZZ__ (VL, d, esize, g, m, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element1, element2, FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element1, element2, FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element1, element2, FPCR_read())
              },
              Cmp_UN => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareUN(element1, element2, FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element1, element2, FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element2, element1, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element2, element1, FPCR_read())
              }
            };
            let res = res;
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMUO_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_FCMUO_P_P_ZZ__ (size, Zm, Pg, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_UN;
    match VL {
      128 => {
          execute_FCMUO_P_P_ZZ__(128, d, esize, g, m, n, op)
      },
      256 => {
          execute_FCMUO_P_P_ZZ__(256, d, esize, g, m, n, op)
      },
      512 => {
          execute_FCMUO_P_P_ZZ__(512, d, esize, g, m, n, op)
      },
      1024 => {
          execute_FCMUO_P_P_ZZ__(1024, d, esize, g, m, n, op)
      },
      2048 => {
          execute_FCMUO_P_P_ZZ__(2048, d, esize, g, m, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1117) = {
    SEE = 1117;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMUO_P_P_ZZ__(size, Zm, Pg, Zn, Pd)
}

val execute_FCMGE_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp) -> unit

function execute_FCMGE_P_P_ZZ__ (VL, d, esize, g, m, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element1, element2, FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element1, element2, FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element1, element2, FPCR_read())
              },
              Cmp_UN => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareUN(element1, element2, FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element1, element2, FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element2, element1, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element2, element1, FPCR_read())
              }
            };
            let res = res;
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMGE_P_P_ZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMGE_P_P_ZZ__ (size, Zm, cmph, Pg, Zn, cmpl, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    match VL {
      128 => {
          execute_FCMGE_P_P_ZZ__(128, d, esize, g, m, n, op)
      },
      256 => {
          execute_FCMGE_P_P_ZZ__(256, d, esize, g, m, n, op)
      },
      512 => {
          execute_FCMGE_P_P_ZZ__(512, d, esize, g, m, n, op)
      },
      1024 => {
          execute_FCMGE_P_P_ZZ__(1024, d, esize, g, m, n, op)
      },
      2048 => {
          execute_FCMGE_P_P_ZZ__(2048, d, esize, g, m, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1118) = {
    SEE = 1118;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let cmph = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let cmpl = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMGE_P_P_ZZ__(size, Zm, cmph, Pg, Zn, cmpl, Pd)
}

val execute_FCMGT_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp) -> unit

function execute_FCMGT_P_P_ZZ__ (VL, d, esize, g, m, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element1, element2, FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element1, element2, FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element1, element2, FPCR_read())
              },
              Cmp_UN => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareUN(element1, element2, FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element1, element2, FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element2, element1, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element2, element1, FPCR_read())
              }
            };
            let res = res;
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMGT_P_P_ZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMGT_P_P_ZZ__ (size, Zm, cmph, Pg, Zn, cmpl, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    match VL {
      128 => {
          execute_FCMGT_P_P_ZZ__(128, d, esize, g, m, n, op)
      },
      256 => {
          execute_FCMGT_P_P_ZZ__(256, d, esize, g, m, n, op)
      },
      512 => {
          execute_FCMGT_P_P_ZZ__(512, d, esize, g, m, n, op)
      },
      1024 => {
          execute_FCMGT_P_P_ZZ__(1024, d, esize, g, m, n, op)
      },
      2048 => {
          execute_FCMGT_P_P_ZZ__(2048, d, esize, g, m, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1119) = {
    SEE = 1119;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let cmph = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let cmpl = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMGT_P_P_ZZ__(size, Zm, cmph, Pg, Zn, cmpl, Pd)
}

val execute_FCMEQ_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp) -> unit

function execute_FCMEQ_P_P_ZZ__ (VL, d, esize, g, m, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element1, element2, FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element1, element2, FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element1, element2, FPCR_read())
              },
              Cmp_UN => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareUN(element1, element2, FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element1, element2, FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element2, element1, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element2, element1, FPCR_read())
              }
            };
            let res = res;
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMEQ_P_P_ZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMEQ_P_P_ZZ__ (size, Zm, cmph, Pg, Zn, cmpl, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_EQ;
    match VL {
      128 => {
          execute_FCMEQ_P_P_ZZ__(128, d, esize, g, m, n, op)
      },
      256 => {
          execute_FCMEQ_P_P_ZZ__(256, d, esize, g, m, n, op)
      },
      512 => {
          execute_FCMEQ_P_P_ZZ__(512, d, esize, g, m, n, op)
      },
      1024 => {
          execute_FCMEQ_P_P_ZZ__(1024, d, esize, g, m, n, op)
      },
      2048 => {
          execute_FCMEQ_P_P_ZZ__(2048, d, esize, g, m, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1120) = {
    SEE = 1120;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let cmph = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let cmpl = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMEQ_P_P_ZZ__(size, Zm, cmph, Pg, Zn, cmpl, Pd)
}

val execute_FCMNE_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp) -> unit

function execute_FCMNE_P_P_ZZ__ (VL, d, esize, g, m, n, op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            res : bool = undefined;
            match op {
              Cmp_EQ => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareEQ(element1, element2, FPCR_read())
              },
              Cmp_GE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element1, element2, FPCR_read())
              },
              Cmp_GT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element1, element2, FPCR_read())
              },
              Cmp_UN => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareUN(element1, element2, FPCR_read())
              },
              Cmp_NE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareNE(element1, element2, FPCR_read())
              },
              Cmp_LT => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGT(element2, element1, FPCR_read())
              },
              Cmp_LE => {
                  assert(constraint('esize in {16, 32, 64}));
                  res = FPCompareGE(element2, element1, FPCR_read())
              }
            };
            let res = res;
            let pbit : bits(1) = if res then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_FCMNE_P_P_ZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_FCMNE_P_P_ZZ__ (size, Zm, cmph, Pg, Zn, cmpl, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_NE;
    match VL {
      128 => {
          execute_FCMNE_P_P_ZZ__(128, d, esize, g, m, n, op)
      },
      256 => {
          execute_FCMNE_P_P_ZZ__(256, d, esize, g, m, n, op)
      },
      512 => {
          execute_FCMNE_P_P_ZZ__(512, d, esize, g, m, n, op)
      },
      1024 => {
          execute_FCMNE_P_P_ZZ__(1024, d, esize, g, m, n, op)
      },
      2048 => {
          execute_FCMNE_P_P_ZZ__(2048, d, esize, g, m, n, op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1121) = {
    SEE = 1121;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let cmph = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let cmpl = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_FCMNE_P_P_ZZ__(size, Zm, cmph, Pg, Zn, cmpl, Pd)
}

val execute_FMLA_Z_P_ZZZ__ : forall 'VL 'da 'esize 'g 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLA_Z_P_ZZZ__ (VL, da, esize, g, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand3, e, esize))
        }
    };
    Z_set(da, VL) = result
}

val decode_FMLA_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FMLA_Z_P_ZZZ__ (size, Zm, N, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLA_Z_P_ZZZ__(128, da, esize, g, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLA_Z_P_ZZZ__(256, da, esize, g, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLA_Z_P_ZZZ__(512, da, esize, g, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLA_Z_P_ZZZ__(1024, da, esize, g, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLA_Z_P_ZZZ__(2048, da, esize, g, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1122) = {
    SEE = 1122;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLA_Z_P_ZZZ__(size, Zm, N, op, Pg, Zn, Zda)
}

val execute_FMLS_Z_P_ZZZ__ : forall 'VL 'da 'esize 'g 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLS_Z_P_ZZZ__ (VL, da, esize, g, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand3, e, esize))
        }
    };
    Z_set(da, VL) = result
}

val decode_FMLS_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FMLS_Z_P_ZZZ__ (size, Zm, N, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLS_Z_P_ZZZ__(128, da, esize, g, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLS_Z_P_ZZZ__(256, da, esize, g, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLS_Z_P_ZZZ__(512, da, esize, g, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLS_Z_P_ZZZ__(1024, da, esize, g, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLS_Z_P_ZZZ__(2048, da, esize, g, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1123) = {
    SEE = 1123;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLS_Z_P_ZZZ__(size, Zm, N, op, Pg, Zn, Zda)
}

val execute_FNMLA_Z_P_ZZZ__ : forall 'VL 'da 'esize 'g 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FNMLA_Z_P_ZZZ__ (VL, da, esize, g, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand3, e, esize))
        }
    };
    Z_set(da, VL) = result
}

val decode_FNMLA_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FNMLA_Z_P_ZZZ__ (size, Zm, N, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    let op3_neg : bool = true;
    match VL {
      128 => {
          execute_FNMLA_Z_P_ZZZ__(128, da, esize, g, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FNMLA_Z_P_ZZZ__(256, da, esize, g, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FNMLA_Z_P_ZZZ__(512, da, esize, g, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FNMLA_Z_P_ZZZ__(1024, da, esize, g, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FNMLA_Z_P_ZZZ__(2048, da, esize, g, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1124) = {
    SEE = 1124;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FNMLA_Z_P_ZZZ__(size, Zm, N, op, Pg, Zn, Zda)
}

val execute_FNMLS_Z_P_ZZZ__ : forall 'VL 'da 'esize 'g 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FNMLS_Z_P_ZZZ__ (VL, da, esize, g, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand3, e, esize))
        }
    };
    Z_set(da, VL) = result
}

val decode_FNMLS_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FNMLS_Z_P_ZZZ__ (size, Zm, N, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    let op3_neg : bool = true;
    match VL {
      128 => {
          execute_FNMLS_Z_P_ZZZ__(128, da, esize, g, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FNMLS_Z_P_ZZZ__(256, da, esize, g, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FNMLS_Z_P_ZZZ__(512, da, esize, g, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FNMLS_Z_P_ZZZ__(1024, da, esize, g, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FNMLS_Z_P_ZZZ__(2048, da, esize, g, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1125) = {
    SEE = 1125;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FNMLS_Z_P_ZZZ__(size, Zm, N, op, Pg, Zn, Zda)
}

val execute_FMAD_Z_P_ZZZ__ : forall 'VL 'a 'dn 'esize 'g 'm ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 0 <= 'a & 'a <= 31 & is_VL('VL)).
  (int('VL), int('a), int('dn), int('esize), int('g), int('m), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMAD_Z_P_ZZZ__ (VL, a, dn, esize, g, m, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(a, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMAD_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FMAD_Z_P_ZZZ__ (size, Za, N, op, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'a = UInt(Za);
    let op1_neg : bool = false;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMAD_Z_P_ZZZ__(128, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      256 => {
          execute_FMAD_Z_P_ZZZ__(256, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      512 => {
          execute_FMAD_Z_P_ZZZ__(512, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMAD_Z_P_ZZZ__(1024, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMAD_Z_P_ZZZ__(2048, a, dn, esize, g, m, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1126) = {
    SEE = 1126;
    let size = Slice(__opcode, 22, 2);
    let Za = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMAD_Z_P_ZZZ__(size, Za, N, op, Pg, Zm, Zdn)
}

val execute_FMSB_Z_P_ZZZ__ : forall 'VL 'a 'dn 'esize 'g 'm ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 0 <= 'a & 'a <= 31 & is_VL('VL)).
  (int('VL), int('a), int('dn), int('esize), int('g), int('m), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMSB_Z_P_ZZZ__ (VL, a, dn, esize, g, m, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(a, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_FMSB_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FMSB_Z_P_ZZZ__ (size, Za, N, op, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'a = UInt(Za);
    let op1_neg : bool = true;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMSB_Z_P_ZZZ__(128, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      256 => {
          execute_FMSB_Z_P_ZZZ__(256, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      512 => {
          execute_FMSB_Z_P_ZZZ__(512, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMSB_Z_P_ZZZ__(1024, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMSB_Z_P_ZZZ__(2048, a, dn, esize, g, m, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1127) = {
    SEE = 1127;
    let size = Slice(__opcode, 22, 2);
    let Za = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMSB_Z_P_ZZZ__(size, Za, N, op, Pg, Zm, Zdn)
}

val execute_FNMAD_Z_P_ZZZ__ : forall 'VL 'a 'dn 'esize 'g 'm ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 0 <= 'a & 'a <= 31 & is_VL('VL)).
  (int('VL), int('a), int('dn), int('esize), int('g), int('m), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FNMAD_Z_P_ZZZ__ (VL, a, dn, esize, g, m, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(a, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_FNMAD_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FNMAD_Z_P_ZZZ__ (size, Za, N, op, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'a = UInt(Za);
    let op1_neg : bool = true;
    let op3_neg : bool = true;
    match VL {
      128 => {
          execute_FNMAD_Z_P_ZZZ__(128, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      256 => {
          execute_FNMAD_Z_P_ZZZ__(256, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      512 => {
          execute_FNMAD_Z_P_ZZZ__(512, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      1024 => {
          execute_FNMAD_Z_P_ZZZ__(1024, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      2048 => {
          execute_FNMAD_Z_P_ZZZ__(2048, a, dn, esize, g, m, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1128) = {
    SEE = 1128;
    let size = Slice(__opcode, 22, 2);
    let Za = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FNMAD_Z_P_ZZZ__(size, Za, N, op, Pg, Zm, Zdn)
}

val execute_FNMSB_Z_P_ZZZ__ : forall 'VL 'a 'dn 'esize 'g 'm ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 0 <= 'a & 'a <= 31 & is_VL('VL)).
  (int('VL), int('a), int('dn), int('esize), int('g), int('m), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FNMSB_Z_P_ZZZ__ (VL, a, dn, esize, g, m, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(a, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            element3 : bits('esize) = Elem_read(operand3, e, esize);
            if op1_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element1 = FPNeg(element1)
            };
            if op3_neg then {
                assert(constraint('esize in {16, 32, 64}));
                element3 = FPNeg(element3)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_FNMSB_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FNMSB_Z_P_ZZZ__ (size, Za, N, op, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'a = UInt(Za);
    let op1_neg : bool = false;
    let op3_neg : bool = true;
    match VL {
      128 => {
          execute_FNMSB_Z_P_ZZZ__(128, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      256 => {
          execute_FNMSB_Z_P_ZZZ__(256, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      512 => {
          execute_FNMSB_Z_P_ZZZ__(512, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      1024 => {
          execute_FNMSB_Z_P_ZZZ__(1024, a, dn, esize, g, m, op1_neg, op3_neg)
      },
      2048 => {
          execute_FNMSB_Z_P_ZZZ__(2048, a, dn, esize, g, m, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1129) = {
    SEE = 1129;
    let size = Slice(__opcode, 22, 2);
    let Za = Slice(__opcode, 16, 5);
    let N = Slice(__opcode, 14, 1);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FNMSB_Z_P_ZZZ__(size, Za, N, op, Pg, Zm, Zdn)
}

val execute_FADD_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FADD_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPAdd(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FADD_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FADD_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FADD_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FADD_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FADD_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FADD_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FADD_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1130) = {
    SEE = 1130;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FADD_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FMUL_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FMUL_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPMul(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FMUL_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FMUL_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FMUL_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FMUL_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FMUL_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FMUL_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FMUL_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1131) = {
    SEE = 1131;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FMUL_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FSUB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FSUB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPSub(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FSUB_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FSUB_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FSUB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FSUB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FSUB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FSUB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FSUB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1132) = {
    SEE = 1132;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FSUB_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FTSMUL_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FTSMUL_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPTrigSMul(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FTSMUL_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FTSMUL_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FTSMUL_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FTSMUL_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FTSMUL_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FTSMUL_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FTSMUL_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1133) = {
    SEE = 1133;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FTSMUL_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FRECPS_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FRECPS_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPRecipStepFused(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_FRECPS_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FRECPS_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FRECPS_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FRECPS_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FRECPS_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FRECPS_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FRECPS_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1134) = {
    SEE = 1134;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRECPS_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FRSQRTS_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FRSQRTS_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPRSqrtStepFused(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_FRSQRTS_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FRSQRTS_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FRSQRTS_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FRSQRTS_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FRSQRTS_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FRSQRTS_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FRSQRTS_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1135) = {
    SEE = 1135;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FRSQRTS_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FTSSEL_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FTSSEL_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPTrigSSel(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_FTSSEL_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FTSSEL_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FTSSEL_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FTSSEL_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FTSSEL_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FTSSEL_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FTSSEL_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1136) = {
    SEE = 1136;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FTSSEL_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FEXPA_Z_Z__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_FEXPA_Z_Z__ (VL, d, esize, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPExpA(element))
    };
    Z_set(d, VL) = result
}

val decode_FEXPA_Z_Z__ : (bits(2), bits(5), bits(5)) -> unit

function decode_FEXPA_Z_Z__ (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FEXPA_Z_Z__(128, d, esize, n)
      },
      256 => {
          execute_FEXPA_Z_Z__(256, d, esize, n)
      },
      512 => {
          execute_FEXPA_Z_Z__(512, d, esize, n)
      },
      1024 => {
          execute_FEXPA_Z_Z__(1024, d, esize, n)
      },
      2048 => {
          execute_FEXPA_Z_Z__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1137) = {
    SEE = 1137;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FEXPA_Z_Z__(size, Zn, Zd)
}

val execute_FTMAD_Z_ZZI__ : forall 'VL 'dn 'esize 'imm 'm,
  (0 <= 'm & 'm <= 31 & 'imm in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), int('m)) -> unit

function execute_FTMAD_Z_ZZI__ (VL, dn, esize, imm, m) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPTrigMAdd(imm, element1, element2, FPCR_read()))
    };
    Z_set(dn, VL) = result
}

val decode_FTMAD_Z_ZZI__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FTMAD_Z_ZZI__ (size, imm3, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'imm = UInt(imm3);
    match VL {
      128 => {
          execute_FTMAD_Z_ZZI__(128, dn, esize, imm, m)
      },
      256 => {
          execute_FTMAD_Z_ZZI__(256, dn, esize, imm, m)
      },
      512 => {
          execute_FTMAD_Z_ZZI__(512, dn, esize, imm, m)
      },
      1024 => {
          execute_FTMAD_Z_ZZI__(1024, dn, esize, imm, m)
      },
      2048 => {
          execute_FTMAD_Z_ZZI__(2048, dn, esize, imm, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitzero, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1138) = {
    SEE = 1138;
    let size = Slice(__opcode, 22, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FTMAD_Z_ZZI__(size, imm3, Zm, Zdn)
}

val execute_FCADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm ('sub_i : Bool) ('sub_r : Bool),
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('sub_i), bool('sub_r)) -> unit

function execute_FCADD_Z_P_ZZ__ (VL, dn, esize, g, m, sub_i, sub_r) = {
    acc_i : bits('esize) = undefined;
    acc_r : bits('esize) = undefined;
    elt2_i : bits('esize) = undefined;
    elt2_r : bits('esize) = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        acc_r = Elem_read(operand1, 2 * p + 0, esize);
        acc_i = Elem_read(operand1, 2 * p + 1, esize);
        if ActivePredicateElement(mask, 2 * p + 0, esize) then {
            elt2_i = Elem_read(operand2, 2 * p + 1, esize);
            if sub_i then {
                assert(constraint('esize in {16, 32, 64}));
                elt2_i = FPNeg(elt2_i)
            };
            assert(constraint('esize in {16, 32, 64}));
            acc_r = FPAdd(acc_r, elt2_i, FPCR_read())
        };
        if ActivePredicateElement(mask, 2 * p + 1, esize) then {
            elt2_r = Elem_read(operand2, 2 * p + 0, esize);
            if sub_r then {
                assert(constraint('esize in {16, 32, 64}));
                elt2_r = FPNeg(elt2_r)
            };
            assert(constraint('esize in {16, 32, 64}));
            acc_i = FPAdd(acc_i, elt2_r, FPCR_read())
        };
        result = Elem_set(result, 2 * p + 0, esize, acc_r);
        result = Elem_set(result, 2 * p + 1, esize, acc_i)
    };
    Z_set(dn, VL) = result
}

val decode_FCADD_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FCADD_Z_P_ZZ__ (size, rot, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let sub_i : bool = rot == 0b0;
    let sub_r : bool = rot == 0b1;
    match VL {
      128 => {
          execute_FCADD_Z_P_ZZ__(128, dn, esize, g, m, sub_i, sub_r)
      },
      256 => {
          execute_FCADD_Z_P_ZZ__(256, dn, esize, g, m, sub_i, sub_r)
      },
      512 => {
          execute_FCADD_Z_P_ZZ__(512, dn, esize, g, m, sub_i, sub_r)
      },
      1024 => {
          execute_FCADD_Z_P_ZZ__(1024, dn, esize, g, m, sub_i, sub_r)
      },
      2048 => {
          execute_FCADD_Z_P_ZZ__(2048, dn, esize, g, m, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1139) = {
    SEE = 1139;
    let size = Slice(__opcode, 22, 2);
    let rot = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FCADD_Z_P_ZZ__(size, rot, Pg, Zm, Zdn)
}

val execute_FCMLA_Z_P_ZZZ__ : forall 'VL 'da 'esize 'g 'm 'n ('neg_i : Bool) ('neg_r : Bool) 'sel_a 'sel_b,
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('m), int('n), bool('neg_i), bool('neg_r), int('sel_a), int('sel_b)) -> unit

function execute_FCMLA_Z_P_ZZZ__ (VL, da, esize, g, m, n, neg_i, neg_r, sel_a, sel_b) = {
    addend_i : bits('esize) = undefined;
    addend_r : bits('esize) = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        addend_r = Elem_read(operand3, 2 * p + 0, esize);
        addend_i = Elem_read(operand3, 2 * p + 1, esize);
        if ActivePredicateElement(mask, 2 * p + 0, esize) then {
            let elt1_a : bits('esize) = Elem_read(operand1, 2 * p + sel_a, esize);
            elt2_a : bits('esize) = Elem_read(operand2, 2 * p + sel_a, esize);
            if neg_r then {
                assert(constraint('esize in {16, 32, 64}));
                elt2_a = FPNeg(elt2_a)
            };
            assert(constraint('esize in {16, 32, 64}));
            addend_r = FPMulAdd(addend_r, elt1_a, elt2_a, FPCR_read())
        };
        if ActivePredicateElement(mask, 2 * p + 1, esize) then {
            let elt1_a : bits('esize) = Elem_read(operand1, 2 * p + sel_a, esize);
            elt2_b : bits('esize) = Elem_read(operand2, 2 * p + sel_b, esize);
            if neg_i then {
                assert(constraint('esize in {16, 32, 64}));
                elt2_b = FPNeg(elt2_b)
            };
            assert(constraint('esize in {16, 32, 64}));
            addend_i = FPMulAdd(addend_i, elt1_a, elt2_b, FPCR_read())
        };
        result = Elem_set(result, 2 * p + 0, esize, addend_r);
        result = Elem_set(result, 2 * p + 1, esize, addend_i)
    };
    Z_set(da, VL) = result
}

val decode_FCMLA_Z_P_ZZZ__ : (bits(2), bits(5), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FCMLA_Z_P_ZZZ__ (size, Zm, rot, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let neg_i : bool = [rot[1]] == 0b1;
    let neg_r : bool = [rot[0]] != [rot[1]];
    match VL {
      128 => {
          execute_FCMLA_Z_P_ZZZ__(128, da, esize, g, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      256 => {
          execute_FCMLA_Z_P_ZZZ__(256, da, esize, g, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      512 => {
          execute_FCMLA_Z_P_ZZZ__(512, da, esize, g, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      1024 => {
          execute_FCMLA_Z_P_ZZZ__(1024, da, esize, g, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      2048 => {
          execute_FCMLA_Z_P_ZZZ__(2048, da, esize, g, m, n, neg_i, neg_r, sel_a, sel_b)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1140) = {
    SEE = 1140;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let rot = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FCMLA_Z_P_ZZZ__(size, Zm, rot, Pg, Zn, Zda)
}

val execute_FCMLA_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n ('neg_i : Bool) ('neg_r : Bool) 'sel_a 'sel_b,
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('neg_i), bool('neg_r), int('sel_a), int('sel_b)) -> unit

function execute_FCMLA_Z_ZZZi_H (VL, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b) = {
    addend_i : bits('esize) = undefined;
    addend_r : bits('esize) = undefined;
    elt1_a : bits('esize) = undefined;
    elt2_a : bits('esize) = undefined;
    elt2_b : bits('esize) = undefined;
    s : int = undefined;
    segmentbase : int = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let 'pairspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        segmentbase = p - MOD(p, pairspersegment);
        s = segmentbase + index;
        addend_r = Elem_read(operand3, 2 * p + 0, esize);
        addend_i = Elem_read(operand3, 2 * p + 1, esize);
        elt1_a = Elem_read(operand1, 2 * p + sel_a, esize);
        let 's = s in
          {
              elt2_a = Elem_read(operand2, 2 * s + sel_a, esize)
          };
        let 's = s in
          {
              elt2_b = Elem_read(operand2, 2 * s + sel_b, esize)
          };
        if neg_r then {
            elt2_a = FPNeg(elt2_a)
        };
        if neg_i then {
            elt2_b = FPNeg(elt2_b)
        };
        addend_r = FPMulAdd(addend_r, elt1_a, elt2_a, FPCR_read());
        addend_i = FPMulAdd(addend_i, elt1_a, elt2_b, FPCR_read());
        result = Elem_set(result, 2 * p + 0, esize, addend_r);
        result = Elem_set(result, 2 * p + 1, esize, addend_i)
    };
    Z_set(da, VL) = result
}

val decode_FCMLA_Z_ZZZi_H : (bits(2), bits(2), bits(3), bits(2), bits(5), bits(5)) -> unit

function decode_FCMLA_Z_ZZZi_H (size, i2, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let neg_i : bool = [rot[1]] == 0b1;
    let neg_r : bool = [rot[0]] != [rot[1]];
    match VL {
      128 => {
          execute_FCMLA_Z_ZZZi_H(128, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      256 => {
          execute_FCMLA_Z_ZZZi_H(256, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      512 => {
          execute_FCMLA_Z_ZZZi_H(512, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      1024 => {
          execute_FCMLA_Z_ZZZi_H(1024, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      2048 => {
          execute_FCMLA_Z_ZZZi_H(2048, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1141) = {
    SEE = 1141;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FCMLA_Z_ZZZi_H(size, i2, Zm, rot, Zn, Zda)
}

val execute_FCMLA_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n ('neg_i : Bool) ('neg_r : Bool) 'sel_a 'sel_b,
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('neg_i), bool('neg_r), int('sel_a), int('sel_b)) -> unit

function execute_FCMLA_Z_ZZZi_S (VL, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b) = {
    addend_i : bits('esize) = undefined;
    addend_r : bits('esize) = undefined;
    elt1_a : bits('esize) = undefined;
    elt2_a : bits('esize) = undefined;
    elt2_b : bits('esize) = undefined;
    s : int = undefined;
    segmentbase : int = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let 'pairspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        segmentbase = p - MOD(p, pairspersegment);
        s = segmentbase + index;
        addend_r = Elem_read(operand3, 2 * p + 0, esize);
        addend_i = Elem_read(operand3, 2 * p + 1, esize);
        elt1_a = Elem_read(operand1, 2 * p + sel_a, esize);
        let 's = s in
          {
              elt2_a = Elem_read(operand2, 2 * s + sel_a, esize)
          };
        let 's = s in
          {
              elt2_b = Elem_read(operand2, 2 * s + sel_b, esize)
          };
        if neg_r then {
            elt2_a = FPNeg(elt2_a)
        };
        if neg_i then {
            elt2_b = FPNeg(elt2_b)
        };
        addend_r = FPMulAdd(addend_r, elt1_a, elt2_a, FPCR_read());
        addend_i = FPMulAdd(addend_i, elt1_a, elt2_b, FPCR_read());
        result = Elem_set(result, 2 * p + 0, esize, addend_r);
        result = Elem_set(result, 2 * p + 1, esize, addend_i)
    };
    Z_set(da, VL) = result
}

val decode_FCMLA_Z_ZZZi_S : (bits(2), bits(1), bits(4), bits(2), bits(5), bits(5)) -> unit

function decode_FCMLA_Z_ZZZi_S (size, i1, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let neg_i : bool = [rot[1]] == 0b1;
    let neg_r : bool = [rot[0]] != [rot[1]];
    match VL {
      128 => {
          execute_FCMLA_Z_ZZZi_S(128, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      256 => {
          execute_FCMLA_Z_ZZZi_S(256, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      512 => {
          execute_FCMLA_Z_ZZZi_S(512, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      1024 => {
          execute_FCMLA_Z_ZZZi_S(1024, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      },
      2048 => {
          execute_FCMLA_Z_ZZZi_S(2048, da, esize, index, m, n, neg_i, neg_r, sel_a, sel_b)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1142) = {
    SEE = 1142;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FCMLA_Z_ZZZi_S(size, i1, Zm, rot, Zn, Zda)
}

val execute_FMUL_Z_ZZi_H : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_FMUL_Z_ZZi_H (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        result = Elem_set(result, e, esize, FPMul(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FMUL_Z_ZZi_H : (bits(1), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMUL_Z_ZZi_H (i3h, i3l, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FMUL_Z_ZZi_H(128, d, esize, index, m, n)
      },
      256 => {
          execute_FMUL_Z_ZZi_H(256, d, esize, index, m, n)
      },
      512 => {
          execute_FMUL_Z_ZZi_H(512, d, esize, index, m, n)
      },
      1024 => {
          execute_FMUL_Z_ZZi_H(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_FMUL_Z_ZZi_H(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1143) = {
    SEE = 1143;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FMUL_Z_ZZi_H(i3h, i3l, Zm, Zn, Zd)
}

val execute_FMLA_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLA_Z_ZZZi_H (VL, da, esize, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        element3 : bits('esize) = Elem_read(result, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        if op3_neg then {
            element3 = FPNeg(element3)
        };
        result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLA_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_FMLA_Z_ZZZi_H (i3h, i3l, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLA_Z_ZZZi_H(128, da, esize, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLA_Z_ZZZi_H(256, da, esize, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLA_Z_ZZZi_H(512, da, esize, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLA_Z_ZZZi_H(1024, da, esize, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLA_Z_ZZZi_H(2048, da, esize, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1144) = {
    SEE = 1144;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLA_Z_ZZZi_H(i3h, i3l, Zm, op, Zn, Zda)
}

val execute_FMLS_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLS_Z_ZZZi_H (VL, da, esize, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        element3 : bits('esize) = Elem_read(result, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        if op3_neg then {
            element3 = FPNeg(element3)
        };
        result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLS_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_FMLS_Z_ZZZi_H (i3h, i3l, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLS_Z_ZZZi_H(128, da, esize, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLS_Z_ZZZi_H(256, da, esize, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLS_Z_ZZZi_H(512, da, esize, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLS_Z_ZZZi_H(1024, da, esize, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLS_Z_ZZZi_H(2048, da, esize, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1145) = {
    SEE = 1145;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLS_Z_ZZZi_H(i3h, i3l, Zm, op, Zn, Zda)
}

val execute_FMUL_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_FMUL_Z_ZZi_S (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        result = Elem_set(result, e, esize, FPMul(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FMUL_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMUL_Z_ZZi_S (size, i2, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FMUL_Z_ZZi_S(128, d, esize, index, m, n)
      },
      256 => {
          execute_FMUL_Z_ZZi_S(256, d, esize, index, m, n)
      },
      512 => {
          execute_FMUL_Z_ZZi_S(512, d, esize, index, m, n)
      },
      1024 => {
          execute_FMUL_Z_ZZi_S(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_FMUL_Z_ZZi_S(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1146) = {
    SEE = 1146;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FMUL_Z_ZZi_S(size, i2, Zm, Zn, Zd)
}

val execute_FMLA_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLA_Z_ZZZi_S (VL, da, esize, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        element3 : bits('esize) = Elem_read(result, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        if op3_neg then {
            element3 = FPNeg(element3)
        };
        result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLA_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_FMLA_Z_ZZZi_S (size, i2, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLA_Z_ZZZi_S(128, da, esize, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLA_Z_ZZZi_S(256, da, esize, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLA_Z_ZZZi_S(512, da, esize, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLA_Z_ZZZi_S(1024, da, esize, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLA_Z_ZZZi_S(2048, da, esize, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1147) = {
    SEE = 1147;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLA_Z_ZZZi_S(size, i2, Zm, op, Zn, Zda)
}

val execute_FMLS_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLS_Z_ZZZi_S (VL, da, esize, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        element3 : bits('esize) = Elem_read(result, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        if op3_neg then {
            element3 = FPNeg(element3)
        };
        result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLS_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_FMLS_Z_ZZZi_S (size, i2, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLS_Z_ZZZi_S(128, da, esize, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLS_Z_ZZZi_S(256, da, esize, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLS_Z_ZZZi_S(512, da, esize, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLS_Z_ZZZi_S(1024, da, esize, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLS_Z_ZZZi_S(2048, da, esize, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1148) = {
    SEE = 1148;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLS_Z_ZZZi_S(size, i2, Zm, op, Zn, Zda)
}

val execute_FMUL_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_FMUL_Z_ZZi_D (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        result = Elem_set(result, e, esize, FPMul(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FMUL_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(5), bits(5)) -> unit

function decode_FMUL_Z_ZZi_D (size, i1, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FMUL_Z_ZZi_D(128, d, esize, index, m, n)
      },
      256 => {
          execute_FMUL_Z_ZZi_D(256, d, esize, index, m, n)
      },
      512 => {
          execute_FMUL_Z_ZZi_D(512, d, esize, index, m, n)
      },
      1024 => {
          execute_FMUL_Z_ZZi_D(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_FMUL_Z_ZZi_D(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1149) = {
    SEE = 1149;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FMUL_Z_ZZi_D(size, i1, Zm, Zn, Zd)
}

val execute_FMLA_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLA_Z_ZZZi_D (VL, da, esize, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        element3 : bits('esize) = Elem_read(result, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        if op3_neg then {
            element3 = FPNeg(element3)
        };
        result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLA_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_FMLA_Z_ZZZi_D (size, i1, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLA_Z_ZZZi_D(128, da, esize, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLA_Z_ZZZi_D(256, da, esize, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLA_Z_ZZZi_D(512, da, esize, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLA_Z_ZZZi_D(1024, da, esize, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLA_Z_ZZZi_D(2048, da, esize, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1150) = {
    SEE = 1150;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLA_Z_ZZZi_D(size, i1, Zm, op, Zn, Zda)
}

val execute_FMLS_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_FMLS_Z_ZZZi_D (VL, da, esize, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, s, esize);
        element3 : bits('esize) = Elem_read(result, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        if op3_neg then {
            element3 = FPNeg(element3)
        };
        result = Elem_set(result, e, esize, FPMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLS_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_FMLS_Z_ZZZi_D (size, i1, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_FMLS_Z_ZZZi_D(128, da, esize, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_FMLS_Z_ZZZi_D(256, da, esize, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_FMLS_Z_ZZZi_D(512, da, esize, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_FMLS_Z_ZZZi_D(1024, da, esize, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_FMLS_Z_ZZZi_D(2048, da, esize, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1151) = {
    SEE = 1151;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLS_Z_ZZZi_D(size, i1, Zm, op, Zn, Zda)
}

val execute_FADDP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FADDP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(dn, VL);
    element1 : bits('esize) = undefined;
    element2 : bits('esize) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            if IsEven(e) then {
                element1 = Elem_read(operand1, e + 0, esize);
                element2 = Elem_read(operand1, e + 1, esize)
            } else {
                element1 = Elem_read(operand2, e - 1, esize);
                element2 = Elem_read(operand2, e + 0, esize)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPAdd(element1, element2, FPCR_read()))
        };
        ()
    };
    Z_set(dn, VL) = result
}

val decode_FADDP_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FADDP_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_FADDP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FADDP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FADDP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FADDP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FADDP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1152) = {
    SEE = 1152;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FADDP_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMAXNMP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMAXNMP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(dn, VL);
    element1 : bits('esize) = undefined;
    element2 : bits('esize) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            if IsEven(e) then {
                element1 = Elem_read(operand1, e + 0, esize);
                element2 = Elem_read(operand1, e + 1, esize)
            } else {
                element1 = Elem_read(operand2, e - 1, esize);
                element2 = Elem_read(operand2, e + 0, esize)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMaxNum(element1, element2, FPCR_read()))
        };
        ()
    };
    Z_set(dn, VL) = result
}

val decode_FMAXNMP_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAXNMP_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_FMAXNMP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMAXNMP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMAXNMP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMAXNMP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMAXNMP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1153) = {
    SEE = 1153;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMAXNMP_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMAXP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMAXP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(dn, VL);
    element1 : bits('esize) = undefined;
    element2 : bits('esize) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            if IsEven(e) then {
                element1 = Elem_read(operand1, e + 0, esize);
                element2 = Elem_read(operand1, e + 1, esize)
            } else {
                element1 = Elem_read(operand2, e - 1, esize);
                element2 = Elem_read(operand2, e + 0, esize)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMax(element1, element2, FPCR_read()))
        };
        ()
    };
    Z_set(dn, VL) = result
}

val decode_FMAXP_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAXP_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_FMAXP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMAXP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMAXP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMAXP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMAXP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1154) = {
    SEE = 1154;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMAXP_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMINNMP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMINNMP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(dn, VL);
    element1 : bits('esize) = undefined;
    element2 : bits('esize) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            if IsEven(e) then {
                element1 = Elem_read(operand1, e + 0, esize);
                element2 = Elem_read(operand1, e + 1, esize)
            } else {
                element1 = Elem_read(operand2, e - 1, esize);
                element2 = Elem_read(operand2, e + 0, esize)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMinNum(element1, element2, FPCR_read()))
        };
        ()
    };
    Z_set(dn, VL) = result
}

val decode_FMINNMP_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMINNMP_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_FMINNMP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMINNMP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMINNMP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMINNMP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMINNMP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1155) = {
    SEE = 1155;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMINNMP_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMINP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_FMINP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(dn, VL);
    element1 : bits('esize) = undefined;
    element2 : bits('esize) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            if IsEven(e) then {
                element1 = Elem_read(operand1, e + 0, esize);
                element2 = Elem_read(operand1, e + 1, esize)
            } else {
                element1 = Elem_read(operand2, e - 1, esize);
                element2 = Elem_read(operand2, e + 0, esize)
            };
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPMin(element1, element2, FPCR_read()))
        };
        ()
    };
    Z_set(dn, VL) = result
}

val decode_FMINP_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMINP_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_FMINP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_FMINP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_FMINP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_FMINP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_FMINP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1156) = {
    SEE = 1156;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_FMINP_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_FMLALB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLALB_Z_ZZZ__ (VL, da, esize, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 0, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 0, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLALB_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLALB_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    match VL {
      128 => {
          execute_FMLALB_Z_ZZZ__(128, da, esize, m, n, op1_neg)
      },
      256 => {
          execute_FMLALB_Z_ZZZ__(256, da, esize, m, n, op1_neg)
      },
      512 => {
          execute_FMLALB_Z_ZZZ__(512, da, esize, m, n, op1_neg)
      },
      1024 => {
          execute_FMLALB_Z_ZZZ__(1024, da, esize, m, n, op1_neg)
      },
      2048 => {
          execute_FMLALB_Z_ZZZ__(2048, da, esize, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1157) = {
    SEE = 1157;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLALB_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_FMLALT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLALT_Z_ZZZ__ (VL, da, esize, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 1, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 1, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLALT_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLALT_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    match VL {
      128 => {
          execute_FMLALT_Z_ZZZ__(128, da, esize, m, n, op1_neg)
      },
      256 => {
          execute_FMLALT_Z_ZZZ__(256, da, esize, m, n, op1_neg)
      },
      512 => {
          execute_FMLALT_Z_ZZZ__(512, da, esize, m, n, op1_neg)
      },
      1024 => {
          execute_FMLALT_Z_ZZZ__(1024, da, esize, m, n, op1_neg)
      },
      2048 => {
          execute_FMLALT_Z_ZZZ__(2048, da, esize, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1158) = {
    SEE = 1158;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLALT_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_FMLSLB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLSLB_Z_ZZZ__ (VL, da, esize, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 0, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 0, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLSLB_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLSLB_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_FMLSLB_Z_ZZZ__(128, da, esize, m, n, op1_neg)
      },
      256 => {
          execute_FMLSLB_Z_ZZZ__(256, da, esize, m, n, op1_neg)
      },
      512 => {
          execute_FMLSLB_Z_ZZZ__(512, da, esize, m, n, op1_neg)
      },
      1024 => {
          execute_FMLSLB_Z_ZZZ__(1024, da, esize, m, n, op1_neg)
      },
      2048 => {
          execute_FMLSLB_Z_ZZZ__(2048, da, esize, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1159) = {
    SEE = 1159;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLSLB_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_FMLSLT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLSLT_Z_ZZZ__ (VL, da, esize, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 1, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 1, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLSLT_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLSLT_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_FMLSLT_Z_ZZZ__(128, da, esize, m, n, op1_neg)
      },
      256 => {
          execute_FMLSLT_Z_ZZZ__(256, da, esize, m, n, op1_neg)
      },
      512 => {
          execute_FMLSLT_Z_ZZZ__(512, da, esize, m, n, op1_neg)
      },
      1024 => {
          execute_FMLSLT_Z_ZZZ__(1024, da, esize, m, n, op1_neg)
      },
      2048 => {
          execute_FMLSLT_Z_ZZZ__(2048, da, esize, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1160) = {
    SEE = 1160;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLSLT_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_FMLALB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLALB_Z_ZZZi_S (VL, da, esize, index, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 0, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, s, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLALB_Z_ZZZi_S : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLALB_Z_ZZZi_S (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    let op1_neg : bool = false;
    match VL {
      128 => {
          execute_FMLALB_Z_ZZZi_S(128, da, esize, index, m, n, op1_neg)
      },
      256 => {
          execute_FMLALB_Z_ZZZi_S(256, da, esize, index, m, n, op1_neg)
      },
      512 => {
          execute_FMLALB_Z_ZZZi_S(512, da, esize, index, m, n, op1_neg)
      },
      1024 => {
          execute_FMLALB_Z_ZZZi_S(1024, da, esize, index, m, n, op1_neg)
      },
      2048 => {
          execute_FMLALB_Z_ZZZi_S(2048, da, esize, index, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1161) = {
    SEE = 1161;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLALB_Z_ZZZi_S(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_FMLALT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLALT_Z_ZZZi_S (VL, da, esize, index, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 1, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, s, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLALT_Z_ZZZi_S : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLALT_Z_ZZZi_S (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    let op1_neg : bool = false;
    match VL {
      128 => {
          execute_FMLALT_Z_ZZZi_S(128, da, esize, index, m, n, op1_neg)
      },
      256 => {
          execute_FMLALT_Z_ZZZi_S(256, da, esize, index, m, n, op1_neg)
      },
      512 => {
          execute_FMLALT_Z_ZZZi_S(512, da, esize, index, m, n, op1_neg)
      },
      1024 => {
          execute_FMLALT_Z_ZZZi_S(1024, da, esize, index, m, n, op1_neg)
      },
      2048 => {
          execute_FMLALT_Z_ZZZi_S(2048, da, esize, index, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1162) = {
    SEE = 1162;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLALT_Z_ZZZi_S(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_FMLSLB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLSLB_Z_ZZZi_S (VL, da, esize, index, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 0, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, s, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLSLB_Z_ZZZi_S : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLSLB_Z_ZZZi_S (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_FMLSLB_Z_ZZZi_S(128, da, esize, index, m, n, op1_neg)
      },
      256 => {
          execute_FMLSLB_Z_ZZZi_S(256, da, esize, index, m, n, op1_neg)
      },
      512 => {
          execute_FMLSLB_Z_ZZZi_S(512, da, esize, index, m, n, op1_neg)
      },
      1024 => {
          execute_FMLSLB_Z_ZZZi_S(1024, da, esize, index, m, n, op1_neg)
      },
      2048 => {
          execute_FMLSLB_Z_ZZZi_S(2048, da, esize, index, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1163) = {
    SEE = 1163;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLSLB_Z_ZZZi_S(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_FMLSLT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), bool('op1_neg)) -> unit

function execute_FMLSLT_Z_ZZZi_S (VL, da, esize, index, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 1, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, s, DIV(esize, 2));
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        if op1_neg then {
            element1 = FPNeg(element1)
        };
        result = Elem_set(result, e, esize, FPMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_FMLSLT_Z_ZZZi_S : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_FMLSLT_Z_ZZZi_S (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_FMLSLT_Z_ZZZi_S(128, da, esize, index, m, n, op1_neg)
      },
      256 => {
          execute_FMLSLT_Z_ZZZi_S(256, da, esize, index, m, n, op1_neg)
      },
      512 => {
          execute_FMLSLT_Z_ZZZi_S(512, da, esize, index, m, n, op1_neg)
      },
      1024 => {
          execute_FMLSLT_Z_ZZZi_S(1024, da, esize, index, m, n, op1_neg)
      },
      2048 => {
          execute_FMLSLT_Z_ZZZi_S(2048, da, esize, index, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1164) = {
    SEE = 1164;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMLSLT_Z_ZZZi_S(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_BFMLALB_Z_ZZZ__ : forall 'VL 'da 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n)) -> unit

function execute_BFMLALB_Z_ZZZ__ (VL, da, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let element2 : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLALB_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLALB_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_BFMLALB_Z_ZZZ__(128, da, m, n)
      },
      256 => {
          execute_BFMLALB_Z_ZZZ__(256, da, m, n)
      },
      512 => {
          execute_BFMLALB_Z_ZZZ__(512, da, m, n)
      },
      1024 => {
          execute_BFMLALB_Z_ZZZ__(1024, da, m, n)
      },
      2048 => {
          execute_BFMLALB_Z_ZZZ__(2048, da, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1165) = {
    SEE = 1165;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLALB_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_BFMLALT_Z_ZZZ__ : forall 'VL 'da 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n)) -> unit

function execute_BFMLALT_Z_ZZZ__ (VL, da, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let element2 : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLALT_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLALT_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_BFMLALT_Z_ZZZ__(128, da, m, n)
      },
      256 => {
          execute_BFMLALT_Z_ZZZ__(256, da, m, n)
      },
      512 => {
          execute_BFMLALT_Z_ZZZ__(512, da, m, n)
      },
      1024 => {
          execute_BFMLALT_Z_ZZZ__(1024, da, m, n)
      },
      2048 => {
          execute_BFMLALT_Z_ZZZ__(2048, da, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1166) = {
    SEE = 1166;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLALT_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_BFMLSLB_Z_ZZZ__ : forall 'VL 'da 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n), bool('op1_neg)) -> unit

function execute_BFMLSLB_Z_ZZZ__ (VL, da, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        element1 : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let element2 : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        if op1_neg then {
            element1 = BFNeg(element1)
        };
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLSLB_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLSLB_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_BFMLSLB_Z_ZZZ__(128, da, m, n, op1_neg)
      },
      256 => {
          execute_BFMLSLB_Z_ZZZ__(256, da, m, n, op1_neg)
      },
      512 => {
          execute_BFMLSLB_Z_ZZZ__(512, da, m, n, op1_neg)
      },
      1024 => {
          execute_BFMLSLB_Z_ZZZ__(1024, da, m, n, op1_neg)
      },
      2048 => {
          execute_BFMLSLB_Z_ZZZ__(2048, da, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1167) = {
    SEE = 1167;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLSLB_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_BFMLSLT_Z_ZZZ__ : forall 'VL 'da 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n), bool('op1_neg)) -> unit

function execute_BFMLSLT_Z_ZZZ__ (VL, da, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        element1 : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let element2 : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        if op1_neg then {
            element1 = BFNeg(element1)
        };
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLSLT_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLSLT_Z_ZZZ__ (o2, Zm, op, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_BFMLSLT_Z_ZZZ__(128, da, m, n, op1_neg)
      },
      256 => {
          execute_BFMLSLT_Z_ZZZ__(256, da, m, n, op1_neg)
      },
      512 => {
          execute_BFMLSLT_Z_ZZZ__(512, da, m, n, op1_neg)
      },
      1024 => {
          execute_BFMLSLT_Z_ZZZ__(1024, da, m, n, op1_neg)
      },
      2048 => {
          execute_BFMLSLT_Z_ZZZ__(2048, da, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1168) = {
    SEE = 1168;
    let o2 = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLSLT_Z_ZZZ__(o2, Zm, op, T, Zn, Zda)
}

val execute_BFMLALB_Z_ZZZi__ : forall 'VL 'da 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n)) -> unit

function execute_BFMLALB_Z_ZZZi__ (VL, da, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let 'eltspersegment = DIV(128, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        let element1 : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let element2 : bits(16) = Elem_read(operand2, s, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLALB_Z_ZZZi__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLALB_Z_ZZZi__ (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    match VL {
      128 => {
          execute_BFMLALB_Z_ZZZi__(128, da, index, m, n)
      },
      256 => {
          execute_BFMLALB_Z_ZZZi__(256, da, index, m, n)
      },
      512 => {
          execute_BFMLALB_Z_ZZZi__(512, da, index, m, n)
      },
      1024 => {
          execute_BFMLALB_Z_ZZZi__(1024, da, index, m, n)
      },
      2048 => {
          execute_BFMLALB_Z_ZZZi__(2048, da, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1169) = {
    SEE = 1169;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLALB_Z_ZZZi__(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_BFMLALT_Z_ZZZi__ : forall 'VL 'da 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n)) -> unit

function execute_BFMLALT_Z_ZZZi__ (VL, da, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let 'eltspersegment = DIV(128, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        let element1 : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let element2 : bits(16) = Elem_read(operand2, s, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLALT_Z_ZZZi__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLALT_Z_ZZZi__ (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    match VL {
      128 => {
          execute_BFMLALT_Z_ZZZi__(128, da, index, m, n)
      },
      256 => {
          execute_BFMLALT_Z_ZZZi__(256, da, index, m, n)
      },
      512 => {
          execute_BFMLALT_Z_ZZZi__(512, da, index, m, n)
      },
      1024 => {
          execute_BFMLALT_Z_ZZZi__(1024, da, index, m, n)
      },
      2048 => {
          execute_BFMLALT_Z_ZZZi__(2048, da, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1170) = {
    SEE = 1170;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLALT_Z_ZZZi__(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_BFMLSLB_Z_ZZZi__ : forall 'VL 'da 'index 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n), bool('op1_neg)) -> unit

function execute_BFMLSLB_Z_ZZZi__ (VL, da, index, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let 'eltspersegment = DIV(128, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        element1 : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let element2 : bits(16) = Elem_read(operand2, s, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        if op1_neg then {
            element1 = BFNeg(element1)
        };
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLSLB_Z_ZZZi__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLSLB_Z_ZZZi__ (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_BFMLSLB_Z_ZZZi__(128, da, index, m, n, op1_neg)
      },
      256 => {
          execute_BFMLSLB_Z_ZZZi__(256, da, index, m, n, op1_neg)
      },
      512 => {
          execute_BFMLSLB_Z_ZZZi__(512, da, index, m, n, op1_neg)
      },
      1024 => {
          execute_BFMLSLB_Z_ZZZi__(1024, da, index, m, n, op1_neg)
      },
      2048 => {
          execute_BFMLSLB_Z_ZZZi__(2048, da, index, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1171) = {
    SEE = 1171;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLSLB_Z_ZZZi__(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_BFMLSLT_Z_ZZZi__ : forall 'VL 'da 'index 'm 'n ('op1_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n), bool('op1_neg)) -> unit

function execute_BFMLSLT_Z_ZZZi__ (VL, da, index, m, n, op1_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let 'eltspersegment = DIV(128, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = 2 * segmentbase + index;
        element1 : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let element2 : bits(16) = Elem_read(operand2, s, 16);
        let element3 : bits(32) = Elem_read(operand3, e, 32);
        if op1_neg then {
            element1 = BFNeg(element1)
        };
        result = Elem_set(result, e, 32, BFMulAddH(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLSLT_Z_ZZZi__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLSLT_Z_ZZZi__ (o2, i3h, Zm, op, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i3h @ i3l);
    let op1_neg : bool = true;
    match VL {
      128 => {
          execute_BFMLSLT_Z_ZZZi__(128, da, index, m, n, op1_neg)
      },
      256 => {
          execute_BFMLSLT_Z_ZZZi__(256, da, index, m, n, op1_neg)
      },
      512 => {
          execute_BFMLSLT_Z_ZZZi__(512, da, index, m, n, op1_neg)
      },
      1024 => {
          execute_BFMLSLT_Z_ZZZi__(1024, da, index, m, n, op1_neg)
      },
      2048 => {
          execute_BFMLSLT_Z_ZZZi__(2048, da, index, m, n, op1_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1172) = {
    SEE = 1172;
    let o2 = Slice(__opcode, 22, 1);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 13, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLSLT_Z_ZZZi__(o2, i3h, Zm, op, i3l, T, Zn, Zda)
}

val execute_BFDOT_Z_ZZZ__ : forall 'VL 'da 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n)) -> unit

function execute_BFDOT_Z_ZZZ__ (VL, da, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
        let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
        sum : bits(32) = Elem_read(operand3, e, 32);
        let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
        result = Elem_set(result, e, 32, sum)
    };
    Z_set(da, VL) = result
}

val decode_BFDOT_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_BFDOT_Z_ZZZ__ (Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_BFDOT_Z_ZZZ__(128, da, m, n)
      },
      256 => {
          execute_BFDOT_Z_ZZZ__(256, da, m, n)
      },
      512 => {
          execute_BFDOT_Z_ZZZ__(512, da, m, n)
      },
      1024 => {
          execute_BFDOT_Z_ZZZ__(1024, da, m, n)
      },
      2048 => {
          execute_BFDOT_Z_ZZZ__(2048, da, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1173) = {
    SEE = 1173;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFDOT_Z_ZZZ__(Zm, Zn, Zda)
}

val execute_BFDOT_Z_ZZZi__ : forall 'VL 'da 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n)) -> unit

function execute_BFDOT_Z_ZZZi__ (VL, da, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let 'eltspersegment = DIV(128, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
        let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
        sum : bits(32) = Elem_read(operand3, e, 32);
        let sum : bits(32) = BFDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
        result = Elem_set(result, e, 32, sum)
    };
    Z_set(da, VL) = result
}

val decode_BFDOT_Z_ZZZi__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFDOT_Z_ZZZi__ (i2, Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_BFDOT_Z_ZZZi__(128, da, index, m, n)
      },
      256 => {
          execute_BFDOT_Z_ZZZi__(256, da, index, m, n)
      },
      512 => {
          execute_BFDOT_Z_ZZZi__(512, da, index, m, n)
      },
      1024 => {
          execute_BFDOT_Z_ZZZi__(1024, da, index, m, n)
      },
      2048 => {
          execute_BFDOT_Z_ZZZi__(2048, da, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1174) = {
    SEE = 1174;
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFDOT_Z_ZZZi__(i2, Zm, Zn, Zda)
}

val execute_FDOT_Z_ZZZ__ : forall 'VL 'da 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n)) -> unit

function execute_FDOT_Z_ZZZ__ (VL, da, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let elt2_a : bits(16) = Elem_read(operand2, 2 * e + 0, 16);
        let elt2_b : bits(16) = Elem_read(operand2, 2 * e + 1, 16);
        sum : bits(32) = Elem_read(operand3, e, 32);
        let sum : bits(32) = FPDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
        result = Elem_set(result, e, 32, sum)
    };
    Z_set(da, VL) = result
}

val decode_FDOT_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_FDOT_Z_ZZZ__ (Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_FDOT_Z_ZZZ__(128, da, m, n)
      },
      256 => {
          execute_FDOT_Z_ZZZ__(256, da, m, n)
      },
      512 => {
          execute_FDOT_Z_ZZZ__(512, da, m, n)
      },
      1024 => {
          execute_FDOT_Z_ZZZ__(1024, da, m, n)
      },
      2048 => {
          execute_FDOT_Z_ZZZ__(2048, da, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1175) = {
    SEE = 1175;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FDOT_Z_ZZZ__(Zm, Zn, Zda)
}

val execute_FDOT_Z_ZZZi__ : forall 'VL 'da 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n)) -> unit

function execute_FDOT_Z_ZZZi__ (VL, da, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let 'eltspersegment = DIV(128, 32);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let elt1_a : bits(16) = Elem_read(operand1, 2 * e + 0, 16);
        let elt1_b : bits(16) = Elem_read(operand1, 2 * e + 1, 16);
        let elt2_a : bits(16) = Elem_read(operand2, 2 * s + 0, 16);
        let elt2_b : bits(16) = Elem_read(operand2, 2 * s + 1, 16);
        sum : bits(32) = Elem_read(operand3, e, 32);
        let sum : bits(32) = FPDotAdd(sum, elt1_a, elt1_b, elt2_a, elt2_b, FPCR_read());
        result = Elem_set(result, e, 32, sum)
    };
    Z_set(da, VL) = result
}

val decode_FDOT_Z_ZZZi__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FDOT_Z_ZZZi__ (i2, Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'index = UInt(i2);
    match VL {
      128 => {
          execute_FDOT_Z_ZZZi__(128, da, index, m, n)
      },
      256 => {
          execute_FDOT_Z_ZZZi__(256, da, index, m, n)
      },
      512 => {
          execute_FDOT_Z_ZZZi__(512, da, index, m, n)
      },
      1024 => {
          execute_FDOT_Z_ZZZi__(1024, da, index, m, n)
      },
      2048 => {
          execute_FDOT_Z_ZZZi__(2048, da, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1176) = {
    SEE = 1176;
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FDOT_Z_ZZZi__(i2, Zm, Zn, Zda)
}

val execute_BFCVT_Z_P_Z_S2BF : forall 'VL 'd 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('g), int('n)) -> unit

function execute_BFCVT_Z_P_Z_S2BF (VL, d, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, 32) then Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 32) then {
            let element : bits(32) = Elem_read(operand, e, 32);
            result = Elem_set(result, 2 * e, 16, FPConvertBF__1(element, FPCR_read()));
            result = Elem_set(result, 2 * e + 1, 16, Zeros(16))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_BFCVT_Z_P_Z_S2BF : (bits(3), bits(5), bits(5)) -> unit

function decode_BFCVT_Z_P_Z_S2BF (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFCVT_Z_P_Z_S2BF(128, d, g, n)
      },
      256 => {
          execute_BFCVT_Z_P_Z_S2BF(256, d, g, n)
      },
      512 => {
          execute_BFCVT_Z_P_Z_S2BF(512, d, g, n)
      },
      1024 => {
          execute_BFCVT_Z_P_Z_S2BF(1024, d, g, n)
      },
      2048 => {
          execute_BFCVT_Z_P_Z_S2BF(2048, d, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1177) = {
    SEE = 1177;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFCVT_Z_P_Z_S2BF(Pg, Zn, Zd)
}

val execute_BFCVTNT_Z_P_Z_S2BF : forall 'VL 'd 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('g), int('n)) -> unit

function execute_BFCVTNT_Z_P_Z_S2BF (VL, d, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 32);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, 32) then Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 32) then {
            let element : bits(32) = Elem_read(operand, e, 32);
            result = Elem_set(result, 2 * e + 1, 16, FPConvertBF__1(element, FPCR_read()))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_BFCVTNT_Z_P_Z_S2BF : (bits(3), bits(5), bits(5)) -> unit

function decode_BFCVTNT_Z_P_Z_S2BF (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFCVTNT_Z_P_Z_S2BF(128, d, g, n)
      },
      256 => {
          execute_BFCVTNT_Z_P_Z_S2BF(256, d, g, n)
      },
      512 => {
          execute_BFCVTNT_Z_P_Z_S2BF(512, d, g, n)
      },
      1024 => {
          execute_BFCVTNT_Z_P_Z_S2BF(1024, d, g, n)
      },
      2048 => {
          execute_BFCVTNT_Z_P_Z_S2BF(2048, d, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1178) = {
    SEE = 1178;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFCVTNT_Z_P_Z_S2BF(Pg, Zn, Zd)
}

val execute_FMMLA_Z_ZZZ_S : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_FMMLA_Z_ZZZ_S (VL, da, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < esize * 4 then {
        throw(Error_Undefined())
    };
    let 'segments = DIV(VL, 4 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = Zeros(VL);
    op1 : bits(4 * 'esize) = undefined;
    op2 : bits(4 * 'esize) = undefined;
    addend : bits(4 * 'esize) = undefined;
    res : bits(4 * 'esize) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        op1 = Elem_read(operand1, s, 4 * esize);
        op2 = Elem_read(operand2, s, 4 * esize);
        addend = Elem_read(operand3, s, 4 * esize);
        res = FPMatMulAdd(addend, op1, op2, esize, FPCR_read());
        result = Elem_set(result, s, 4 * esize, res)
    };
    Z_set(da, VL) = result
}

val decode_FMMLA_Z_ZZZ_S : (bits(5), bits(5), bits(5)) -> unit

function decode_FMMLA_Z_ZZZ_S (Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP32MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_FMMLA_Z_ZZZ_S(128, da, esize, m, n)
      },
      256 => {
          execute_FMMLA_Z_ZZZ_S(256, da, esize, m, n)
      },
      512 => {
          execute_FMMLA_Z_ZZZ_S(512, da, esize, m, n)
      },
      1024 => {
          execute_FMMLA_Z_ZZZ_S(1024, da, esize, m, n)
      },
      2048 => {
          execute_FMMLA_Z_ZZZ_S(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1179) = {
    SEE = 1179;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMMLA_Z_ZZZ_S(Zm, Zn, Zda)
}

val execute_FMMLA_Z_ZZZ_D : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_FMMLA_Z_ZZZ_D (VL, da, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < esize * 4 then {
        throw(Error_Undefined())
    };
    let 'segments = DIV(VL, 4 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = Zeros(VL);
    op1 : bits(4 * 'esize) = undefined;
    op2 : bits(4 * 'esize) = undefined;
    addend : bits(4 * 'esize) = undefined;
    res : bits(4 * 'esize) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        op1 = Elem_read(operand1, s, 4 * esize);
        op2 = Elem_read(operand2, s, 4 * esize);
        addend = Elem_read(operand3, s, 4 * esize);
        res = FPMatMulAdd(addend, op1, op2, esize, FPCR_read());
        result = Elem_set(result, s, 4 * esize, res)
    };
    Z_set(da, VL) = result
}

val decode_FMMLA_Z_ZZZ_D : (bits(5), bits(5), bits(5)) -> unit

function decode_FMMLA_Z_ZZZ_D (Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_FMMLA_Z_ZZZ_D(128, da, esize, m, n)
      },
      256 => {
          execute_FMMLA_Z_ZZZ_D(256, da, esize, m, n)
      },
      512 => {
          execute_FMMLA_Z_ZZZ_D(512, da, esize, m, n)
      },
      1024 => {
          execute_FMMLA_Z_ZZZ_D(1024, da, esize, m, n)
      },
      2048 => {
          execute_FMMLA_Z_ZZZ_D(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1180) = {
    SEE = 1180;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_FMMLA_Z_ZZZ_D(Zm, Zn, Zda)
}

val execute_BFMMLA_Z_ZZZ__ : forall 'VL 'da 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n)) -> unit

function execute_BFMMLA_Z_ZZZ__ (VL, da, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    op1 : bits(128) = undefined;
    op2 : bits(128) = undefined;
    addend : bits(128) = undefined;
    res : bits(128) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        op1 = Elem_read(operand1, s, 128);
        op2 = Elem_read(operand2, s, 128);
        addend = Elem_read(operand3, s, 128);
        res = BFMatMulAdd(addend, op1, op2);
        result = Elem_set(result, s, 128, res)
    };
    Z_set(da, VL) = result
}

val decode_BFMMLA_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_BFMMLA_Z_ZZZ__ (Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveBF16Ext()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_BFMMLA_Z_ZZZ__(128, da, m, n)
      },
      256 => {
          execute_BFMMLA_Z_ZZZ__(256, da, m, n)
      },
      512 => {
          execute_BFMMLA_Z_ZZZ__(512, da, m, n)
      },
      1024 => {
          execute_BFMMLA_Z_ZZZ__(1024, da, m, n)
      },
      2048 => {
          execute_BFMMLA_Z_ZZZ__(2048, da, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1181) = {
    SEE = 1181;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMMLA_Z_ZZZ__(Zm, Zn, Zda)
}

val execute_FLOGB_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FLOGB_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPLogB(element, FPCR_read()))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FLOGB_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_FLOGB_Z_P_Z__ (size, U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FLOGB_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FLOGB_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FLOGB_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FLOGB_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FLOGB_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1182) = {
    SEE = 1182;
    let size = Slice(__opcode, 17, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FLOGB_Z_P_Z__(size, U, Pg, Zn, Zd)
}

val execute_FCVTNT_Z_P_Z_D2S : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FCVTNT_Z_P_Z_D2S (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, 2 * e + 1, DIV(esize, 2), FPConvertSVE__1(element, FPCR_read(), DIV(esize, 2)))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTNT_Z_P_Z_D2S : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVTNT_Z_P_Z_D2S (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCVTNT_Z_P_Z_D2S(128, d, esize, g, n)
      },
      256 => {
          execute_FCVTNT_Z_P_Z_D2S(256, d, esize, g, n)
      },
      512 => {
          execute_FCVTNT_Z_P_Z_D2S(512, d, esize, g, n)
      },
      1024 => {
          execute_FCVTNT_Z_P_Z_D2S(1024, d, esize, g, n)
      },
      2048 => {
          execute_FCVTNT_Z_P_Z_D2S(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1183) = {
    SEE = 1183;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTNT_Z_P_Z_D2S(Pg, Zn, Zd)
}

val execute_FCVTNT_Z_P_Z_S2H : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FCVTNT_Z_P_Z_S2H (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, 2 * e + 1, DIV(esize, 2), FPConvertSVE__1(element, FPCR_read(), DIV(esize, 2)))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTNT_Z_P_Z_S2H : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVTNT_Z_P_Z_S2H (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCVTNT_Z_P_Z_S2H(128, d, esize, g, n)
      },
      256 => {
          execute_FCVTNT_Z_P_Z_S2H(256, d, esize, g, n)
      },
      512 => {
          execute_FCVTNT_Z_P_Z_S2H(512, d, esize, g, n)
      },
      1024 => {
          execute_FCVTNT_Z_P_Z_S2H(1024, d, esize, g, n)
      },
      2048 => {
          execute_FCVTNT_Z_P_Z_S2H(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1184) = {
    SEE = 1184;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTNT_Z_P_Z_S2H(Pg, Zn, Zd)
}

val execute_FCVTLT_Z_P_Z_S2D : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FCVTLT_Z_P_Z_S2D (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits(div('esize, 2)) = Elem_read(operand, 2 * e + 1, DIV(esize, 2));
            result = Elem_set(result, e, esize, FPConvertSVE__1(element, FPCR_read(), esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTLT_Z_P_Z_S2D : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVTLT_Z_P_Z_S2D (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCVTLT_Z_P_Z_S2D(128, d, esize, g, n)
      },
      256 => {
          execute_FCVTLT_Z_P_Z_S2D(256, d, esize, g, n)
      },
      512 => {
          execute_FCVTLT_Z_P_Z_S2D(512, d, esize, g, n)
      },
      1024 => {
          execute_FCVTLT_Z_P_Z_S2D(1024, d, esize, g, n)
      },
      2048 => {
          execute_FCVTLT_Z_P_Z_S2D(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1185) = {
    SEE = 1185;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTLT_Z_P_Z_S2D(Pg, Zn, Zd)
}

val execute_FCVTLT_Z_P_Z_H2S : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FCVTLT_Z_P_Z_H2S (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits(div('esize, 2)) = Elem_read(operand, 2 * e + 1, DIV(esize, 2));
            result = Elem_set(result, e, esize, FPConvertSVE__1(element, FPCR_read(), esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTLT_Z_P_Z_H2S : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVTLT_Z_P_Z_H2S (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCVTLT_Z_P_Z_H2S(128, d, esize, g, n)
      },
      256 => {
          execute_FCVTLT_Z_P_Z_H2S(256, d, esize, g, n)
      },
      512 => {
          execute_FCVTLT_Z_P_Z_H2S(512, d, esize, g, n)
      },
      1024 => {
          execute_FCVTLT_Z_P_Z_H2S(1024, d, esize, g, n)
      },
      2048 => {
          execute_FCVTLT_Z_P_Z_H2S(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1186) = {
    SEE = 1186;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTLT_Z_P_Z_H2S(Pg, Zn, Zd)
}

val execute_FCVTX_Z_P_Z_D2S : forall 'VL 'd 'd_esize 'esize 'g 'n 's_esize,
  ('s_esize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 'd_esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('d_esize), int('esize), int('g), int('n), int('s_esize)) -> unit

function execute_FCVTX_Z_P_Z_D2S (VL, d, d_esize, esize, g, n, s_esize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            let res : bits('d_esize) = FPConvertSVE(element[s_esize - 1 .. 0], FPCR_read(), FPRounding_ODD, d_esize);
            result = Elem_set(result, e, esize, ZeroExtend(res, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTX_Z_P_Z_D2S : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVTX_Z_P_Z_D2S (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 's_esize = 64;
    let 'd_esize = 32;
    match VL {
      128 => {
          execute_FCVTX_Z_P_Z_D2S(128, d, d_esize, esize, g, n, s_esize)
      },
      256 => {
          execute_FCVTX_Z_P_Z_D2S(256, d, d_esize, esize, g, n, s_esize)
      },
      512 => {
          execute_FCVTX_Z_P_Z_D2S(512, d, d_esize, esize, g, n, s_esize)
      },
      1024 => {
          execute_FCVTX_Z_P_Z_D2S(1024, d, d_esize, esize, g, n, s_esize)
      },
      2048 => {
          execute_FCVTX_Z_P_Z_D2S(2048, d, d_esize, esize, g, n, s_esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1187) = {
    SEE = 1187;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTX_Z_P_Z_D2S(Pg, Zn, Zd)
}

val execute_FCVTXNT_Z_P_Z_D2S : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FCVTXNT_Z_P_Z_D2S (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, 2 * e + 1, DIV(esize, 2), FPConvertSVE(element, FPCR_read(), FPRounding_ODD, DIV(esize, 2)))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCVTXNT_Z_P_Z_D2S : (bits(3), bits(5), bits(5)) -> unit

function decode_FCVTXNT_Z_P_Z_D2S (Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCVTXNT_Z_P_Z_D2S(128, d, esize, g, n)
      },
      256 => {
          execute_FCVTXNT_Z_P_Z_D2S(256, d, esize, g, n)
      },
      512 => {
          execute_FCVTXNT_Z_P_Z_D2S(512, d, esize, g, n)
      },
      1024 => {
          execute_FCVTXNT_Z_P_Z_D2S(1024, d, esize, g, n)
      },
      2048 => {
          execute_FCVTXNT_Z_P_Z_D2S(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1188) = {
    SEE = 1188;
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCVTXNT_Z_P_Z_D2S(Pg, Zn, Zd)
}

val execute_FCLAMP_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_FCLAMP_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    result : bits('VL) = undefined;
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        let element3 : bits('esize) = Elem_read(operand3, e, esize);
        assert(constraint('esize in {16, 32, 64}));
        result = Elem_set(result, e, esize, FPMinNum(FPMaxNum(element1, element3, FPCR_read()), element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_FCLAMP_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_FCLAMP_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FCLAMP_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_FCLAMP_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_FCLAMP_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_FCLAMP_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_FCLAMP_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1189) = {
    SEE = 1189;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCLAMP_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_FADDQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FADDQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPZero(0b0, esize);
    result : bits(128) = Zeros(128);
    let 'p2bits = CeilPow2(segments * esize);
    let 'p2elems = DIV(p2bits, esize);
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        stmp : bits('p2bits) = undefined;
        foreach (s from 0 to (p2elems - 1) by 1 in inc) {
            if s < segments & ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_set(stmp, s, esize, Elem_read(operand, s * elempersegment + e, esize))
            } else {
                stmp = Elem_set(stmp, s, esize, identity)
            }
        };
        assert(constraint(('p2bits in {16, 32, 64, 128, 256, 512, 1024, 2048} & 'p2bits >= 'esize | not('esize in {16, 32, 64}))));
        let dtmp : bits('esize) = Reduce(ReduceOp_FADD, stmp, esize);
        result = Elem_set(result, e, esize, dtmp)
    };
    V_set(d, 128) = result
}

val decode_FADDQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FADDQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FADDQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FADDQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FADDQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FADDQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FADDQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1190) = {
    SEE = 1190;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FADDQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMAXNMQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMAXNMQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPDefaultNaN(esize);
    result : bits(128) = Zeros(128);
    let 'p2bits = CeilPow2(segments * esize);
    let 'p2elems = DIV(p2bits, esize);
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        stmp : bits('p2bits) = undefined;
        foreach (s from 0 to (p2elems - 1) by 1 in inc) {
            if s < segments & ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_set(stmp, s, esize, Elem_read(operand, s * elempersegment + e, esize))
            } else {
                stmp = Elem_set(stmp, s, esize, identity)
            }
        };
        assert(constraint(('p2bits in {16, 32, 64, 128, 256, 512, 1024, 2048} & 'p2bits >= 'esize | not('esize in {16, 32, 64}))));
        let dtmp : bits('esize) = Reduce(ReduceOp_FMAXNUM, stmp, esize);
        result = Elem_set(result, e, esize, dtmp)
    };
    V_set(d, 128) = result
}

val decode_FMAXNMQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAXNMQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMAXNMQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMAXNMQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMAXNMQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMAXNMQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMAXNMQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1191) = {
    SEE = 1191;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMAXNMQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMINNMQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMINNMQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPDefaultNaN(esize);
    result : bits(128) = Zeros(128);
    let 'p2bits = CeilPow2(segments * esize);
    let 'p2elems = DIV(p2bits, esize);
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        stmp : bits('p2bits) = undefined;
        foreach (s from 0 to (p2elems - 1) by 1 in inc) {
            if s < segments & ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_set(stmp, s, esize, Elem_read(operand, s * elempersegment + e, esize))
            } else {
                stmp = Elem_set(stmp, s, esize, identity)
            }
        };
        assert(constraint(('p2bits in {16, 32, 64, 128, 256, 512, 1024, 2048} & 'p2bits >= 'esize | not('esize in {16, 32, 64}))));
        let dtmp : bits('esize) = Reduce(ReduceOp_FMINNUM, stmp, esize);
        result = Elem_set(result, e, esize, dtmp)
    };
    V_set(d, 128) = result
}

val decode_FMINNMQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMINNMQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMINNMQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMINNMQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMINNMQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMINNMQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMINNMQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1192) = {
    SEE = 1192;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMINNMQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMAXQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMAXQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPInfinity(0b1, esize);
    result : bits(128) = Zeros(128);
    let 'p2bits = CeilPow2(segments * esize);
    let 'p2elems = DIV(p2bits, esize);
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        stmp : bits('p2bits) = undefined;
        foreach (s from 0 to (p2elems - 1) by 1 in inc) {
            if s < segments & ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_set(stmp, s, esize, Elem_read(operand, s * elempersegment + e, esize))
            } else {
                stmp = Elem_set(stmp, s, esize, identity)
            }
        };
        assert(constraint(('p2bits in {16, 32, 64, 128, 256, 512, 1024, 2048} & 'p2bits >= 'esize | not('esize in {16, 32, 64}))));
        let dtmp : bits('esize) = Reduce(ReduceOp_FMAX, stmp, esize);
        result = Elem_set(result, e, esize, dtmp)
    };
    V_set(d, 128) = result
}

val decode_FMAXQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMAXQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMAXQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMAXQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMAXQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMAXQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMAXQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1193) = {
    SEE = 1193;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMAXQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_FMINQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FMINQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    assert(constraint('esize in {16, 32, 64}));
    let identity : bits('esize) = FPInfinity(0b0, esize);
    result : bits(128) = Zeros(128);
    let 'p2bits = CeilPow2(segments * esize);
    let 'p2elems = DIV(p2bits, esize);
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        stmp : bits('p2bits) = undefined;
        foreach (s from 0 to (p2elems - 1) by 1 in inc) {
            if s < segments & ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_set(stmp, s, esize, Elem_read(operand, s * elempersegment + e, esize))
            } else {
                stmp = Elem_set(stmp, s, esize, identity)
            }
        };
        assert(constraint(('p2bits in {16, 32, 64, 128, 256, 512, 1024, 2048} & 'p2bits >= 'esize | not('esize in {16, 32, 64}))));
        let dtmp : bits('esize) = Reduce(ReduceOp_FMIN, stmp, esize);
        result = Elem_set(result, e, esize, dtmp)
    };
    V_set(d, 128) = result
}

val decode_FMINQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FMINQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_FMINQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FMINQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FMINQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FMINQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FMINQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1194) = {
    SEE = 1194;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_FMINQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_BFADD_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_BFADD_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        let element2 : bits(16) = Elem_read(operand2, e, 16);
        result = Elem_set(result, e, 16, BFAdd(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_BFADD_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_BFADD_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFADD_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_BFADD_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_BFADD_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_BFADD_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_BFADD_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1195) = {
    SEE = 1195;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFADD_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_BFMUL_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_BFMUL_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        let element2 : bits(16) = Elem_read(operand2, e, 16);
        result = Elem_set(result, e, 16, BFMul(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_BFMUL_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_BFMUL_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFMUL_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_BFMUL_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_BFMUL_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_BFMUL_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_BFMUL_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1196) = {
    SEE = 1196;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFMUL_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_BFSUB_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_BFSUB_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 16);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        let element2 : bits(16) = Elem_read(operand2, e, 16);
        result = Elem_set(result, e, 16, BFSub(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_BFSUB_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_BFSUB_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFSUB_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_BFSUB_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_BFSUB_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_BFSUB_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_BFSUB_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1197) = {
    SEE = 1197;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFSUB_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_BFADD_Z_P_ZZ__ : forall 'VL 'dn 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('g), int('m)) -> unit

function execute_BFADD_Z_P_ZZ__ (VL, dn, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        if ActivePredicateElement(mask, e, 16) then {
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFAdd(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_BFADD_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFADD_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BFADD_Z_P_ZZ__(128, dn, g, m)
      },
      256 => {
          execute_BFADD_Z_P_ZZ__(256, dn, g, m)
      },
      512 => {
          execute_BFADD_Z_P_ZZ__(512, dn, g, m)
      },
      1024 => {
          execute_BFADD_Z_P_ZZ__(1024, dn, g, m)
      },
      2048 => {
          execute_BFADD_Z_P_ZZ__(2048, dn, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1198) = {
    SEE = 1198;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BFADD_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BFMUL_Z_P_ZZ__ : forall 'VL 'dn 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('g), int('m)) -> unit

function execute_BFMUL_Z_P_ZZ__ (VL, dn, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        if ActivePredicateElement(mask, e, 16) then {
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFMul(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_BFMUL_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFMUL_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BFMUL_Z_P_ZZ__(128, dn, g, m)
      },
      256 => {
          execute_BFMUL_Z_P_ZZ__(256, dn, g, m)
      },
      512 => {
          execute_BFMUL_Z_P_ZZ__(512, dn, g, m)
      },
      1024 => {
          execute_BFMUL_Z_P_ZZ__(1024, dn, g, m)
      },
      2048 => {
          execute_BFMUL_Z_P_ZZ__(2048, dn, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1199) = {
    SEE = 1199;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BFMUL_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BFSUB_Z_P_ZZ__ : forall 'VL 'dn 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('g), int('m)) -> unit

function execute_BFSUB_Z_P_ZZ__ (VL, dn, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        if ActivePredicateElement(mask, e, 16) then {
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFSub(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_BFSUB_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFSUB_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BFSUB_Z_P_ZZ__(128, dn, g, m)
      },
      256 => {
          execute_BFSUB_Z_P_ZZ__(256, dn, g, m)
      },
      512 => {
          execute_BFSUB_Z_P_ZZ__(512, dn, g, m)
      },
      1024 => {
          execute_BFSUB_Z_P_ZZ__(1024, dn, g, m)
      },
      2048 => {
          execute_BFSUB_Z_P_ZZ__(2048, dn, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1200) = {
    SEE = 1200;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BFSUB_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BFMLA_Z_P_ZZZ__ : forall 'VL 'da 'g 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('g), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_BFMLA_Z_P_ZZZ__ (VL, da, g, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 16) then {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            element3 : bits(16) = Elem_read(operand3, e, 16);
            if op1_neg then {
                element1 = BFNeg(element1)
            };
            if op3_neg then {
                element3 = BFNeg(element3)
            };
            result = Elem_set(result, e, 16, BFMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, Elem_read(operand3, e, 16))
        }
    };
    Z_set(da, VL) = result
}

val decode_BFMLA_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_BFMLA_Z_P_ZZZ__ (size, Zm, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_BFMLA_Z_P_ZZZ__(128, da, g, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_BFMLA_Z_P_ZZZ__(256, da, g, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_BFMLA_Z_P_ZZZ__(512, da, g, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_BFMLA_Z_P_ZZZ__(1024, da, g, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_BFMLA_Z_P_ZZZ__(2048, da, g, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1201) = {
    SEE = 1201;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLA_Z_P_ZZZ__(size, Zm, op, Pg, Zn, Zda)
}

val execute_BFMLS_Z_P_ZZZ__ : forall 'VL 'da 'g 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('g), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_BFMLS_Z_P_ZZZ__ (VL, da, g, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 16) then {
            element1 : bits(16) = Elem_read(operand1, e, 16);
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            element3 : bits(16) = Elem_read(operand3, e, 16);
            if op1_neg then {
                element1 = BFNeg(element1)
            };
            if op3_neg then {
                element3 = BFNeg(element3)
            };
            result = Elem_set(result, e, 16, BFMulAdd(element3, element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, Elem_read(operand3, e, 16))
        }
    };
    Z_set(da, VL) = result
}

val decode_BFMLS_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_BFMLS_Z_P_ZZZ__ (size, Zm, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_BFMLS_Z_P_ZZZ__(128, da, g, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_BFMLS_Z_P_ZZZ__(256, da, g, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_BFMLS_Z_P_ZZZ__(512, da, g, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_BFMLS_Z_P_ZZZ__(1024, da, g, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_BFMLS_Z_P_ZZZ__(2048, da, g, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1202) = {
    SEE = 1202;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLS_Z_P_ZZZ__(size, Zm, op, Pg, Zn, Zda)
}

val execute_BFMLA_Z_ZZZi_H : forall 'VL 'da 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_BFMLA_Z_ZZZi_H (VL, da, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let 'eltspersegment = DIV(128, 16);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits(16) = Elem_read(operand1, e, 16);
        let element2 : bits(16) = Elem_read(operand2, s, 16);
        element3 : bits(16) = Elem_read(result, e, 16);
        if op1_neg then {
            element1 = BFNeg(element1)
        };
        if op3_neg then {
            element3 = BFNeg(element3)
        };
        result = Elem_set(result, e, 16, BFMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLA_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLA_Z_ZZZi_H (i3h, i3l, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = false;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_BFMLA_Z_ZZZi_H(128, da, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_BFMLA_Z_ZZZi_H(256, da, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_BFMLA_Z_ZZZi_H(512, da, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_BFMLA_Z_ZZZi_H(1024, da, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_BFMLA_Z_ZZZi_H(2048, da, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1203) = {
    SEE = 1203;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLA_Z_ZZZi_H(i3h, i3l, Zm, op, Zn, Zda)
}

val execute_BFMLS_Z_ZZZi_H : forall 'VL 'da 'index 'm 'n ('op1_neg : Bool) ('op3_neg : Bool),
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('index), int('m), int('n), bool('op1_neg), bool('op3_neg)) -> unit

function execute_BFMLS_Z_ZZZi_H (VL, da, index, m, n, op1_neg, op3_neg) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let 'eltspersegment = DIV(128, 16);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        element1 : bits(16) = Elem_read(operand1, e, 16);
        let element2 : bits(16) = Elem_read(operand2, s, 16);
        element3 : bits(16) = Elem_read(result, e, 16);
        if op1_neg then {
            element1 = BFNeg(element1)
        };
        if op3_neg then {
            element3 = BFNeg(element3)
        };
        result = Elem_set(result, e, 16, BFMulAdd(element3, element1, element2, FPCR_read()))
    };
    Z_set(da, VL) = result
}

val decode_BFMLS_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_BFMLS_Z_ZZZi_H (i3h, i3l, Zm, op, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_neg : bool = true;
    let op3_neg : bool = false;
    match VL {
      128 => {
          execute_BFMLS_Z_ZZZi_H(128, da, index, m, n, op1_neg, op3_neg)
      },
      256 => {
          execute_BFMLS_Z_ZZZi_H(256, da, index, m, n, op1_neg, op3_neg)
      },
      512 => {
          execute_BFMLS_Z_ZZZi_H(512, da, index, m, n, op1_neg, op3_neg)
      },
      1024 => {
          execute_BFMLS_Z_ZZZi_H(1024, da, index, m, n, op1_neg, op3_neg)
      },
      2048 => {
          execute_BFMLS_Z_ZZZi_H(2048, da, index, m, n, op1_neg, op3_neg)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1204) = {
    SEE = 1204;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let op = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_BFMLS_Z_ZZZi_H(i3h, i3l, Zm, op, Zn, Zda)
}

val execute_BFMUL_Z_ZZi_H : forall 'VL 'd 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('index), int('m), int('n)) -> unit

function execute_BFMUL_Z_ZZi_H (VL, d, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let 'eltspersegment = DIV(128, 16);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        let element2 : bits(16) = Elem_read(operand2, s, 16);
        result = Elem_set(result, e, 16, BFMul(element1, element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_BFMUL_Z_ZZi_H : (bits(1), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFMUL_Z_ZZi_H (i3h, i3l, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFMUL_Z_ZZi_H(128, d, index, m, n)
      },
      256 => {
          execute_BFMUL_Z_ZZi_H(256, d, index, m, n)
      },
      512 => {
          execute_BFMUL_Z_ZZi_H(512, d, index, m, n)
      },
      1024 => {
          execute_BFMUL_Z_ZZi_H(1024, d, index, m, n)
      },
      2048 => {
          execute_BFMUL_Z_ZZi_H(2048, d, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1205) = {
    SEE = 1205;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFMUL_Z_ZZi_H(i3h, i3l, Zm, Zn, Zd)
}

val execute_BFMAXNM_Z_P_ZZ__ : forall 'VL 'dn 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('g), int('m)) -> unit

function execute_BFMAXNM_Z_P_ZZ__ (VL, dn, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        if ActivePredicateElement(mask, e, 16) then {
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFMaxNum(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_BFMAXNM_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFMAXNM_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BFMAXNM_Z_P_ZZ__(128, dn, g, m)
      },
      256 => {
          execute_BFMAXNM_Z_P_ZZ__(256, dn, g, m)
      },
      512 => {
          execute_BFMAXNM_Z_P_ZZ__(512, dn, g, m)
      },
      1024 => {
          execute_BFMAXNM_Z_P_ZZ__(1024, dn, g, m)
      },
      2048 => {
          execute_BFMAXNM_Z_P_ZZ__(2048, dn, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1206) = {
    SEE = 1206;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BFMAXNM_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BFMINNM_Z_P_ZZ__ : forall 'VL 'dn 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('g), int('m)) -> unit

function execute_BFMINNM_Z_P_ZZ__ (VL, dn, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        if ActivePredicateElement(mask, e, 16) then {
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFMinNum(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_BFMINNM_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFMINNM_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BFMINNM_Z_P_ZZ__(128, dn, g, m)
      },
      256 => {
          execute_BFMINNM_Z_P_ZZ__(256, dn, g, m)
      },
      512 => {
          execute_BFMINNM_Z_P_ZZ__(512, dn, g, m)
      },
      1024 => {
          execute_BFMINNM_Z_P_ZZ__(1024, dn, g, m)
      },
      2048 => {
          execute_BFMINNM_Z_P_ZZ__(2048, dn, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1207) = {
    SEE = 1207;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BFMINNM_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BFMAX_Z_P_ZZ__ : forall 'VL 'dn 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('g), int('m)) -> unit

function execute_BFMAX_Z_P_ZZ__ (VL, dn, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        if ActivePredicateElement(mask, e, 16) then {
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFMax(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_BFMAX_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFMAX_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BFMAX_Z_P_ZZ__(128, dn, g, m)
      },
      256 => {
          execute_BFMAX_Z_P_ZZ__(256, dn, g, m)
      },
      512 => {
          execute_BFMAX_Z_P_ZZ__(512, dn, g, m)
      },
      1024 => {
          execute_BFMAX_Z_P_ZZ__(1024, dn, g, m)
      },
      2048 => {
          execute_BFMAX_Z_P_ZZ__(2048, dn, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1208) = {
    SEE = 1208;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BFMAX_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BFMIN_Z_P_ZZ__ : forall 'VL 'dn 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('g), int('m)) -> unit

function execute_BFMIN_Z_P_ZZ__ (VL, dn, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, 16) then Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        if ActivePredicateElement(mask, e, 16) then {
            let element2 : bits(16) = Elem_read(operand2, e, 16);
            result = Elem_set(result, e, 16, BFMin(element1, element2, FPCR_read()))
        } else {
            result = Elem_set(result, e, 16, element1)
        }
    };
    Z_set(dn, VL) = result
}

val decode_BFMIN_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BFMIN_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BFMIN_Z_P_ZZ__(128, dn, g, m)
      },
      256 => {
          execute_BFMIN_Z_P_ZZ__(256, dn, g, m)
      },
      512 => {
          execute_BFMIN_Z_P_ZZ__(512, dn, g, m)
      },
      1024 => {
          execute_BFMIN_Z_P_ZZ__(1024, dn, g, m)
      },
      2048 => {
          execute_BFMIN_Z_P_ZZ__(2048, dn, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1209) = {
    SEE = 1209;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BFMIN_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BFCLAMP_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_BFCLAMP_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 16);
    result : bits('VL) = undefined;
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(16) = Elem_read(operand1, e, 16);
        let element2 : bits(16) = Elem_read(operand2, e, 16);
        let element3 : bits(16) = Elem_read(operand3, e, 16);
        result = Elem_set(result, e, 16, BFMinNum(BFMaxNum(element1, element3, FPCR_read()), element2, FPCR_read()))
    };
    Z_set(d, VL) = result
}

val decode_BFCLAMP_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_BFCLAMP_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVEB16B16()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BFCLAMP_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_BFCLAMP_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_BFCLAMP_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_BFCLAMP_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_BFCLAMP_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1210) = {
    SEE = 1210;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BFCLAMP_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_ADR_Z_AZ_D_u32_scaled : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'mbytes 'n 'osize,
  ('osize == 32 & 0 <= 'n & 'n <= 31 & 'mbytes in {1, 2, 4, 8} & 0 <= 'm & 'm <= 31 & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('mbytes), int('n), int('osize), bool('is_unsigned)) -> unit

function execute_ADR_Z_AZ_D_u32_scaled (VL, d, esize, m, mbytes, n, osize, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let base : bits('VL) = Z_read(n, VL);
    let offs : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let addr : bits('esize) = Elem_read(base, e, esize);
        let 'offset = asl_Int(Elem_read(offs, e, esize)[osize - 1 .. 0], is_unsigned);
        result = Elem_set(result, e, esize, addr + offset * mbytes)
    };
    Z_set(d, VL) = result
}

val decode_ADR_Z_AZ_D_u32_scaled : (bits(5), bits(2), bits(5), bits(5)) -> unit

function decode_ADR_Z_AZ_D_u32_scaled (Zm, msz, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'osize = 32;
    let is_unsigned : bool = true;
    let 'mbytes = (1 << UInt(msz));
    match VL {
      128 => {
          execute_ADR_Z_AZ_D_u32_scaled(128, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      256 => {
          execute_ADR_Z_AZ_D_u32_scaled(256, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      512 => {
          execute_ADR_Z_AZ_D_u32_scaled(512, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      1024 => {
          execute_ADR_Z_AZ_D_u32_scaled(1024, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      2048 => {
          execute_ADR_Z_AZ_D_u32_scaled(2048, d, esize, m, mbytes, n, osize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1211) = {
    SEE = 1211;
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ADR_Z_AZ_D_u32_scaled(Zm, msz, Zn, Zd)
}

val execute_ADR_Z_AZ_D_s32_scaled : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'mbytes 'n 'osize,
  ('osize == 32 & 0 <= 'n & 'n <= 31 & 'mbytes in {1, 2, 4, 8} & 0 <= 'm & 'm <= 31 & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('mbytes), int('n), int('osize), bool('is_unsigned)) -> unit

function execute_ADR_Z_AZ_D_s32_scaled (VL, d, esize, m, mbytes, n, osize, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let base : bits('VL) = Z_read(n, VL);
    let offs : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let addr : bits('esize) = Elem_read(base, e, esize);
        let 'offset = asl_Int(Elem_read(offs, e, esize)[osize - 1 .. 0], is_unsigned);
        result = Elem_set(result, e, esize, addr + offset * mbytes)
    };
    Z_set(d, VL) = result
}

val decode_ADR_Z_AZ_D_s32_scaled : (bits(5), bits(2), bits(5), bits(5)) -> unit

function decode_ADR_Z_AZ_D_s32_scaled (Zm, msz, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'osize = 32;
    let is_unsigned : bool = false;
    let 'mbytes = (1 << UInt(msz));
    match VL {
      128 => {
          execute_ADR_Z_AZ_D_s32_scaled(128, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      256 => {
          execute_ADR_Z_AZ_D_s32_scaled(256, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      512 => {
          execute_ADR_Z_AZ_D_s32_scaled(512, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      1024 => {
          execute_ADR_Z_AZ_D_s32_scaled(1024, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      2048 => {
          execute_ADR_Z_AZ_D_s32_scaled(2048, d, esize, m, mbytes, n, osize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1212) = {
    SEE = 1212;
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ADR_Z_AZ_D_s32_scaled(Zm, msz, Zn, Zd)
}

val execute_ADR_Z_AZ_SD_same_scaled : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'mbytes 'n 'osize,
  ('osize in {32, 64} & 0 <= 'n & 'n <= 31 & 'mbytes in {1, 2, 4, 8} & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('mbytes), int('n), int('osize), bool('is_unsigned)) -> unit

function execute_ADR_Z_AZ_SD_same_scaled (VL, d, esize, m, mbytes, n, osize, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let base : bits('VL) = Z_read(n, VL);
    let offs : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let addr : bits('esize) = Elem_read(base, e, esize);
        assert(constraint('osize - 1 < 'esize));
        let 'offset = asl_Int(Elem_read(offs, e, esize)[osize - 1 .. 0], is_unsigned);
        result = Elem_set(result, e, esize, addr + offset * mbytes)
    };
    Z_set(d, VL) = result
}

val decode_ADR_Z_AZ_SD_same_scaled : (bits(1), bits(5), bits(2), bits(5), bits(5)) -> unit

function decode_ADR_Z_AZ_SD_same_scaled (sz, Zm, msz, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'osize = esize;
    let is_unsigned : bool = true;
    let 'mbytes = (1 << UInt(msz));
    match VL {
      128 => {
          execute_ADR_Z_AZ_SD_same_scaled(128, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      256 => {
          execute_ADR_Z_AZ_SD_same_scaled(256, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      512 => {
          execute_ADR_Z_AZ_SD_same_scaled(512, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      1024 => {
          execute_ADR_Z_AZ_SD_same_scaled(1024, d, esize, m, mbytes, n, osize, is_unsigned)
      },
      2048 => {
          execute_ADR_Z_AZ_SD_same_scaled(2048, d, esize, m, mbytes, n, osize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1213) = {
    SEE = 1213;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ADR_Z_AZ_SD_same_scaled(sz, Zm, msz, Zn, Zd)
}

val execute_ADD_Z_ZI__ : forall 'VL 'dn 'esize 'imm,
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm)) -> unit

function execute_ADD_Z_ZI__ (VL, dn, esize, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        result = Elem_set(result, e, esize, element1 + imm)
    };
    Z_set(dn, VL) = result
}

val decode_ADD_Z_ZI__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_ADD_Z_ZI__ (size, sh, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    imm : int = UInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    match VL {
      128 => {
          execute_ADD_Z_ZI__(128, dn, esize, imm)
      },
      256 => {
          execute_ADD_Z_ZI__(256, dn, esize, imm)
      },
      512 => {
          execute_ADD_Z_ZI__(512, dn, esize, imm)
      },
      1024 => {
          execute_ADD_Z_ZI__(1024, dn, esize, imm)
      },
      2048 => {
          execute_ADD_Z_ZI__(2048, dn, esize, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1214) = {
    SEE = 1214;
    let size = Slice(__opcode, 22, 2);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ADD_Z_ZI__(size, sh, imm8, Zdn)
}

val execute_SUB_Z_ZI__ : forall 'VL 'dn 'esize 'imm,
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm)) -> unit

function execute_SUB_Z_ZI__ (VL, dn, esize, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        result = Elem_set(result, e, esize, element1 - imm)
    };
    Z_set(dn, VL) = result
}

val decode_SUB_Z_ZI__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_SUB_Z_ZI__ (size, sh, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    imm : int = UInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    match VL {
      128 => {
          execute_SUB_Z_ZI__(128, dn, esize, imm)
      },
      256 => {
          execute_SUB_Z_ZI__(256, dn, esize, imm)
      },
      512 => {
          execute_SUB_Z_ZI__(512, dn, esize, imm)
      },
      1024 => {
          execute_SUB_Z_ZI__(1024, dn, esize, imm)
      },
      2048 => {
          execute_SUB_Z_ZI__(2048, dn, esize, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1215) = {
    SEE = 1215;
    let size = Slice(__opcode, 22, 2);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SUB_Z_ZI__(size, sh, imm8, Zdn)
}

val execute_SUBR_Z_ZI__ : forall 'VL 'dn 'esize 'imm,
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm)) -> unit

function execute_SUBR_Z_ZI__ (VL, dn, esize, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        result = Elem_set(result, e, esize, (imm - element1)[esize - 1 .. 0])
    };
    Z_set(dn, VL) = result
}

val decode_SUBR_Z_ZI__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_SUBR_Z_ZI__ (size, sh, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    imm : int = UInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    match VL {
      128 => {
          execute_SUBR_Z_ZI__(128, dn, esize, imm)
      },
      256 => {
          execute_SUBR_Z_ZI__(256, dn, esize, imm)
      },
      512 => {
          execute_SUBR_Z_ZI__(512, dn, esize, imm)
      },
      1024 => {
          execute_SUBR_Z_ZI__(1024, dn, esize, imm)
      },
      2048 => {
          execute_SUBR_Z_ZI__(2048, dn, esize, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1216) = {
    SEE = 1216;
    let size = Slice(__opcode, 22, 2);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SUBR_Z_ZI__(size, sh, imm8, Zdn)
}

val execute_MUL_Z_ZI__ : forall 'VL 'dn 'esize 'imm,
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm)) -> unit

function execute_MUL_Z_ZI__ (VL, dn, esize, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        result = Elem_set(result, e, esize, (element1 * imm)[esize - 1 .. 0])
    };
    Z_set(dn, VL) = result
}

val decode_MUL_Z_ZI__ : (bits(2), bits(8), bits(5)) -> unit

function decode_MUL_Z_ZI__ (size, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let 'imm = SInt(imm8);
    match VL {
      128 => {
          execute_MUL_Z_ZI__(128, dn, esize, imm)
      },
      256 => {
          execute_MUL_Z_ZI__(256, dn, esize, imm)
      },
      512 => {
          execute_MUL_Z_ZI__(512, dn, esize, imm)
      },
      1024 => {
          execute_MUL_Z_ZI__(1024, dn, esize, imm)
      },
      2048 => {
          execute_MUL_Z_ZI__(2048, dn, esize, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1217) = {
    SEE = 1217;
    let size = Slice(__opcode, 22, 2);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_MUL_Z_ZI__(size, imm8, Zdn)
}

val execute_UMAX_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_UMAX_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        result = Elem_set(result, e, esize, Max(element1, imm)[esize - 1 .. 0])
    };
    Z_set(dn, VL) = result
}

val decode_UMAX_Z_ZI__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_UMAX_Z_ZI__ (size, U, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = true;
    let 'imm = asl_Int(imm8, is_unsigned);
    match VL {
      128 => {
          execute_UMAX_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_UMAX_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_UMAX_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_UMAX_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_UMAX_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1218) = {
    SEE = 1218;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UMAX_Z_ZI__(size, U, imm8, Zdn)
}

val execute_SMAX_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_SMAX_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        result = Elem_set(result, e, esize, Max(element1, imm)[esize - 1 .. 0])
    };
    Z_set(dn, VL) = result
}

val decode_SMAX_Z_ZI__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_SMAX_Z_ZI__ (size, U, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = false;
    let 'imm = asl_Int(imm8, is_unsigned);
    match VL {
      128 => {
          execute_SMAX_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_SMAX_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_SMAX_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_SMAX_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_SMAX_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1219) = {
    SEE = 1219;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SMAX_Z_ZI__(size, U, imm8, Zdn)
}

val execute_UMIN_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_UMIN_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        result = Elem_set(result, e, esize, Min(element1, imm)[esize - 1 .. 0])
    };
    Z_set(dn, VL) = result
}

val decode_UMIN_Z_ZI__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_UMIN_Z_ZI__ (size, U, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = true;
    let 'imm = asl_Int(imm8, is_unsigned);
    match VL {
      128 => {
          execute_UMIN_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_UMIN_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_UMIN_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_UMIN_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_UMIN_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1220) = {
    SEE = 1220;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UMIN_Z_ZI__(size, U, imm8, Zdn)
}

val execute_SMIN_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_SMIN_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        result = Elem_set(result, e, esize, Min(element1, imm)[esize - 1 .. 0])
    };
    Z_set(dn, VL) = result
}

val decode_SMIN_Z_ZI__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_SMIN_Z_ZI__ (size, U, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = false;
    let 'imm = asl_Int(imm8, is_unsigned);
    match VL {
      128 => {
          execute_SMIN_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_SMIN_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_SMIN_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_SMIN_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_SMIN_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1221) = {
    SEE = 1221;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SMIN_Z_ZI__(size, U, imm8, Zdn)
}

val execute_ADDPL_R_RI__ : forall 'VL 'd 'imm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('imm), int('n)) -> unit

function execute_ADDPL_R_RI__ (VL, d, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let operand1 : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
    let result : bits(64) = operand1 + imm * DIV(PL, 8);
    if d == 31 then {
        SP_set() = result
    } else {
        X_set(d, 64) = result
    }
}

val decode_ADDPL_R_RI__ : (bits(5), bits(6), bits(5)) -> unit

function decode_ADDPL_R_RI__ (Rn, imm6, Rd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'd = UInt(Rd);
    let 'imm = SInt(imm6);
    match VL {
      128 => {
          execute_ADDPL_R_RI__(128, d, imm, n)
      },
      256 => {
          execute_ADDPL_R_RI__(256, d, imm, n)
      },
      512 => {
          execute_ADDPL_R_RI__(512, d, imm, n)
      },
      1024 => {
          execute_ADDPL_R_RI__(1024, d, imm, n)
      },
      2048 => {
          execute_ADDPL_R_RI__(2048, d, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1222) = {
    SEE = 1222;
    let Rn = Slice(__opcode, 16, 5);
    let imm6 = Slice(__opcode, 5, 6);
    let Rd = Slice(__opcode, 0, 5);
    decode_ADDPL_R_RI__(Rn, imm6, Rd)
}

val execute_ADDVL_R_RI__ : forall 'VL 'd 'imm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('imm), int('n)) -> unit

function execute_ADDVL_R_RI__ (VL, d, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let operand1 : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
    let result : bits(64) = operand1 + imm * DIV(VL, 8);
    if d == 31 then {
        SP_set() = result
    } else {
        X_set(d, 64) = result
    }
}

val decode_ADDVL_R_RI__ : (bits(5), bits(6), bits(5)) -> unit

function decode_ADDVL_R_RI__ (Rn, imm6, Rd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'd = UInt(Rd);
    let 'imm = SInt(imm6);
    match VL {
      128 => {
          execute_ADDVL_R_RI__(128, d, imm, n)
      },
      256 => {
          execute_ADDVL_R_RI__(256, d, imm, n)
      },
      512 => {
          execute_ADDVL_R_RI__(512, d, imm, n)
      },
      1024 => {
          execute_ADDVL_R_RI__(1024, d, imm, n)
      },
      2048 => {
          execute_ADDVL_R_RI__(2048, d, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1223) = {
    SEE = 1223;
    let Rn = Slice(__opcode, 16, 5);
    let imm6 = Slice(__opcode, 5, 6);
    let Rd = Slice(__opcode, 0, 5);
    decode_ADDVL_R_RI__(Rn, imm6, Rd)
}

val execute_ADD_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_ADD_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        result = Elem_set(result, e, esize, element1 + element2)
    };
    Z_set(d, VL) = result
}

val decode_ADD_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_ADD_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_ADD_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_ADD_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_ADD_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_ADD_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_ADD_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1224) = {
    SEE = 1224;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ADD_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_AND_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_AND_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    Z_set(d, VL) = operand1 & operand2
}

val decode_AND_Z_ZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_AND_Z_ZZ__ (Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_AND_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_AND_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_AND_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_AND_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_AND_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1225) = {
    SEE = 1225;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_AND_Z_ZZ__(Zm, Zn, Zd)
}

val execute_BIC_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_BIC_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    Z_set(d, VL) = operand1 & not_vec(operand2)
}

val decode_BIC_Z_ZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_BIC_Z_ZZ__ (Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BIC_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_BIC_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_BIC_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_BIC_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_BIC_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1226) = {
    SEE = 1226;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BIC_Z_ZZ__(Zm, Zn, Zd)
}

val execute_EOR_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_EOR_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    Z_set(d, VL) = EOR(operand1, operand2)
}

val decode_EOR_Z_ZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_EOR_Z_ZZ__ (Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_EOR_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_EOR_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_EOR_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_EOR_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_EOR_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1227) = {
    SEE = 1227;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_EOR_Z_ZZ__(Zm, Zn, Zd)
}

val execute_ORR_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_ORR_Z_ZZ__ (VL, d, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    Z_set(d, VL) = operand1 | operand2
}

val decode_ORR_Z_ZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_ORR_Z_ZZ__ (Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_ORR_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_ORR_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_ORR_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_ORR_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_ORR_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1228) = {
    SEE = 1228;
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ORR_Z_ZZ__(Zm, Zn, Zd)
}

val execute_SUB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SUB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        result = Elem_set(result, e, esize, element1 - element2)
    };
    Z_set(d, VL) = result
}

val decode_SUB_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_SUB_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SUB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SUB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SUB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SUB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SUB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1229) = {
    SEE = 1229;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SUB_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_ADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_ADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element1 + element2)
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_ADD_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_ADD_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_ADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_ADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_ADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_ADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_ADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1230) = {
    SEE = 1230;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ADD_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_AND_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_AND_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element1 & element2)
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_AND_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_AND_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_AND_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_AND_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_AND_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_AND_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_AND_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1231) = {
    SEE = 1231;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_AND_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_BIC_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_BIC_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element1 & not_vec(element2))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_BIC_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_BIC_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_BIC_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_BIC_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_BIC_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_BIC_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_BIC_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1232) = {
    SEE = 1232;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BIC_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_EOR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_EOR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, EOR(element1, element2))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_EOR_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_EOR_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_EOR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_EOR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_EOR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_EOR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_EOR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1233) = {
    SEE = 1233;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_EOR_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_LSL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_LSL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let 'shift = Min(UInt(element2), esize);
            result = Elem_set(result, e, esize, LSL(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LSL_Z_P_ZZ__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_LSL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_LSL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_LSL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_LSL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_LSL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1234) = {
    SEE = 1234;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSL_Z_P_ZZ__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_LSLR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_LSLR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let 'shift = Min(UInt(element1), esize);
            result = Elem_set(result, e, esize, LSL(element2, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSLR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LSLR_Z_P_ZZ__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_LSLR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_LSLR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_LSLR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_LSLR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_LSLR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1235) = {
    SEE = 1235;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSLR_Z_P_ZZ__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_MUL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_MUL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'product = element1 * element2;
            result = Elem_set(result, e, esize, product[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_MUL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_MUL_Z_P_ZZ__ (size, H, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_MUL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_MUL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_MUL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_MUL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_MUL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1236) = {
    SEE = 1236;
    let size = Slice(__opcode, 22, 2);
    let H = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_MUL_Z_P_ZZ__(size, H, U, Pg, Zm, Zdn)
}

val execute_ORR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_ORR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element1 | element2)
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_ORR_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_ORR_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_ORR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_ORR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_ORR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_ORR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_ORR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1237) = {
    SEE = 1237;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ORR_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_SUB_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SUB_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element1 - element2)
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SUB_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_SUB_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_SUB_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SUB_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SUB_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SUB_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SUB_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1238) = {
    SEE = 1238;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SUB_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_SUBR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SUBR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, element2 - element1)
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SUBR_Z_P_ZZ__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_SUBR_Z_P_ZZ__ (size, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_SUBR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SUBR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SUBR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SUBR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SUBR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1239) = {
    SEE = 1239;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SUBR_Z_P_ZZ__(size, Pg, Zm, Zdn)
}

val execute_LSR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_LSR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let 'shift = Min(UInt(element2), esize);
            result = Elem_set(result, e, esize, LSR(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LSR_Z_P_ZZ__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_LSR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_LSR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_LSR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_LSR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_LSR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1240) = {
    SEE = 1240;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSR_Z_P_ZZ__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_ASR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_ASR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let 'shift = Min(UInt(element2), esize);
            result = Elem_set(result, e, esize, ASR(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_ASR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ASR_Z_P_ZZ__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_ASR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_ASR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_ASR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_ASR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_ASR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1241) = {
    SEE = 1241;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ASR_Z_P_ZZ__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_LSRR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_LSRR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let 'shift = Min(UInt(element1), esize);
            result = Elem_set(result, e, esize, LSR(element2, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSRR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LSRR_Z_P_ZZ__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_LSRR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_LSRR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_LSRR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_LSRR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_LSRR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1242) = {
    SEE = 1242;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSRR_Z_P_ZZ__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_ASRR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_ASRR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits('esize) = Elem_read(operand2, e, esize);
            let 'shift = Min(UInt(element1), esize);
            result = Elem_set(result, e, esize, ASR(element2, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_ASRR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ASRR_Z_P_ZZ__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_ASRR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_ASRR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_ASRR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_ASRR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_ASRR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1243) = {
    SEE = 1243;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ASRR_Z_P_ZZ__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_UABD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UABD_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'absdiff = Abs(element1 - element2);
            result = Elem_set(result, e, esize, absdiff[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UABD_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UABD_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UABD_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UABD_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UABD_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UABD_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UABD_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1244) = {
    SEE = 1244;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UABD_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_SABD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SABD_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'absdiff = Abs(element1 - element2);
            result = Elem_set(result, e, esize, absdiff[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SABD_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SABD_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SABD_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SABD_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SABD_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SABD_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SABD_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1245) = {
    SEE = 1245;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SABD_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_UDIV_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UDIV_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            quotient : int = undefined;
            if element2 == 0 then {
                quotient = 0
            } else {
                quotient = RoundTowardsZero(Real(element1) / Real(element2))
            };
            let 'quotient = quotient;
            result = Elem_set(result, e, esize, quotient[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UDIV_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UDIV_Z_P_ZZ__ (size, R, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UDIV_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UDIV_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UDIV_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UDIV_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UDIV_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1246) = {
    SEE = 1246;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UDIV_Z_P_ZZ__(size, R, U, Pg, Zm, Zdn)
}

val execute_SDIV_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SDIV_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            quotient : int = undefined;
            if element2 == 0 then {
                quotient = 0
            } else {
                quotient = RoundTowardsZero(Real(element1) / Real(element2))
            };
            let 'quotient = quotient;
            result = Elem_set(result, e, esize, quotient[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SDIV_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SDIV_Z_P_ZZ__ (size, R, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SDIV_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SDIV_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SDIV_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SDIV_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SDIV_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1247) = {
    SEE = 1247;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SDIV_Z_P_ZZ__(size, R, U, Pg, Zm, Zdn)
}

val execute_UDIVR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UDIVR_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            quotient : int = undefined;
            if element1 == 0 then {
                quotient = 0
            } else {
                quotient = RoundTowardsZero(Real(element2) / Real(element1))
            };
            let 'quotient = quotient;
            result = Elem_set(result, e, esize, quotient[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UDIVR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UDIVR_Z_P_ZZ__ (size, R, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UDIVR_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UDIVR_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UDIVR_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UDIVR_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UDIVR_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1248) = {
    SEE = 1248;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UDIVR_Z_P_ZZ__(size, R, U, Pg, Zm, Zdn)
}

val execute_SDIVR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SDIVR_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            quotient : int = undefined;
            if element1 == 0 then {
                quotient = 0
            } else {
                quotient = RoundTowardsZero(Real(element2) / Real(element1))
            };
            let 'quotient = quotient;
            result = Elem_set(result, e, esize, quotient[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SDIVR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SDIVR_Z_P_ZZ__ (size, R, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SDIVR_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SDIVR_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SDIVR_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SDIVR_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SDIVR_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1249) = {
    SEE = 1249;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SDIVR_Z_P_ZZ__(size, R, U, Pg, Zm, Zdn)
}

val execute_UMAX_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UMAX_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'maximum = Max(element1, element2);
            result = Elem_set(result, e, esize, maximum[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UMAX_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMAX_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMAX_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UMAX_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UMAX_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UMAX_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UMAX_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1250) = {
    SEE = 1250;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UMAX_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_SMAX_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SMAX_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'maximum = Max(element1, element2);
            result = Elem_set(result, e, esize, maximum[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SMAX_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMAX_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMAX_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SMAX_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SMAX_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SMAX_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SMAX_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1251) = {
    SEE = 1251;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SMAX_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_UMIN_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UMIN_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'minimum = Min(element1, element2);
            result = Elem_set(result, e, esize, minimum[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UMIN_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMIN_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMIN_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UMIN_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UMIN_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UMIN_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UMIN_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1252) = {
    SEE = 1252;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UMIN_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_SMIN_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SMIN_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'minimum = Min(element1, element2);
            result = Elem_set(result, e, esize, minimum[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SMIN_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMIN_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMIN_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SMIN_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SMIN_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SMIN_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SMIN_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1253) = {
    SEE = 1253;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SMIN_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_UMULH_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UMULH_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'product = ((element1 * element2) >> esize);
            result = Elem_set(result, e, esize, product[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UMULH_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMULH_Z_P_ZZ__ (size, H, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMULH_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UMULH_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UMULH_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UMULH_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UMULH_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1254) = {
    SEE = 1254;
    let size = Slice(__opcode, 22, 2);
    let H = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UMULH_Z_P_ZZ__(size, H, U, Pg, Zm, Zdn)
}

val execute_SMULH_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SMULH_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            let 'product = ((element1 * element2) >> esize);
            result = Elem_set(result, e, esize, product[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SMULH_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMULH_Z_P_ZZ__ (size, H, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMULH_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SMULH_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SMULH_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SMULH_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SMULH_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1255) = {
    SEE = 1255;
    let size = Slice(__opcode, 22, 2);
    let H = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SMULH_Z_P_ZZ__(size, H, U, Pg, Zm, Zdn)
}

val execute_WHILELO_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELO_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELO_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILELO_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILELO_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_LT;
    match VL {
      128 => {
          execute_WHILELO_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELO_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELO_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELO_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELO_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1256) = {
    SEE = 1256;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILELO_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_WHILELS_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELS_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELS_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILELS_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILELS_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_LE;
    match VL {
      128 => {
          execute_WHILELS_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELS_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELS_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELS_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELS_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitone, bitone, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1257) = {
    SEE = 1257;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILELS_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_WHILELT_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELT_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELT_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILELT_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILELT_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_LT;
    match VL {
      128 => {
          execute_WHILELT_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELT_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELT_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELT_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELT_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitzero, bitone, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1258) = {
    SEE = 1258;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILELT_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_WHILELE_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELE_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELE_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILELE_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILELE_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_LE;
    match VL {
      128 => {
          execute_WHILELE_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELE_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELE_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELE_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELE_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitzero, bitone, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1259) = {
    SEE = 1259;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILELE_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_WHILEHI_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEHI_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEHI_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILEHI_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILEHI_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_GT;
    match VL {
      128 => {
          execute_WHILEHI_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEHI_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEHI_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEHI_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEHI_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1260) = {
    SEE = 1260;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILEHI_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_WHILEHS_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEHS_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEHS_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILEHS_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILEHS_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_GE;
    match VL {
      128 => {
          execute_WHILEHS_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEHS_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEHS_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEHS_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEHS_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1261) = {
    SEE = 1261;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILEHS_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_WHILEGT_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEGT_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEGT_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILEGT_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILEGT_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_GT;
    match VL {
      128 => {
          execute_WHILEGT_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEGT_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEGT_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEGT_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEGT_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1262) = {
    SEE = 1262;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILEGT_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_WHILEGE_P_P_RR__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEGE_P_P_RR__ (VL, d, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEGE_P_P_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILEGE_P_P_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(4)) -> unit

function decode_WHILEGE_P_P_RR__ (size, Rm, sf, U, lt, Rn, eq, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = (32 << UInt(sf));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_GE;
    match VL {
      128 => {
          execute_WHILEGE_P_P_RR__(128, d, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEGE_P_P_RR__(256, d, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEGE_P_P_RR__(512, d, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEGE_P_P_RR__(1024, d, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEGE_P_P_RR__(2048, d, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1263) = {
    SEE = 1263;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let sf = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILEGE_P_P_RR__(size, Rm, sf, U, lt, Rn, eq, Pd)
}

val execute_CMPEQ_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPEQ_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPEQ_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPEQ_P_P_ZI__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPEQ_P_P_ZI__ (size, imm5, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_EQ;
    let 'imm = SInt(imm5);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPEQ_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPEQ_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPEQ_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPEQ_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPEQ_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1264) = {
    SEE = 1264;
    let size = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPEQ_P_P_ZI__(size, imm5, Pg, Zn, ne, Pd)
}

val execute_CMPNE_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPNE_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPNE_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPNE_P_P_ZI__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPNE_P_P_ZI__ (size, imm5, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_NE;
    let 'imm = SInt(imm5);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPNE_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPNE_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPNE_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPNE_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPNE_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1265) = {
    SEE = 1265;
    let size = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPNE_P_P_ZI__(size, imm5, Pg, Zn, ne, Pd)
}

val execute_CMPHS_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'imm & 'imm <= 127 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPHS_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPHS_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPHS_P_P_ZI__ : (bits(2), bits(7), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPHS_P_P_ZI__ (size, imm7, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    let 'imm = UInt(imm7);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPHS_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPHS_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPHS_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPHS_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPHS_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1266) = {
    SEE = 1266;
    let size = Slice(__opcode, 22, 2);
    let imm7 = Slice(__opcode, 14, 7);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPHS_P_P_ZI__(size, imm7, lt, Pg, Zn, ne, Pd)
}

val execute_CMPHI_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'imm & 'imm <= 127 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPHI_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPHI_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPHI_P_P_ZI__ : (bits(2), bits(7), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPHI_P_P_ZI__ (size, imm7, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    let 'imm = UInt(imm7);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPHI_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPHI_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPHI_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPHI_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPHI_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1267) = {
    SEE = 1267;
    let size = Slice(__opcode, 22, 2);
    let imm7 = Slice(__opcode, 14, 7);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPHI_P_P_ZI__(size, imm7, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLO_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'imm & 'imm <= 127 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLO_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPLO_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLO_P_P_ZI__ : (bits(2), bits(7), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLO_P_P_ZI__ (size, imm7, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LT;
    let 'imm = UInt(imm7);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPLO_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLO_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLO_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLO_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLO_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1268) = {
    SEE = 1268;
    let size = Slice(__opcode, 22, 2);
    let imm7 = Slice(__opcode, 14, 7);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLO_P_P_ZI__(size, imm7, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLS_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'imm & 'imm <= 127 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLS_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPLS_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLS_P_P_ZI__ : (bits(2), bits(7), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLS_P_P_ZI__ (size, imm7, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LE;
    let 'imm = UInt(imm7);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPLS_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLS_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLS_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLS_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLS_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, _, _, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1269) = {
    SEE = 1269;
    let size = Slice(__opcode, 22, 2);
    let imm7 = Slice(__opcode, 14, 7);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLS_P_P_ZI__(size, imm7, lt, Pg, Zn, ne, Pd)
}

val execute_CMPGE_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPGE_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPGE_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPGE_P_P_ZI__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPGE_P_P_ZI__ (size, imm5, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    let 'imm = SInt(imm5);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPGE_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPGE_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPGE_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPGE_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPGE_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1270) = {
    SEE = 1270;
    let size = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPGE_P_P_ZI__(size, imm5, lt, Pg, Zn, ne, Pd)
}

val execute_CMPGT_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPGT_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPGT_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPGT_P_P_ZI__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPGT_P_P_ZI__ (size, imm5, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    let 'imm = SInt(imm5);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPGT_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPGT_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPGT_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPGT_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPGT_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1271) = {
    SEE = 1271;
    let size = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPGT_P_P_ZI__(size, imm5, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLT_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLT_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPLT_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLT_P_P_ZI__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLT_P_P_ZI__ (size, imm5, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LT;
    let 'imm = SInt(imm5);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPLT_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLT_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLT_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLT_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLT_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1272) = {
    SEE = 1272;
    let size = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLT_P_P_ZI__(size, imm5, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLE_P_P_ZI__ : forall 'VL 'd 'esize 'g 'imm ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLE_P_P_ZI__ (VL, d, esize, g, imm, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            match op {
              Cmp_EQ => {
                  cond = element1 == imm
              },
              Cmp_NE => {
                  cond = element1 != imm
              },
              Cmp_GE => {
                  cond = element1 >= imm
              },
              Cmp_LT => {
                  cond = element1 < imm
              },
              Cmp_GT => {
                  cond = element1 > imm
              },
              Cmp_LE => {
                  cond = element1 <= imm
              },
              _ => PatternMatchFailure("execute_CMPLE_P_P_ZI__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLE_P_P_ZI__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLE_P_P_ZI__ (size, imm5, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LE;
    let 'imm = SInt(imm5);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPLE_P_P_ZI__(128, d, esize, g, imm, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLE_P_P_ZI__(256, d, esize, g, imm, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLE_P_P_ZI__(512, d, esize, g, imm, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLE_P_P_ZI__(1024, d, esize, g, imm, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLE_P_P_ZI__(2048, d, esize, g, imm, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1273) = {
    SEE = 1273;
    let size = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLE_P_P_ZI__(size, imm5, lt, Pg, Zn, ne, Pd)
}

val execute_CMPEQ_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPEQ_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPEQ_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPEQ_P_P_ZW__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPEQ_P_P_ZW__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_EQ;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPEQ_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPEQ_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPEQ_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPEQ_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPEQ_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1274) = {
    SEE = 1274;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPEQ_P_P_ZW__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_CMPNE_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPNE_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPNE_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPNE_P_P_ZW__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPNE_P_P_ZW__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_NE;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPNE_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPNE_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPNE_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPNE_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPNE_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1275) = {
    SEE = 1275;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPNE_P_P_ZW__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_CMPHS_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPHS_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPHS_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPHS_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPHS_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPHS_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPHS_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPHS_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPHS_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPHS_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1276) = {
    SEE = 1276;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPHS_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPHI_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPHI_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPHI_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPHI_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPHI_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPHI_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPHI_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPHI_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPHI_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPHI_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1277) = {
    SEE = 1277;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPHI_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLO_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLO_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPLO_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLO_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLO_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LT;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPLO_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLO_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLO_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLO_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLO_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1278) = {
    SEE = 1278;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLO_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLS_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLS_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPLS_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLS_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLS_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LE;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPLS_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLS_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLS_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLS_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLS_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1279) = {
    SEE = 1279;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLS_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPGE_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPGE_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPGE_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPGE_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPGE_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPGE_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPGE_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPGE_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPGE_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPGE_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1280) = {
    SEE = 1280;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPGE_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPGT_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPGT_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPGT_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPGT_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPGT_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPGT_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPGT_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPGT_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPGT_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPGT_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1281) = {
    SEE = 1281;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPGT_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLT_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLT_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPLT_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLT_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLT_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LT;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPLT_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLT_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLT_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLT_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLT_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1282) = {
    SEE = 1282;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLT_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPLE_P_P_ZW__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPLE_P_P_ZW__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, DIV(e * esize, 64), 64), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPLE_P_P_ZW__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPLE_P_P_ZW__ : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPLE_P_P_ZW__ (size, Zm, U, lt, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_LE;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPLE_P_P_ZW__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPLE_P_P_ZW__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPLE_P_P_ZW__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPLE_P_P_ZW__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPLE_P_P_ZW__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1283) = {
    SEE = 1283;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 15, 1);
    let lt = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPLE_P_P_ZW__(size, Zm, U, lt, Pg, Zn, ne, Pd)
}

val execute_CMPEQ_P_P_ZZ__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPEQ_P_P_ZZ__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPEQ_P_P_ZZ__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPEQ_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPEQ_P_P_ZZ__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_EQ;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPEQ_P_P_ZZ__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPEQ_P_P_ZZ__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPEQ_P_P_ZZ__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPEQ_P_P_ZZ__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPEQ_P_P_ZZ__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1284) = {
    SEE = 1284;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPEQ_P_P_ZZ__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_CMPNE_P_P_ZZ__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPNE_P_P_ZZ__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPNE_P_P_ZZ__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPNE_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPNE_P_P_ZZ__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_NE;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPNE_P_P_ZZ__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPNE_P_P_ZZ__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPNE_P_P_ZZ__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPNE_P_P_ZZ__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPNE_P_P_ZZ__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1285) = {
    SEE = 1285;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPNE_P_P_ZZ__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_CMPGE_P_P_ZZ__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPGE_P_P_ZZ__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPGE_P_P_ZZ__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPGE_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPGE_P_P_ZZ__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPGE_P_P_ZZ__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPGE_P_P_ZZ__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPGE_P_P_ZZ__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPGE_P_P_ZZ__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPGE_P_P_ZZ__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1286) = {
    SEE = 1286;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPGE_P_P_ZZ__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_CMPGT_P_P_ZZ__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPGT_P_P_ZZ__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPGT_P_P_ZZ__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPGT_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPGT_P_P_ZZ__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_CMPGT_P_P_ZZ__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPGT_P_P_ZZ__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPGT_P_P_ZZ__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPGT_P_P_ZZ__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPGT_P_P_ZZ__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1287) = {
    SEE = 1287;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPGT_P_P_ZZ__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_CMPHS_P_P_ZZ__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPHS_P_P_ZZ__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPHS_P_P_ZZ__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPHS_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPHS_P_P_ZZ__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GE;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPHS_P_P_ZZ__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPHS_P_P_ZZ__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPHS_P_P_ZZ__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPHS_P_P_ZZ__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPHS_P_P_ZZ__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1288) = {
    SEE = 1288;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPHS_P_P_ZZ__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_CMPHI_P_P_ZZ__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), SVECmp, bool('is_unsigned)) -> unit

function execute_CMPHI_P_P_ZZ__ (VL, d, esize, g, m, n, op, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        if ActivePredicateElement(mask, e, esize) then {
            cond : bool = undefined;
            let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
            match op {
              Cmp_EQ => {
                  cond = element1 == element2
              },
              Cmp_NE => {
                  cond = element1 != element2
              },
              Cmp_GE => {
                  cond = element1 >= element2
              },
              Cmp_LT => {
                  cond = element1 < element2
              },
              Cmp_GT => {
                  cond = element1 > element2
              },
              Cmp_LE => {
                  cond = element1 <= element2
              },
              _ => PatternMatchFailure("execute_CMPHI_P_P_ZZ__")
            };
            let pbit : bits(1) = if cond then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_CMPHI_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(1), bits(4)) -> unit

function decode_CMPHI_P_P_ZZ__ (size, Zm, Pg, Zn, ne, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Pd);
    let op : SVECmp = Cmp_GT;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_CMPHI_P_P_ZZ__(128, d, esize, g, m, n, op, is_unsigned)
      },
      256 => {
          execute_CMPHI_P_P_ZZ__(256, d, esize, g, m, n, op, is_unsigned)
      },
      512 => {
          execute_CMPHI_P_P_ZZ__(512, d, esize, g, m, n, op, is_unsigned)
      },
      1024 => {
          execute_CMPHI_P_P_ZZ__(1024, d, esize, g, m, n, op, is_unsigned)
      },
      2048 => {
          execute_CMPHI_P_P_ZZ__(2048, d, esize, g, m, n, op, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1289) = {
    SEE = 1289;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_CMPHI_P_P_ZZ__(size, Zm, Pg, Zn, ne, Pd)
}

val execute_DECP_R_P_R__ : forall 'VL 'dn 'esize 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m)) -> unit

function execute_DECP_R_P_R__ (VL, dn, esize, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits(64) = X_read(dn, 64);
    let operand2 : bits('PL) = P_read(m, PL);
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    X_set(dn, 64) = operand1 - count
}

val decode_DECP_R_P_R__ : (bits(2), bits(1), bits(4), bits(5)) -> unit

function decode_DECP_R_P_R__ (size, D, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    match VL {
      128 => {
          execute_DECP_R_P_R__(128, dn, esize, m)
      },
      256 => {
          execute_DECP_R_P_R__(256, dn, esize, m)
      },
      512 => {
          execute_DECP_R_P_R__(512, dn, esize, m)
      },
      1024 => {
          execute_DECP_R_P_R__(1024, dn, esize, m)
      },
      2048 => {
          execute_DECP_R_P_R__(2048, dn, esize, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1290) = {
    SEE = 1290;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_DECP_R_P_R__(size, D, Pm, Rdn)
}

val execute_INCP_R_P_R__ : forall 'VL 'dn 'esize 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m)) -> unit

function execute_INCP_R_P_R__ (VL, dn, esize, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits(64) = X_read(dn, 64);
    let operand2 : bits('PL) = P_read(m, PL);
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    X_set(dn, 64) = operand1 + count
}

val decode_INCP_R_P_R__ : (bits(2), bits(1), bits(4), bits(5)) -> unit

function decode_INCP_R_P_R__ (size, D, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    match VL {
      128 => {
          execute_INCP_R_P_R__(128, dn, esize, m)
      },
      256 => {
          execute_INCP_R_P_R__(256, dn, esize, m)
      },
      512 => {
          execute_INCP_R_P_R__(512, dn, esize, m)
      },
      1024 => {
          execute_INCP_R_P_R__(1024, dn, esize, m)
      },
      2048 => {
          execute_INCP_R_P_R__(2048, dn, esize, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1291) = {
    SEE = 1291;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_INCP_R_P_R__(size, D, Pm, Rdn)
}

val execute_UQINCP_R_P_R_UW : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 32 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCP_R_P_R_UW (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element + count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCP_R_P_R_UW : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_UQINCP_R_P_R_UW (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = true;
    let 'ssize = 32;
    match VL {
      128 => {
          execute_UQINCP_R_P_R_UW(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_UQINCP_R_P_R_UW(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_UQINCP_R_P_R_UW(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_UQINCP_R_P_R_UW(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_UQINCP_R_P_R_UW(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1292) = {
    SEE = 1292;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCP_R_P_R_UW(size, D, U, sf, Pm, Rdn)
}

val execute_SQINCP_R_P_R_SX : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 32 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCP_R_P_R_SX (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element + count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCP_R_P_R_SX : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQINCP_R_P_R_SX (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = false;
    let 'ssize = 32;
    match VL {
      128 => {
          execute_SQINCP_R_P_R_SX(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_SQINCP_R_P_R_SX(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_SQINCP_R_P_R_SX(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_SQINCP_R_P_R_SX(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_SQINCP_R_P_R_SX(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1293) = {
    SEE = 1293;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCP_R_P_R_SX(size, D, U, sf, Pm, Rdn)
}

val execute_UQINCP_R_P_R_X : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 64 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCP_R_P_R_X (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element + count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCP_R_P_R_X : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_UQINCP_R_P_R_X (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = true;
    let 'ssize = 64;
    match VL {
      128 => {
          execute_UQINCP_R_P_R_X(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_UQINCP_R_P_R_X(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_UQINCP_R_P_R_X(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_UQINCP_R_P_R_X(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_UQINCP_R_P_R_X(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1294) = {
    SEE = 1294;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCP_R_P_R_X(size, D, U, sf, Pm, Rdn)
}

val execute_SQINCP_R_P_R_X : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 64 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCP_R_P_R_X (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element + count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCP_R_P_R_X : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQINCP_R_P_R_X (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = false;
    let 'ssize = 64;
    match VL {
      128 => {
          execute_SQINCP_R_P_R_X(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_SQINCP_R_P_R_X(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_SQINCP_R_P_R_X(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_SQINCP_R_P_R_X(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_SQINCP_R_P_R_X(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1295) = {
    SEE = 1295;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCP_R_P_R_X(size, D, U, sf, Pm, Rdn)
}

val execute_UQDECP_R_P_R_UW : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 32 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECP_R_P_R_UW (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element - count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECP_R_P_R_UW : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_UQDECP_R_P_R_UW (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = true;
    let 'ssize = 32;
    match VL {
      128 => {
          execute_UQDECP_R_P_R_UW(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_UQDECP_R_P_R_UW(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_UQDECP_R_P_R_UW(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_UQDECP_R_P_R_UW(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_UQDECP_R_P_R_UW(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1296) = {
    SEE = 1296;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECP_R_P_R_UW(size, D, U, sf, Pm, Rdn)
}

val execute_SQDECP_R_P_R_SX : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 32 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECP_R_P_R_SX (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element - count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECP_R_P_R_SX : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQDECP_R_P_R_SX (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = false;
    let 'ssize = 32;
    match VL {
      128 => {
          execute_SQDECP_R_P_R_SX(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_SQDECP_R_P_R_SX(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_SQDECP_R_P_R_SX(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_SQDECP_R_P_R_SX(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_SQDECP_R_P_R_SX(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1297) = {
    SEE = 1297;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECP_R_P_R_SX(size, D, U, sf, Pm, Rdn)
}

val execute_UQDECP_R_P_R_X : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 64 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECP_R_P_R_X (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element - count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECP_R_P_R_X : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_UQDECP_R_P_R_X (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = true;
    let 'ssize = 64;
    match VL {
      128 => {
          execute_UQDECP_R_P_R_X(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_UQDECP_R_P_R_X(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_UQDECP_R_P_R_X(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_UQDECP_R_P_R_X(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_UQDECP_R_P_R_X(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1298) = {
    SEE = 1298;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECP_R_P_R_X(size, D, U, sf, Pm, Rdn)
}

val execute_SQDECP_R_P_R_X : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm 'ssize,
  ('ssize == 64 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECP_R_P_R_X (VL, dn, esize, m, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('ssize) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    let 'element = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) = SatQ(element - count, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECP_R_P_R_X : (bits(2), bits(1), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQDECP_R_P_R_X (size, D, U, sf, Pm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Rdn);
    let is_unsigned : bool = false;
    let 'ssize = 64;
    match VL {
      128 => {
          execute_SQDECP_R_P_R_X(128, dn, esize, m, ssize, is_unsigned)
      },
      256 => {
          execute_SQDECP_R_P_R_X(256, dn, esize, m, ssize, is_unsigned)
      },
      512 => {
          execute_SQDECP_R_P_R_X(512, dn, esize, m, ssize, is_unsigned)
      },
      1024 => {
          execute_SQDECP_R_P_R_X(1024, dn, esize, m, ssize, is_unsigned)
      },
      2048 => {
          execute_SQDECP_R_P_R_X(2048, dn, esize, m, ssize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1299) = {
    SEE = 1299;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let sf = Slice(__opcode, 10, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECP_R_P_R_X(size, D, U, sf, Pm, Rdn)
}

val execute_DECP_Z_P_Z__ : forall 'VL 'dn 'esize 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m)) -> unit

function execute_DECP_Z_P_Z__ (VL, dn, esize, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('VL) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) - count)
    };
    Z_set(dn, VL) = result
}

val decode_DECP_Z_P_Z__ : (bits(2), bits(1), bits(4), bits(5)) -> unit

function decode_DECP_Z_P_Z__ (size, D, Pm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_DECP_Z_P_Z__(128, dn, esize, m)
      },
      256 => {
          execute_DECP_Z_P_Z__(256, dn, esize, m)
      },
      512 => {
          execute_DECP_Z_P_Z__(512, dn, esize, m)
      },
      1024 => {
          execute_DECP_Z_P_Z__(1024, dn, esize, m)
      },
      2048 => {
          execute_DECP_Z_P_Z__(2048, dn, esize, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1300) = {
    SEE = 1300;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Zdn = Slice(__opcode, 0, 5);
    decode_DECP_Z_P_Z__(size, D, Pm, Zdn)
}

val execute_INCP_Z_P_Z__ : forall 'VL 'dn 'esize 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m)) -> unit

function execute_INCP_Z_P_Z__ (VL, dn, esize, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('VL) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) + count)
    };
    Z_set(dn, VL) = result
}

val decode_INCP_Z_P_Z__ : (bits(2), bits(1), bits(4), bits(5)) -> unit

function decode_INCP_Z_P_Z__ (size, D, Pm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_INCP_Z_P_Z__(128, dn, esize, m)
      },
      256 => {
          execute_INCP_Z_P_Z__(256, dn, esize, m)
      },
      512 => {
          execute_INCP_Z_P_Z__(512, dn, esize, m)
      },
      1024 => {
          execute_INCP_Z_P_Z__(1024, dn, esize, m)
      },
      2048 => {
          execute_INCP_Z_P_Z__(2048, dn, esize, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1301) = {
    SEE = 1301;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Zdn = Slice(__opcode, 0, 5);
    decode_INCP_Z_P_Z__(size, D, Pm, Zdn)
}

val execute_UQINCP_Z_P_Z__ : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), bool('is_unsigned)) -> unit

function execute_UQINCP_Z_P_Z__ (VL, dn, esize, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('VL) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element + count, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQINCP_Z_P_Z__ : (bits(2), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_UQINCP_Z_P_Z__ (size, D, U, Pm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQINCP_Z_P_Z__(128, dn, esize, m, is_unsigned)
      },
      256 => {
          execute_UQINCP_Z_P_Z__(256, dn, esize, m, is_unsigned)
      },
      512 => {
          execute_UQINCP_Z_P_Z__(512, dn, esize, m, is_unsigned)
      },
      1024 => {
          execute_UQINCP_Z_P_Z__(1024, dn, esize, m, is_unsigned)
      },
      2048 => {
          execute_UQINCP_Z_P_Z__(2048, dn, esize, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1302) = {
    SEE = 1302;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQINCP_Z_P_Z__(size, D, U, Pm, Zdn)
}

val execute_SQINCP_Z_P_Z__ : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), bool('is_unsigned)) -> unit

function execute_SQINCP_Z_P_Z__ (VL, dn, esize, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('VL) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element + count, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQINCP_Z_P_Z__ : (bits(2), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQINCP_Z_P_Z__ (size, D, U, Pm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQINCP_Z_P_Z__(128, dn, esize, m, is_unsigned)
      },
      256 => {
          execute_SQINCP_Z_P_Z__(256, dn, esize, m, is_unsigned)
      },
      512 => {
          execute_SQINCP_Z_P_Z__(512, dn, esize, m, is_unsigned)
      },
      1024 => {
          execute_SQINCP_Z_P_Z__(1024, dn, esize, m, is_unsigned)
      },
      2048 => {
          execute_SQINCP_Z_P_Z__(2048, dn, esize, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1303) = {
    SEE = 1303;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQINCP_Z_P_Z__(size, D, U, Pm, Zdn)
}

val execute_UQDECP_Z_P_Z__ : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), bool('is_unsigned)) -> unit

function execute_UQDECP_Z_P_Z__ (VL, dn, esize, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('VL) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element - count, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQDECP_Z_P_Z__ : (bits(2), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_UQDECP_Z_P_Z__ (size, D, U, Pm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQDECP_Z_P_Z__(128, dn, esize, m, is_unsigned)
      },
      256 => {
          execute_UQDECP_Z_P_Z__(256, dn, esize, m, is_unsigned)
      },
      512 => {
          execute_UQDECP_Z_P_Z__(512, dn, esize, m, is_unsigned)
      },
      1024 => {
          execute_UQDECP_Z_P_Z__(1024, dn, esize, m, is_unsigned)
      },
      2048 => {
          execute_UQDECP_Z_P_Z__(2048, dn, esize, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1304) = {
    SEE = 1304;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQDECP_Z_P_Z__(size, D, U, Pm, Zdn)
}

val execute_SQDECP_Z_P_Z__ : forall 'VL 'dn 'esize ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), bool('is_unsigned)) -> unit

function execute_SQDECP_Z_P_Z__ (VL, dn, esize, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('VL) = undefined;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(operand2, e, esize) then {
            count = count + 1
        };
        ()
    };
    let 'count = count;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element - count, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQDECP_Z_P_Z__ : (bits(2), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQDECP_Z_P_Z__ (size, D, U, Pm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Pm);
    let 'dn = UInt(Zdn);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQDECP_Z_P_Z__(128, dn, esize, m, is_unsigned)
      },
      256 => {
          execute_SQDECP_Z_P_Z__(256, dn, esize, m, is_unsigned)
      },
      512 => {
          execute_SQDECP_Z_P_Z__(512, dn, esize, m, is_unsigned)
      },
      1024 => {
          execute_SQDECP_Z_P_Z__(1024, dn, esize, m, is_unsigned)
      },
      2048 => {
          execute_SQDECP_Z_P_Z__(2048, dn, esize, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1305) = {
    SEE = 1305;
    let size = Slice(__opcode, 22, 2);
    let D = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQDECP_Z_P_Z__(size, D, U, Pm, Zdn)
}

val execute_DECB_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_DECB_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 - count * imm
}

val decode_DECB_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_DECB_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_DECB_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_DECB_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_DECB_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_DECB_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_DECB_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1306) = {
    SEE = 1306;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_DECB_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_DECH_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_DECH_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 - count * imm
}

val decode_DECH_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_DECH_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_DECH_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_DECH_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_DECH_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_DECH_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_DECH_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1307) = {
    SEE = 1307;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_DECH_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_DECW_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_DECW_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 - count * imm
}

val decode_DECW_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_DECW_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_DECW_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_DECW_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_DECW_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_DECW_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_DECW_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1308) = {
    SEE = 1308;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_DECW_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_DECD_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_DECD_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 - count * imm
}

val decode_DECD_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_DECD_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_DECD_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_DECD_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_DECD_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_DECD_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_DECD_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1309) = {
    SEE = 1309;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_DECD_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_INCB_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_INCB_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 + count * imm
}

val decode_INCB_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_INCB_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_INCB_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_INCB_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_INCB_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_INCB_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_INCB_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1310) = {
    SEE = 1310;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_INCB_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_INCH_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_INCH_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 + count * imm
}

val decode_INCH_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_INCH_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_INCH_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_INCH_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_INCH_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_INCH_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_INCH_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1311) = {
    SEE = 1311;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_INCH_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_INCW_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_INCW_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 + count * imm
}

val decode_INCW_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_INCW_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_INCW_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_INCW_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_INCW_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_INCW_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_INCW_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1312) = {
    SEE = 1312;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_INCW_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_INCD_R_RS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_INCD_R_RS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let 'VL = VL;
    let operand1 : bits(64) = X_read(dn, 64);
    X_set(dn, 64) = operand1 + count * imm
}

val decode_INCD_R_RS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_INCD_R_RS__ (size, imm4, D, pattern, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_INCD_R_RS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_INCD_R_RS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_INCD_R_RS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_INCD_R_RS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_INCD_R_RS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1313) = {
    SEE = 1313;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_INCD_R_RS__(size, imm4, D, pattern, Rdn)
}

val execute_UQINCB_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCB_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCB_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCB_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQINCB_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1314) = {
    SEE = 1314;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCB_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQINCH_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCH_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCH_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCH_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQINCH_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1315) = {
    SEE = 1315;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCH_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQINCW_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCW_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCW_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCW_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQINCW_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1316) = {
    SEE = 1316;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCW_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQINCD_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCD_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCD_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCD_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQINCD_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1317) = {
    SEE = 1317;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCD_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCB_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCB_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCB_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCB_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQINCB_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1318) = {
    SEE = 1318;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCB_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCH_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCH_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCH_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCH_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQINCH_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1319) = {
    SEE = 1319;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCH_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCW_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCW_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCW_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCW_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQINCW_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1320) = {
    SEE = 1320;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCW_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCD_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCD_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCD_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCD_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQINCD_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1321) = {
    SEE = 1321;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCD_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQINCB_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCB_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCB_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCB_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQINCB_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1322) = {
    SEE = 1322;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCB_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQINCH_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCH_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCH_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCH_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQINCH_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1323) = {
    SEE = 1323;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCH_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQINCW_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCW_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCW_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCW_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQINCW_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1324) = {
    SEE = 1324;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCW_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQINCD_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQINCD_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQINCD_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCD_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQINCD_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1325) = {
    SEE = 1325;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQINCD_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCB_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCB_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCB_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCB_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQINCB_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1326) = {
    SEE = 1326;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCB_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCH_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCH_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCH_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCH_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQINCH_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1327) = {
    SEE = 1327;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCH_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCW_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCW_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCW_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCW_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQINCW_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1328) = {
    SEE = 1328;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCW_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQINCD_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQINCD_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 + count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQINCD_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCD_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQINCD_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1329) = {
    SEE = 1329;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQINCD_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECB_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECB_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECB_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECB_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQDECB_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1330) = {
    SEE = 1330;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECB_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECH_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECH_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECH_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECH_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQDECH_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1331) = {
    SEE = 1331;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECH_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECW_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECW_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECW_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECW_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQDECW_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1332) = {
    SEE = 1332;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECW_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECD_R_RS_UW : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECD_R_RS_UW (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECD_R_RS_UW : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECD_R_RS_UW (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 32;
    execute_UQDECD_R_RS_UW(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1333) = {
    SEE = 1333;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECD_R_RS_UW(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECB_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECB_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECB_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECB_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQDECB_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1334) = {
    SEE = 1334;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECB_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECH_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECH_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECH_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECH_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQDECH_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1335) = {
    SEE = 1335;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECH_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECW_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECW_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECW_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECW_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQDECW_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1336) = {
    SEE = 1336;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECW_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECD_R_RS_SX : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 32 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECD_R_RS_SX (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECD_R_RS_SX : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECD_R_RS_SX (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 32;
    execute_SQDECD_R_RS_SX(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1337) = {
    SEE = 1337;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECD_R_RS_SX(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECB_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECB_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECB_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECB_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQDECB_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1338) = {
    SEE = 1338;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECB_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECH_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECH_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECH_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECH_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQDECH_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1339) = {
    SEE = 1339;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECH_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECW_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECW_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECW_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECW_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQDECW_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1340) = {
    SEE = 1340;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECW_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_UQDECD_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_UQDECD_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_UQDECD_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECD_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    let 'ssize = 64;
    execute_UQDECD_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1341) = {
    SEE = 1341;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_UQDECD_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECB_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECB_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECB_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECB_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQDECB_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1342) = {
    SEE = 1342;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECB_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECH_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECH_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECH_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECH_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQDECH_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1343) = {
    SEE = 1343;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECH_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECW_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECW_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECW_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECW_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQDECW_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1344) = {
    SEE = 1344;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECW_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_SQDECD_R_RS_X : forall 'dn 'esize 'imm ('is_unsigned : Bool) 'ssize,
  ('ssize == 64 & 1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31).
  (int('dn), int('esize), int('imm), bits(5), int('ssize), bool('is_unsigned)) -> unit

function execute_SQDECD_R_RS_X (dn, esize, imm, pat, ssize, is_unsigned) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('ssize) = X_read(dn, ssize);
    result : bits('ssize) = undefined;
    let 'element1 = asl_Int(operand1, is_unsigned);
    let (__tup_0 : bits('ssize), _) =
      SatQ(element1 - count * imm, ssize, is_unsigned)
    in
      {
          result = __tup_0
      };
    X_set(dn, 64) = Extend(result, 64, is_unsigned)
}

val decode_SQDECD_R_RS_X : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECD_R_RS_X (size, sf, imm4, D, U, pattern, Rdn) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Rdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    let 'ssize = 64;
    execute_SQDECD_R_RS_X(dn, esize, imm, pat, ssize, is_unsigned)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1345) = {
    SEE = 1345;
    let size = Slice(__opcode, 22, 2);
    let sf = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_SQDECD_R_RS_X(size, sf, imm4, D, U, pattern, Rdn)
}

val execute_CNTB_R_S__ : forall 'd 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 8 & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('imm), bits(5)) -> unit

function execute_CNTB_R_S__ (d, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    X_set(d, 64) = (count * imm)[63 .. 0]
}

val decode_CNTB_R_S__ : (bits(2), bits(4), bits(5), bits(5)) -> unit

function decode_CNTB_R_S__ (size, imm4, pattern, Rd) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'd = UInt(Rd);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    execute_CNTB_R_S__(d, esize, imm, pat)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1346) = {
    SEE = 1346;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let pattern = Slice(__opcode, 5, 5);
    let Rd = Slice(__opcode, 0, 5);
    decode_CNTB_R_S__(size, imm4, pattern, Rd)
}

val execute_CNTH_R_S__ : forall 'd 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('imm), bits(5)) -> unit

function execute_CNTH_R_S__ (d, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    X_set(d, 64) = (count * imm)[63 .. 0]
}

val decode_CNTH_R_S__ : (bits(2), bits(4), bits(5), bits(5)) -> unit

function decode_CNTH_R_S__ (size, imm4, pattern, Rd) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'd = UInt(Rd);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    execute_CNTH_R_S__(d, esize, imm, pat)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1347) = {
    SEE = 1347;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let pattern = Slice(__opcode, 5, 5);
    let Rd = Slice(__opcode, 0, 5);
    decode_CNTH_R_S__(size, imm4, pattern, Rd)
}

val execute_CNTW_R_S__ : forall 'd 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('imm), bits(5)) -> unit

function execute_CNTW_R_S__ (d, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    X_set(d, 64) = (count * imm)[63 .. 0]
}

val decode_CNTW_R_S__ : (bits(2), bits(4), bits(5), bits(5)) -> unit

function decode_CNTW_R_S__ (size, imm4, pattern, Rd) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'd = UInt(Rd);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    execute_CNTW_R_S__(d, esize, imm, pat)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1348) = {
    SEE = 1348;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let pattern = Slice(__opcode, 5, 5);
    let Rd = Slice(__opcode, 0, 5);
    decode_CNTW_R_S__(size, imm4, pattern, Rd)
}

val execute_CNTD_R_S__ : forall 'd 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'd & 'd <= 31).
  (int('d), int('esize), int('imm), bits(5)) -> unit

function execute_CNTD_R_S__ (d, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'count = DecodePredCount(pat, esize);
    X_set(d, 64) = (count * imm)[63 .. 0]
}

val decode_CNTD_R_S__ : (bits(2), bits(4), bits(5), bits(5)) -> unit

function decode_CNTD_R_S__ (size, imm4, pattern, Rd) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'd = UInt(Rd);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    execute_CNTD_R_S__(d, esize, imm, pat)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1349) = {
    SEE = 1349;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let pattern = Slice(__opcode, 5, 5);
    let Rd = Slice(__opcode, 0, 5);
    decode_CNTD_R_S__(size, imm4, pattern, Rd)
}

val execute_DECH_Z_ZS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_DECH_Z_ZS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) - count * imm)
    };
    Z_set(dn, VL) = result
}

val decode_DECH_Z_ZS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_DECH_Z_ZS__ (size, imm4, D, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_DECH_Z_ZS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_DECH_Z_ZS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_DECH_Z_ZS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_DECH_Z_ZS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_DECH_Z_ZS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1350) = {
    SEE = 1350;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_DECH_Z_ZS__(size, imm4, D, pattern, Zdn)
}

val execute_DECW_Z_ZS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_DECW_Z_ZS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) - count * imm)
    };
    Z_set(dn, VL) = result
}

val decode_DECW_Z_ZS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_DECW_Z_ZS__ (size, imm4, D, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_DECW_Z_ZS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_DECW_Z_ZS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_DECW_Z_ZS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_DECW_Z_ZS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_DECW_Z_ZS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1351) = {
    SEE = 1351;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_DECW_Z_ZS__(size, imm4, D, pattern, Zdn)
}

val execute_DECD_Z_ZS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_DECD_Z_ZS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) - count * imm)
    };
    Z_set(dn, VL) = result
}

val decode_DECD_Z_ZS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_DECD_Z_ZS__ (size, imm4, D, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_DECD_Z_ZS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_DECD_Z_ZS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_DECD_Z_ZS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_DECD_Z_ZS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_DECD_Z_ZS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1352) = {
    SEE = 1352;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_DECD_Z_ZS__(size, imm4, D, pattern, Zdn)
}

val execute_INCH_Z_ZS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_INCH_Z_ZS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) + count * imm)
    };
    Z_set(dn, VL) = result
}

val decode_INCH_Z_ZS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_INCH_Z_ZS__ (size, imm4, D, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_INCH_Z_ZS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_INCH_Z_ZS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_INCH_Z_ZS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_INCH_Z_ZS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_INCH_Z_ZS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1353) = {
    SEE = 1353;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_INCH_Z_ZS__(size, imm4, D, pattern, Zdn)
}

val execute_INCW_Z_ZS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_INCW_Z_ZS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) + count * imm)
    };
    Z_set(dn, VL) = result
}

val decode_INCW_Z_ZS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_INCW_Z_ZS__ (size, imm4, D, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_INCW_Z_ZS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_INCW_Z_ZS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_INCW_Z_ZS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_INCW_Z_ZS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_INCW_Z_ZS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1354) = {
    SEE = 1354;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_INCW_Z_ZS__(size, imm4, D, pattern, Zdn)
}

val execute_INCD_Z_ZS__ : forall 'VL 'dn 'esize 'imm,
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5)) -> unit

function execute_INCD_Z_ZS__ (VL, dn, esize, imm, pat) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, Elem_read(operand1, e, esize) + count * imm)
    };
    Z_set(dn, VL) = result
}

val decode_INCD_Z_ZS__ : (bits(2), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_INCD_Z_ZS__ (size, imm4, D, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    match VL {
      128 => {
          execute_INCD_Z_ZS__(128, dn, esize, imm, pat)
      },
      256 => {
          execute_INCD_Z_ZS__(256, dn, esize, imm, pat)
      },
      512 => {
          execute_INCD_Z_ZS__(512, dn, esize, imm, pat)
      },
      1024 => {
          execute_INCD_Z_ZS__(1024, dn, esize, imm, pat)
      },
      2048 => {
          execute_INCD_Z_ZS__(2048, dn, esize, imm, pat)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1355) = {
    SEE = 1355;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_INCD_Z_ZS__(size, imm4, D, pattern, Zdn)
}

val execute_UQINCH_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_UQINCH_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQINCH_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCH_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQINCH_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_UQINCH_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_UQINCH_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_UQINCH_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_UQINCH_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1356) = {
    SEE = 1356;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQINCH_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_UQINCW_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_UQINCW_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQINCW_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCW_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQINCW_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_UQINCW_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_UQINCW_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_UQINCW_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_UQINCW_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1357) = {
    SEE = 1357;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQINCW_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_UQINCD_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_UQINCD_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQINCD_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQINCD_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQINCD_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_UQINCD_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_UQINCD_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_UQINCD_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_UQINCD_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1358) = {
    SEE = 1358;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQINCD_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_SQINCH_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_SQINCH_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQINCH_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCH_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQINCH_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_SQINCH_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_SQINCH_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_SQINCH_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_SQINCH_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1359) = {
    SEE = 1359;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQINCH_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_SQINCW_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_SQINCW_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQINCW_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCW_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQINCW_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_SQINCW_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_SQINCW_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_SQINCW_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_SQINCW_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1360) = {
    SEE = 1360;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQINCW_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_SQINCD_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_SQINCD_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQINCD_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQINCD_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQINCD_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_SQINCD_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_SQINCD_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_SQINCD_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_SQINCD_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1361) = {
    SEE = 1361;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQINCD_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_UQDECH_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_UQDECH_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQDECH_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECH_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQDECH_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_UQDECH_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_UQDECH_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_UQDECH_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_UQDECH_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1362) = {
    SEE = 1362;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQDECH_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_UQDECW_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_UQDECW_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQDECW_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECW_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQDECW_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_UQDECW_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_UQDECW_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_UQDECW_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_UQDECW_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1363) = {
    SEE = 1363;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQDECW_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_UQDECD_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_UQDECD_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQDECD_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQDECD_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQDECD_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_UQDECD_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_UQDECD_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_UQDECD_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_UQDECD_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1364) = {
    SEE = 1364;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQDECD_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_SQDECH_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 16 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_SQDECH_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQDECH_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECH_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQDECH_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_SQDECH_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_SQDECH_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_SQDECH_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_SQDECH_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1365) = {
    SEE = 1365;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQDECH_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_SQDECW_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 32 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_SQDECW_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQDECW_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECW_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQDECW_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_SQDECW_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_SQDECW_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_SQDECW_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_SQDECW_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1366) = {
    SEE = 1366;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQDECW_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_SQDECD_Z_ZS__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  (1 <= 'imm & 'imm <= 16 & 'esize == 64 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bits(5), bool('is_unsigned)) -> unit

function execute_SQDECD_Z_ZS__ (VL, dn, esize, imm, pat, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - count * imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQDECD_Z_ZS__ : (bits(2), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDECD_Z_ZS__ (size, imm4, D, U, pattern, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'dn = UInt(Zdn);
    let pat : bits(5) = pattern;
    let 'imm = UInt(imm4) + 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQDECD_Z_ZS__(128, dn, esize, imm, pat, is_unsigned)
      },
      256 => {
          execute_SQDECD_Z_ZS__(256, dn, esize, imm, pat, is_unsigned)
      },
      512 => {
          execute_SQDECD_Z_ZS__(512, dn, esize, imm, pat, is_unsigned)
      },
      1024 => {
          execute_SQDECD_Z_ZS__(1024, dn, esize, imm, pat, is_unsigned)
      },
      2048 => {
          execute_SQDECD_Z_ZS__(2048, dn, esize, imm, pat, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1367) = {
    SEE = 1367;
    let size = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let D = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQDECD_Z_ZS__(size, imm4, D, U, pattern, Zdn)
}

val execute_CTERMEQ_RR__ : forall 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64}).
  (int('esize), int('m), int('n), SVECmp) -> unit

function execute_CTERMEQ_RR__ (esize, m, n, op) = {
    CheckSVEEnabled();
    let operand1 : bits('esize) = X_read(n, esize);
    let operand2 : bits('esize) = X_read(m, esize);
    let 'element1 = UInt(operand1);
    let 'element2 = UInt(operand2);
    term : bool = undefined;
    match op {
      Cmp_EQ => {
          term = element1 == element2
      },
      Cmp_NE => {
          term = element1 != element2
      },
      _ => PatternMatchFailure("execute_CTERMEQ_RR__")
    };
    if term then {
        PSTATE.N = 0b1;
        PSTATE.V = 0b0
    } else {
        PSTATE.N = 0b0;
        PSTATE.V = not_vec(PSTATE.C)
    }
}

val decode_CTERMEQ_RR__ : (bits(1), bits(5), bits(5), bits(1)) -> unit

function decode_CTERMEQ_RR__ (sz, Rm, Rn, ne) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let op : SVECmp = Cmp_EQ;
    execute_CTERMEQ_RR__(esize, m, n, op)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 1368) = {
    SEE = 1368;
    let sz = Slice(__opcode, 22, 1);
    let Rm = Slice(__opcode, 16, 5);
    let Rn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    decode_CTERMEQ_RR__(sz, Rm, Rn, ne)
}

val execute_CTERMNE_RR__ : forall 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64}).
  (int('esize), int('m), int('n), SVECmp) -> unit

function execute_CTERMNE_RR__ (esize, m, n, op) = {
    CheckSVEEnabled();
    let operand1 : bits('esize) = X_read(n, esize);
    let operand2 : bits('esize) = X_read(m, esize);
    let 'element1 = UInt(operand1);
    let 'element2 = UInt(operand2);
    term : bool = undefined;
    match op {
      Cmp_EQ => {
          term = element1 == element2
      },
      Cmp_NE => {
          term = element1 != element2
      },
      _ => PatternMatchFailure("execute_CTERMNE_RR__")
    };
    if term then {
        PSTATE.N = 0b1;
        PSTATE.V = 0b0
    } else {
        PSTATE.N = 0b0;
        PSTATE.V = not_vec(PSTATE.C)
    }
}

val decode_CTERMNE_RR__ : (bits(1), bits(5), bits(5), bits(1)) -> unit

function decode_CTERMNE_RR__ (sz, Rm, Rn, ne) = {
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let op : SVECmp = Cmp_NE;
    execute_CTERMNE_RR__(esize, m, n, op)
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 1369) = {
    SEE = 1369;
    let sz = Slice(__opcode, 22, 1);
    let Rm = Slice(__opcode, 16, 5);
    let Rn = Slice(__opcode, 5, 5);
    let ne = Slice(__opcode, 4, 1);
    decode_CTERMNE_RR__(sz, Rm, Rn, ne)
}

val execute_FDUP_Z_I__ : forall 'VL 'd 'esize,
  ('esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bits('esize)) -> unit

function execute_FDUP_Z_I__ (VL, d, esize, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, imm)
    };
    Z_set(d, VL) = result
}

val decode_FDUP_Z_I__ : (bits(2), bits(8), bits(5)) -> unit

function decode_FDUP_Z_I__ (size, imm8, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'd = UInt(Zd);
    assert(constraint('esize in {16, 32, 64}));
    let imm : bits('esize) = VFPExpandImm(imm8, esize);
    match VL {
      128 => {
          execute_FDUP_Z_I__(128, d, esize, imm)
      },
      256 => {
          execute_FDUP_Z_I__(256, d, esize, imm)
      },
      512 => {
          execute_FDUP_Z_I__(512, d, esize, imm)
      },
      1024 => {
          execute_FDUP_Z_I__(1024, d, esize, imm)
      },
      2048 => {
          execute_FDUP_Z_I__(2048, d, esize, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1370) = {
    SEE = 1370;
    let size = Slice(__opcode, 22, 2);
    let imm8 = Slice(__opcode, 5, 8);
    let Zd = Slice(__opcode, 0, 5);
    decode_FDUP_Z_I__(size, imm8, Zd)
}

val execute_FCPY_Z_P_I__ : forall 'VL 'd 'esize 'g,
  (0 <= 'g & 'g <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bits('esize)) -> unit

function execute_FCPY_Z_P_I__ (VL, d, esize, g, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, imm)
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FCPY_Z_P_I__ : (bits(2), bits(4), bits(8), bits(5)) -> unit

function decode_FCPY_Z_P_I__ (size, Pg, imm8, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'd = UInt(Zd);
    assert(constraint('esize in {16, 32, 64}));
    let imm : bits('esize) = VFPExpandImm(imm8, esize);
    match VL {
      128 => {
          execute_FCPY_Z_P_I__(128, d, esize, g, imm)
      },
      256 => {
          execute_FCPY_Z_P_I__(256, d, esize, g, imm)
      },
      512 => {
          execute_FCPY_Z_P_I__(512, d, esize, g, imm)
      },
      1024 => {
          execute_FCPY_Z_P_I__(1024, d, esize, g, imm)
      },
      2048 => {
          execute_FCPY_Z_P_I__(2048, d, esize, g, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1371) = {
    SEE = 1371;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 16, 4);
    let imm8 = Slice(__opcode, 5, 8);
    let Zd = Slice(__opcode, 0, 5);
    decode_FCPY_Z_P_I__(size, Pg, imm8, Zd)
}

val execute_DUP_Z_I__ : forall 'VL 'd 'esize 'imm,
  ('esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm)) -> unit

function execute_DUP_Z_I__ (VL, d, esize, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let result : bits('VL) = Replicate(imm[esize - 1 .. 0]);
    Z_set(d, VL) = result
}

val decode_DUP_Z_I__ : (bits(2), bits(1), bits(8), bits(5)) -> unit

function decode_DUP_Z_I__ (size, sh, imm8, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'd = UInt(Zd);
    imm : int = SInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    match VL {
      128 => {
          execute_DUP_Z_I__(128, d, esize, imm)
      },
      256 => {
          execute_DUP_Z_I__(256, d, esize, imm)
      },
      512 => {
          execute_DUP_Z_I__(512, d, esize, imm)
      },
      1024 => {
          execute_DUP_Z_I__(1024, d, esize, imm)
      },
      2048 => {
          execute_DUP_Z_I__(2048, d, esize, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1372) = {
    SEE = 1372;
    let size = Slice(__opcode, 22, 2);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zd = Slice(__opcode, 0, 5);
    decode_DUP_Z_I__(size, sh, imm8, Zd)
}

val execute_CPY_Z_P_I__ : forall 'VL 'd 'esize 'g 'imm ('merging : Bool),
  (0 <= 'g & 'g <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), bool('merging)) -> unit

function execute_CPY_Z_P_I__ (VL, d, esize, g, imm, merging) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let dest : bits('VL) = Z_read(d, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, imm[esize - 1 .. 0])
        } else if merging then {
            result = Elem_set(result, e, esize, Elem_read(dest, e, esize))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_CPY_Z_P_I__ : (bits(2), bits(4), bits(1), bits(1), bits(8), bits(5)) -> unit

function decode_CPY_Z_P_I__ (size, Pg, M, sh, imm8, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'd = UInt(Zd);
    let merging : bool = true;
    imm : int = SInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    match VL {
      128 => {
          execute_CPY_Z_P_I__(128, d, esize, g, imm, merging)
      },
      256 => {
          execute_CPY_Z_P_I__(256, d, esize, g, imm, merging)
      },
      512 => {
          execute_CPY_Z_P_I__(512, d, esize, g, imm, merging)
      },
      1024 => {
          execute_CPY_Z_P_I__(1024, d, esize, g, imm, merging)
      },
      2048 => {
          execute_CPY_Z_P_I__(2048, d, esize, g, imm, merging)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1373) = {
    SEE = 1373;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 16, 4);
    let M = Slice(__opcode, 14, 1);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zd = Slice(__opcode, 0, 5);
    decode_CPY_Z_P_I__(size, Pg, M, sh, imm8, Zd)
}

val execute_CPY_Z_O_I__ : forall 'VL 'd 'esize 'g 'imm ('merging : Bool),
  (0 <= 'g & 'g <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('imm), bool('merging)) -> unit

function execute_CPY_Z_O_I__ (VL, d, esize, g, imm, merging) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let dest : bits('VL) = Z_read(d, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, imm[esize - 1 .. 0])
        } else if merging then {
            result = Elem_set(result, e, esize, Elem_read(dest, e, esize))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_CPY_Z_O_I__ : (bits(2), bits(4), bits(1), bits(1), bits(8), bits(5)) -> unit

function decode_CPY_Z_O_I__ (size, Pg, M, sh, imm8, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'd = UInt(Zd);
    let merging : bool = false;
    imm : int = SInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    match VL {
      128 => {
          execute_CPY_Z_O_I__(128, d, esize, g, imm, merging)
      },
      256 => {
          execute_CPY_Z_O_I__(256, d, esize, g, imm, merging)
      },
      512 => {
          execute_CPY_Z_O_I__(512, d, esize, g, imm, merging)
      },
      1024 => {
          execute_CPY_Z_O_I__(1024, d, esize, g, imm, merging)
      },
      2048 => {
          execute_CPY_Z_O_I__(2048, d, esize, g, imm, merging)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, _, _, _, _, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1374) = {
    SEE = 1374;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 16, 4);
    let M = Slice(__opcode, 14, 1);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zd = Slice(__opcode, 0, 5);
    decode_CPY_Z_O_I__(size, Pg, M, sh, imm8, Zd)
}

val execute_DUPM_Z_I__ : forall 'VL 'd 'esize,
  ('esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bits('esize)) -> unit

function execute_DUPM_Z_I__ (VL, d, esize, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let result : bits('VL) = Replicate(imm, DIV(VL, esize));
    Z_set(d, VL) = result
}

val decode_DUPM_Z_I__ : (bits(13), bits(5)) -> unit

function decode_DUPM_Z_I__ (imm13, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'd = UInt(Zd);
    imm : bits('esize) = undefined;
    let (__tup_0 : bits('esize), _) =
      DecodeBitMasks([imm13[12]], imm13[5 .. 0], imm13[11 .. 6], true, esize)
    in
      {
          imm = __tup_0
      };
    match VL {
      128 => {
          execute_DUPM_Z_I__(128, d, esize, imm)
      },
      256 => {
          execute_DUPM_Z_I__(256, d, esize, imm)
      },
      512 => {
          execute_DUPM_Z_I__(512, d, esize, imm)
      },
      1024 => {
          execute_DUPM_Z_I__(1024, d, esize, imm)
      },
      2048 => {
          execute_DUPM_Z_I__(2048, d, esize, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1375) = {
    SEE = 1375;
    let imm13 = Slice(__opcode, 5, 13);
    let Zd = Slice(__opcode, 0, 5);
    decode_DUPM_Z_I__(imm13, Zd)
}

val execute_UXTB_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 8 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('s_esize), bool('is_unsigned)) -> unit

function execute_UXTB_Z_P_Z__ (VL, d, esize, g, n, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, Extend(element[s_esize - 1 .. 0], esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UXTB_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UXTB_Z_P_Z__ (size, U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 's_esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UXTB_Z_P_Z__(128, d, esize, g, n, s_esize, is_unsigned)
      },
      256 => {
          execute_UXTB_Z_P_Z__(256, d, esize, g, n, s_esize, is_unsigned)
      },
      512 => {
          execute_UXTB_Z_P_Z__(512, d, esize, g, n, s_esize, is_unsigned)
      },
      1024 => {
          execute_UXTB_Z_P_Z__(1024, d, esize, g, n, s_esize, is_unsigned)
      },
      2048 => {
          execute_UXTB_Z_P_Z__(2048, d, esize, g, n, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1376) = {
    SEE = 1376;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UXTB_Z_P_Z__(size, U, Pg, Zn, Zd)
}

val execute_UXTH_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('s_esize), bool('is_unsigned)) -> unit

function execute_UXTH_Z_P_Z__ (VL, d, esize, g, n, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint((0 <= 's_esize - 1 & 's_esize - 1 < 'esize)));
            result = Elem_set(result, e, esize, Extend(element[s_esize - 1 .. 0], esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UXTH_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UXTH_Z_P_Z__ (size, U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 's_esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UXTH_Z_P_Z__(128, d, esize, g, n, s_esize, is_unsigned)
      },
      256 => {
          execute_UXTH_Z_P_Z__(256, d, esize, g, n, s_esize, is_unsigned)
      },
      512 => {
          execute_UXTH_Z_P_Z__(512, d, esize, g, n, s_esize, is_unsigned)
      },
      1024 => {
          execute_UXTH_Z_P_Z__(1024, d, esize, g, n, s_esize, is_unsigned)
      },
      2048 => {
          execute_UXTH_Z_P_Z__(2048, d, esize, g, n, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1377) = {
    SEE = 1377;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UXTH_Z_P_Z__(size, U, Pg, Zn, Zd)
}

val execute_UXTW_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('s_esize), bool('is_unsigned)) -> unit

function execute_UXTW_Z_P_Z__ (VL, d, esize, g, n, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint((0 <= 's_esize - 1 & 's_esize - 1 < 'esize)));
            result = Elem_set(result, e, esize, Extend(element[s_esize - 1 .. 0], esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_UXTW_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UXTW_Z_P_Z__ (size, U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size != 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 's_esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UXTW_Z_P_Z__(128, d, esize, g, n, s_esize, is_unsigned)
      },
      256 => {
          execute_UXTW_Z_P_Z__(256, d, esize, g, n, s_esize, is_unsigned)
      },
      512 => {
          execute_UXTW_Z_P_Z__(512, d, esize, g, n, s_esize, is_unsigned)
      },
      1024 => {
          execute_UXTW_Z_P_Z__(1024, d, esize, g, n, s_esize, is_unsigned)
      },
      2048 => {
          execute_UXTW_Z_P_Z__(2048, d, esize, g, n, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1378) = {
    SEE = 1378;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UXTW_Z_P_Z__(size, U, Pg, Zn, Zd)
}

val execute_SXTB_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 8 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('s_esize), bool('is_unsigned)) -> unit

function execute_SXTB_Z_P_Z__ (VL, d, esize, g, n, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, Extend(element[s_esize - 1 .. 0], esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SXTB_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SXTB_Z_P_Z__ (size, U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 's_esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SXTB_Z_P_Z__(128, d, esize, g, n, s_esize, is_unsigned)
      },
      256 => {
          execute_SXTB_Z_P_Z__(256, d, esize, g, n, s_esize, is_unsigned)
      },
      512 => {
          execute_SXTB_Z_P_Z__(512, d, esize, g, n, s_esize, is_unsigned)
      },
      1024 => {
          execute_SXTB_Z_P_Z__(1024, d, esize, g, n, s_esize, is_unsigned)
      },
      2048 => {
          execute_SXTB_Z_P_Z__(2048, d, esize, g, n, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1379) = {
    SEE = 1379;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SXTB_Z_P_Z__(size, U, Pg, Zn, Zd)
}

val execute_SXTH_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('s_esize), bool('is_unsigned)) -> unit

function execute_SXTH_Z_P_Z__ (VL, d, esize, g, n, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint((0 <= 's_esize - 1 & 's_esize - 1 < 'esize)));
            result = Elem_set(result, e, esize, Extend(element[s_esize - 1 .. 0], esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SXTH_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SXTH_Z_P_Z__ (size, U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 's_esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SXTH_Z_P_Z__(128, d, esize, g, n, s_esize, is_unsigned)
      },
      256 => {
          execute_SXTH_Z_P_Z__(256, d, esize, g, n, s_esize, is_unsigned)
      },
      512 => {
          execute_SXTH_Z_P_Z__(512, d, esize, g, n, s_esize, is_unsigned)
      },
      1024 => {
          execute_SXTH_Z_P_Z__(1024, d, esize, g, n, s_esize, is_unsigned)
      },
      2048 => {
          execute_SXTH_Z_P_Z__(2048, d, esize, g, n, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1380) = {
    SEE = 1380;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SXTH_Z_P_Z__(size, U, Pg, Zn, Zd)
}

val execute_SXTW_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n 's_esize,
  ('s_esize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('s_esize), bool('is_unsigned)) -> unit

function execute_SXTW_Z_P_Z__ (VL, d, esize, g, n, s_esize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint((0 <= 's_esize - 1 & 's_esize - 1 < 'esize)));
            result = Elem_set(result, e, esize, Extend(element[s_esize - 1 .. 0], esize, is_unsigned))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SXTW_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SXTW_Z_P_Z__ (size, U, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size != 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 's_esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SXTW_Z_P_Z__(128, d, esize, g, n, s_esize, is_unsigned)
      },
      256 => {
          execute_SXTW_Z_P_Z__(256, d, esize, g, n, s_esize, is_unsigned)
      },
      512 => {
          execute_SXTW_Z_P_Z__(512, d, esize, g, n, s_esize, is_unsigned)
      },
      1024 => {
          execute_SXTW_Z_P_Z__(1024, d, esize, g, n, s_esize, is_unsigned)
      },
      2048 => {
          execute_SXTW_Z_P_Z__(2048, d, esize, g, n, s_esize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1381) = {
    SEE = 1381;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SXTW_Z_P_Z__(size, U, Pg, Zn, Zd)
}

val execute_ANDV_R_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_ANDV_R_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('esize) = Ones(esize);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = result & Elem_read(operand, e, esize)
        };
        ()
    };
    V_set(d, esize) = result
}

val decode_ANDV_R_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_ANDV_R_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_ANDV_R_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_ANDV_R_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_ANDV_R_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_ANDV_R_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_ANDV_R_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1382) = {
    SEE = 1382;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_ANDV_R_P_Z__(size, Pg, Zn, Vd)
}

val execute_EORV_R_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_EORV_R_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('esize) = Zeros(esize);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = EOR(result, Elem_read(operand, e, esize))
        };
        ()
    };
    V_set(d, esize) = result
}

val decode_EORV_R_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_EORV_R_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_EORV_R_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_EORV_R_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_EORV_R_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_EORV_R_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_EORV_R_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1383) = {
    SEE = 1383;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_EORV_R_P_Z__(size, Pg, Zn, Vd)
}

val execute_ORV_R_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_ORV_R_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('esize) = Zeros(esize);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = result | Elem_read(operand, e, esize)
        };
        ()
    };
    V_set(d, esize) = result
}

val decode_ORV_R_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_ORV_R_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_ORV_R_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_ORV_R_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_ORV_R_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_ORV_R_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_ORV_R_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1384) = {
    SEE = 1384;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_ORV_R_P_Z__(size, Pg, Zn, Vd)
}

val execute_SADDV_R_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_SADDV_R_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    sum : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = SInt(Elem_read(operand, e, esize));
            sum = sum + element
        };
        ()
    };
    let 'sum = sum;
    V_set(d, 64) = sum[63 .. 0]
}

val decode_SADDV_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SADDV_R_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_SADDV_R_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_SADDV_R_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_SADDV_R_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_SADDV_R_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_SADDV_R_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1385) = {
    SEE = 1385;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_SADDV_R_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_UADDV_R_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_UADDV_R_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    sum : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = UInt(Elem_read(operand, e, esize));
            sum = sum + element
        };
        ()
    };
    let 'sum = sum;
    V_set(d, 64) = sum[63 .. 0]
}

val decode_UADDV_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UADDV_R_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_UADDV_R_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_UADDV_R_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_UADDV_R_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_UADDV_R_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_UADDV_R_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1386) = {
    SEE = 1386;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_UADDV_R_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_UMAXV_R_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_UMAXV_R_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    maximum : int = if is_unsigned then 0 else negate(2 ^ (esize - 1));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = asl_Int(Elem_read(operand, e, esize), is_unsigned);
            maximum = Max(maximum, element)
        };
        ()
    };
    let 'maximum = maximum;
    V_set(d, esize) = maximum[esize - 1 .. 0]
}

val decode_UMAXV_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMAXV_R_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMAXV_R_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_UMAXV_R_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_UMAXV_R_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_UMAXV_R_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_UMAXV_R_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1387) = {
    SEE = 1387;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_UMAXV_R_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_SMAXV_R_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_SMAXV_R_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    maximum : int = if is_unsigned then 0 else negate(2 ^ (esize - 1));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = asl_Int(Elem_read(operand, e, esize), is_unsigned);
            maximum = Max(maximum, element)
        };
        ()
    };
    let 'maximum = maximum;
    V_set(d, esize) = maximum[esize - 1 .. 0]
}

val decode_SMAXV_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMAXV_R_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMAXV_R_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_SMAXV_R_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_SMAXV_R_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_SMAXV_R_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_SMAXV_R_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1388) = {
    SEE = 1388;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_SMAXV_R_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_UMINV_R_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_UMINV_R_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    minimum : int = if is_unsigned then pow2(esize) - 1 else pow2(esize - 1) - 1;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = asl_Int(Elem_read(operand, e, esize), is_unsigned);
            minimum = Min(minimum, element)
        };
        ()
    };
    let 'minimum = minimum;
    V_set(d, esize) = minimum[esize - 1 .. 0]
}

val decode_UMINV_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMINV_R_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMINV_R_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_UMINV_R_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_UMINV_R_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_UMINV_R_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_UMINV_R_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1389) = {
    SEE = 1389;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_UMINV_R_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_SMINV_R_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_SMINV_R_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    minimum : int = if is_unsigned then pow2(esize) - 1 else pow2(esize - 1) - 1;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = asl_Int(Elem_read(operand, e, esize), is_unsigned);
            minimum = Min(minimum, element)
        };
        ()
    };
    let 'minimum = minimum;
    V_set(d, esize) = minimum[esize - 1 .. 0]
}

val decode_SMINV_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMINV_R_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMINV_R_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_SMINV_R_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_SMINV_R_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_SMINV_R_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_SMINV_R_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1390) = {
    SEE = 1390;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_SMINV_R_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_INDEX_Z_II__ : forall 'VL 'd 'esize 'imm1 'imm2,
  ('esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm1), int('imm2)) -> unit

function execute_INDEX_Z_II__ (VL, d, esize, imm1, imm2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'index = imm1 + e * imm2;
        result = Elem_set(result, e, esize, index[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_INDEX_Z_II__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_INDEX_Z_II__ (size, imm5b, imm5, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'd = UInt(Zd);
    let 'imm1 = SInt(imm5);
    let 'imm2 = SInt(imm5b);
    match VL {
      128 => {
          execute_INDEX_Z_II__(128, d, esize, imm1, imm2)
      },
      256 => {
          execute_INDEX_Z_II__(256, d, esize, imm1, imm2)
      },
      512 => {
          execute_INDEX_Z_II__(512, d, esize, imm1, imm2)
      },
      1024 => {
          execute_INDEX_Z_II__(1024, d, esize, imm1, imm2)
      },
      2048 => {
          execute_INDEX_Z_II__(2048, d, esize, imm1, imm2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1391) = {
    SEE = 1391;
    let size = Slice(__opcode, 22, 2);
    let imm5b = Slice(__opcode, 16, 5);
    let imm5 = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_INDEX_Z_II__(size, imm5b, imm5, Zd)
}

val execute_INDEX_Z_IR__ : forall 'VL 'd 'esize 'imm 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('m)) -> unit

function execute_INDEX_Z_IR__ (VL, d, esize, imm, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand2 : bits('esize) = X_read(m, esize);
    let 'element2 = SInt(operand2);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'index = imm + e * element2;
        result = Elem_set(result, e, esize, index[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_INDEX_Z_IR__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_INDEX_Z_IR__ (size, Rm, imm5, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Rm);
    let 'd = UInt(Zd);
    let 'imm = SInt(imm5);
    match VL {
      128 => {
          execute_INDEX_Z_IR__(128, d, esize, imm, m)
      },
      256 => {
          execute_INDEX_Z_IR__(256, d, esize, imm, m)
      },
      512 => {
          execute_INDEX_Z_IR__(512, d, esize, imm, m)
      },
      1024 => {
          execute_INDEX_Z_IR__(1024, d, esize, imm, m)
      },
      2048 => {
          execute_INDEX_Z_IR__(2048, d, esize, imm, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1392) = {
    SEE = 1392;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let imm5 = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_INDEX_Z_IR__(size, Rm, imm5, Zd)
}

val execute_INDEX_Z_RI__ : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_INDEX_Z_RI__ (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('esize) = X_read(n, esize);
    let 'element1 = SInt(operand1);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'index = element1 + e * imm;
        result = Elem_set(result, e, esize, index[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_INDEX_Z_RI__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_INDEX_Z_RI__ (size, imm5, Rn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Rn);
    let 'd = UInt(Zd);
    let 'imm = SInt(imm5);
    match VL {
      128 => {
          execute_INDEX_Z_RI__(128, d, esize, imm, n)
      },
      256 => {
          execute_INDEX_Z_RI__(256, d, esize, imm, n)
      },
      512 => {
          execute_INDEX_Z_RI__(512, d, esize, imm, n)
      },
      1024 => {
          execute_INDEX_Z_RI__(1024, d, esize, imm, n)
      },
      2048 => {
          execute_INDEX_Z_RI__(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1393) = {
    SEE = 1393;
    let size = Slice(__opcode, 22, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Rn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_INDEX_Z_RI__(size, imm5, Rn, Zd)
}

val execute_INDEX_Z_RR__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_INDEX_Z_RR__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('esize) = X_read(n, esize);
    let 'element1 = SInt(operand1);
    let operand2 : bits('esize) = X_read(m, esize);
    let 'element2 = SInt(operand2);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'index = element1 + e * element2;
        result = Elem_set(result, e, esize, index[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_INDEX_Z_RR__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_INDEX_Z_RR__ (size, Rm, Rn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_INDEX_Z_RR__(128, d, esize, m, n)
      },
      256 => {
          execute_INDEX_Z_RR__(256, d, esize, m, n)
      },
      512 => {
          execute_INDEX_Z_RR__(512, d, esize, m, n)
      },
      1024 => {
          execute_INDEX_Z_RR__(1024, d, esize, m, n)
      },
      2048 => {
          execute_INDEX_Z_RR__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1394) = {
    SEE = 1394;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Rn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_INDEX_Z_RR__(size, Rm, Rn, Zd)
}

val execute_AND_Z_ZI__ : forall 'VL 'dn,
  (0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), bits(64)) -> unit

function execute_AND_Z_ZI__ (VL, dn, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 64);
    let operand : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(64) = Elem_read(operand, e, 64);
        result = Elem_set(result, e, 64, element1 & imm)
    };
    Z_set(dn, VL) = result
}

val decode_AND_Z_ZI__ : (bits(13), bits(5)) -> unit

function decode_AND_Z_ZI__ (imm13, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn);
    imm : bits(64) = undefined;
    let (__tup_0 : bits(64), _) =
      DecodeBitMasks([imm13[12]], imm13[5 .. 0], imm13[11 .. 6], true, 64)
    in
      {
          imm = __tup_0
      };
    match VL {
      128 => {
          execute_AND_Z_ZI__(128, dn, imm)
      },
      256 => {
          execute_AND_Z_ZI__(256, dn, imm)
      },
      512 => {
          execute_AND_Z_ZI__(512, dn, imm)
      },
      1024 => {
          execute_AND_Z_ZI__(1024, dn, imm)
      },
      2048 => {
          execute_AND_Z_ZI__(2048, dn, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1395) = {
    SEE = 1395;
    let imm13 = Slice(__opcode, 5, 13);
    let Zdn = Slice(__opcode, 0, 5);
    decode_AND_Z_ZI__(imm13, Zdn)
}

val execute_EOR_Z_ZI__ : forall 'VL 'dn,
  (0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), bits(64)) -> unit

function execute_EOR_Z_ZI__ (VL, dn, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 64);
    let operand : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(64) = Elem_read(operand, e, 64);
        result = Elem_set(result, e, 64, EOR(element1, imm))
    };
    Z_set(dn, VL) = result
}

val decode_EOR_Z_ZI__ : (bits(13), bits(5)) -> unit

function decode_EOR_Z_ZI__ (imm13, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn);
    imm : bits(64) = undefined;
    let (__tup_0 : bits(64), _) =
      DecodeBitMasks([imm13[12]], imm13[5 .. 0], imm13[11 .. 6], true, 64)
    in
      {
          imm = __tup_0
      };
    match VL {
      128 => {
          execute_EOR_Z_ZI__(128, dn, imm)
      },
      256 => {
          execute_EOR_Z_ZI__(256, dn, imm)
      },
      512 => {
          execute_EOR_Z_ZI__(512, dn, imm)
      },
      1024 => {
          execute_EOR_Z_ZI__(1024, dn, imm)
      },
      2048 => {
          execute_EOR_Z_ZI__(2048, dn, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1396) = {
    SEE = 1396;
    let imm13 = Slice(__opcode, 5, 13);
    let Zdn = Slice(__opcode, 0, 5);
    decode_EOR_Z_ZI__(imm13, Zdn)
}

val execute_ORR_Z_ZI__ : forall 'VL 'dn,
  (0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), bits(64)) -> unit

function execute_ORR_Z_ZI__ (VL, dn, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 64);
    let operand : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(64) = Elem_read(operand, e, 64);
        result = Elem_set(result, e, 64, element1 | imm)
    };
    Z_set(dn, VL) = result
}

val decode_ORR_Z_ZI__ : (bits(13), bits(5)) -> unit

function decode_ORR_Z_ZI__ (imm13, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn);
    imm : bits(64) = undefined;
    let (__tup_0 : bits(64), _) =
      DecodeBitMasks([imm13[12]], imm13[5 .. 0], imm13[11 .. 6], true, 64)
    in
      {
          imm = __tup_0
      };
    match VL {
      128 => {
          execute_ORR_Z_ZI__(128, dn, imm)
      },
      256 => {
          execute_ORR_Z_ZI__(256, dn, imm)
      },
      512 => {
          execute_ORR_Z_ZI__(512, dn, imm)
      },
      1024 => {
          execute_ORR_Z_ZI__(1024, dn, imm)
      },
      2048 => {
          execute_ORR_Z_ZI__(2048, dn, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1397) = {
    SEE = 1397;
    let imm13 = Slice(__opcode, 5, 13);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ORR_Z_ZI__(imm13, Zdn)
}

val execute_MAD_Z_P_ZZZ__ : forall 'VL 'a 'dn 'esize 'g 'm ('sub_op : Bool),
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 0 <= 'a & 'a <= 31 & is_VL('VL)).
  (int('VL), int('a), int('dn), int('esize), int('g), int('m), bool('sub_op)) -> unit

function execute_MAD_Z_P_ZZZ__ (VL, a, dn, esize, g, m, sub_op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(a, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element1 = UInt(Elem_read(operand1, e, esize));
            let 'element2 = UInt(Elem_read(operand2, e, esize));
            let 'product = element1 * element2;
            if sub_op then {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
            } else {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
            }
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_MAD_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_MAD_Z_P_ZZZ__ (size, Zm, op, Pg, Za, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'a = UInt(Za);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_MAD_Z_P_ZZZ__(128, a, dn, esize, g, m, sub_op)
      },
      256 => {
          execute_MAD_Z_P_ZZZ__(256, a, dn, esize, g, m, sub_op)
      },
      512 => {
          execute_MAD_Z_P_ZZZ__(512, a, dn, esize, g, m, sub_op)
      },
      1024 => {
          execute_MAD_Z_P_ZZZ__(1024, a, dn, esize, g, m, sub_op)
      },
      2048 => {
          execute_MAD_Z_P_ZZZ__(2048, a, dn, esize, g, m, sub_op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1398) = {
    SEE = 1398;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Za = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_MAD_Z_P_ZZZ__(size, Zm, op, Pg, Za, Zdn)
}

val execute_MSB_Z_P_ZZZ__ : forall 'VL 'a 'dn 'esize 'g 'm ('sub_op : Bool),
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 0 <= 'a & 'a <= 31 & is_VL('VL)).
  (int('VL), int('a), int('dn), int('esize), int('g), int('m), bool('sub_op)) -> unit

function execute_MSB_Z_P_ZZZ__ (VL, a, dn, esize, g, m, sub_op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(a, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element1 = UInt(Elem_read(operand1, e, esize));
            let 'element2 = UInt(Elem_read(operand2, e, esize));
            let 'product = element1 * element2;
            if sub_op then {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
            } else {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
            }
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_MSB_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_MSB_Z_P_ZZZ__ (size, Zm, op, Pg, Za, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'a = UInt(Za);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_MSB_Z_P_ZZZ__(128, a, dn, esize, g, m, sub_op)
      },
      256 => {
          execute_MSB_Z_P_ZZZ__(256, a, dn, esize, g, m, sub_op)
      },
      512 => {
          execute_MSB_Z_P_ZZZ__(512, a, dn, esize, g, m, sub_op)
      },
      1024 => {
          execute_MSB_Z_P_ZZZ__(1024, a, dn, esize, g, m, sub_op)
      },
      2048 => {
          execute_MSB_Z_P_ZZZ__(2048, a, dn, esize, g, m, sub_op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1399) = {
    SEE = 1399;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Za = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_MSB_Z_P_ZZZ__(size, Zm, op, Pg, Za, Zdn)
}

val execute_MLA_Z_P_ZZZ__ : forall 'VL 'da 'esize 'g 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('m), int('n), bool('sub_op)) -> unit

function execute_MLA_Z_P_ZZZ__ (VL, da, esize, g, m, n, sub_op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element1 = UInt(Elem_read(operand1, e, esize));
            let 'element2 = UInt(Elem_read(operand2, e, esize));
            let 'product = element1 * element2;
            if sub_op then {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
            } else {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
            }
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand3, e, esize))
        }
    };
    Z_set(da, VL) = result
}

val decode_MLA_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_MLA_Z_P_ZZZ__ (size, Zm, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let sub_op : bool = false;
    match VL {
      128 => {
          execute_MLA_Z_P_ZZZ__(128, da, esize, g, m, n, sub_op)
      },
      256 => {
          execute_MLA_Z_P_ZZZ__(256, da, esize, g, m, n, sub_op)
      },
      512 => {
          execute_MLA_Z_P_ZZZ__(512, da, esize, g, m, n, sub_op)
      },
      1024 => {
          execute_MLA_Z_P_ZZZ__(1024, da, esize, g, m, n, sub_op)
      },
      2048 => {
          execute_MLA_Z_P_ZZZ__(2048, da, esize, g, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1400) = {
    SEE = 1400;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLA_Z_P_ZZZ__(size, Zm, op, Pg, Zn, Zda)
}

val execute_MLS_Z_P_ZZZ__ : forall 'VL 'da 'esize 'g 'm 'n ('sub_op : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('m), int('n), bool('sub_op)) -> unit

function execute_MLS_Z_P_ZZZ__ (VL, da, esize, g, m, n, sub_op) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element1 = UInt(Elem_read(operand1, e, esize));
            let 'element2 = UInt(Elem_read(operand2, e, esize));
            let 'product = element1 * element2;
            if sub_op then {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) - product)
            } else {
                result = Elem_set(result, e, esize, Elem_read(operand3, e, esize) + product)
            }
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand3, e, esize))
        }
    };
    Z_set(da, VL) = result
}

val decode_MLS_Z_P_ZZZ__ : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_MLS_Z_P_ZZZ__ (size, Zm, op, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let sub_op : bool = true;
    match VL {
      128 => {
          execute_MLS_Z_P_ZZZ__(128, da, esize, g, m, n, sub_op)
      },
      256 => {
          execute_MLS_Z_P_ZZZ__(256, da, esize, g, m, n, sub_op)
      },
      512 => {
          execute_MLS_Z_P_ZZZ__(512, da, esize, g, m, n, sub_op)
      },
      1024 => {
          execute_MLS_Z_P_ZZZ__(1024, da, esize, g, m, n, sub_op)
      },
      2048 => {
          execute_MLS_Z_P_ZZZ__(2048, da, esize, g, m, n, sub_op)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1401) = {
    SEE = 1401;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let op = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLS_Z_P_ZZZ__(size, Zm, op, Pg, Zn, Zda)
}

val execute_MOVPRFX_Z_Z__ : forall 'VL 'd 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('n)) -> unit

function execute_MOVPRFX_Z_Z__ (VL, d, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let result : bits('VL) = Z_read(n, VL);
    Z_set(d, VL) = result
}

val decode_MOVPRFX_Z_Z__ : (bits(5), bits(5)) -> unit

function decode_MOVPRFX_Z_Z__ (Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_MOVPRFX_Z_Z__(128, d, n)
      },
      256 => {
          execute_MOVPRFX_Z_Z__(256, d, n)
      },
      512 => {
          execute_MOVPRFX_Z_Z__(512, d, n)
      },
      1024 => {
          execute_MOVPRFX_Z_Z__(1024, d, n)
      },
      2048 => {
          execute_MOVPRFX_Z_Z__(2048, d, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1402) = {
    SEE = 1402;
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVPRFX_Z_Z__(Zn, Zd)
}

val execute_MOVPRFX_Z_P_Z__ : forall 'VL 'd 'esize 'g ('merging : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('merging), int('n)) -> unit

function execute_MOVPRFX_Z_P_Z__ (VL, d, esize, g, merging, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let dest : bits('VL) = Z_read(d, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand1, e, esize);
            result = Elem_set(result, e, esize, element)
        } else if merging then {
            result = Elem_set(result, e, esize, Elem_read(dest, e, esize))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_MOVPRFX_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_MOVPRFX_Z_P_Z__ (size, M, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let merging : bool = M == 0b1;
    match VL {
      128 => {
          execute_MOVPRFX_Z_P_Z__(128, d, esize, g, merging, n)
      },
      256 => {
          execute_MOVPRFX_Z_P_Z__(256, d, esize, g, merging, n)
      },
      512 => {
          execute_MOVPRFX_Z_P_Z__(512, d, esize, g, merging, n)
      },
      1024 => {
          execute_MOVPRFX_Z_P_Z__(1024, d, esize, g, merging, n)
      },
      2048 => {
          execute_MOVPRFX_Z_P_Z__(2048, d, esize, g, merging, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1403) = {
    SEE = 1403;
    let size = Slice(__opcode, 22, 2);
    let M = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_MOVPRFX_Z_P_Z__(size, M, Pg, Zn, Zd)
}

val execute_CNTP_R_P_P__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_CNTP_R_P_P__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('PL) = P_read(n, PL);
    sum : bits(64) = Zeros(64);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) & ActivePredicateElement(operand, e, esize) then {
            sum = sum + 1
        };
        ()
    };
    X_set(d, 64) = sum
}

val decode_CNTP_R_P_P__ : (bits(2), bits(4), bits(4), bits(5)) -> unit

function decode_CNTP_R_P_P__ (size, Pg, Pn, Rd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'd = UInt(Rd);
    match VL {
      128 => {
          execute_CNTP_R_P_P__(128, d, esize, g, n)
      },
      256 => {
          execute_CNTP_R_P_P__(256, d, esize, g, n)
      },
      512 => {
          execute_CNTP_R_P_P__(512, d, esize, g, n)
      },
      1024 => {
          execute_CNTP_R_P_P__(1024, d, esize, g, n)
      },
      2048 => {
          execute_CNTP_R_P_P__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1404) = {
    SEE = 1404;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Rd = Slice(__opcode, 0, 5);
    decode_CNTP_R_P_P__(size, Pg, Pn, Rd)
}

val execute_REV_P_P__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_REV_P_P__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let operand : bits('PL) = P_read(n, PL);
    let result : bits('PL) = Reverse(operand, DIV(esize, 8));
    P_set(d, PL) = result
}

val decode_REV_P_P__ : (bits(2), bits(4), bits(4)) -> unit

function decode_REV_P_P__ (size, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Pn);
    let 'd = UInt(Pd);
    match VL {
      128 => {
          execute_REV_P_P__(128, d, esize, n)
      },
      256 => {
          execute_REV_P_P__(256, d, esize, n)
      },
      512 => {
          execute_REV_P_P__(512, d, esize, n)
      },
      1024 => {
          execute_REV_P_P__(1024, d, esize, n)
      },
      2048 => {
          execute_REV_P_P__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1405) = {
    SEE = 1405;
    let size = Slice(__opcode, 22, 2);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_REV_P_P__(size, Pn, Pd)
}

val execute_TRN1_P_PP__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_TRN1_P_PP__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, DIV(esize, 8), Elem_read(operand1, 2 * p + part, DIV(esize, 8)));
        result = Elem_set(result, 2 * p + 1, DIV(esize, 8), Elem_read(operand2, 2 * p + part, DIV(esize, 8)))
    };
    P_set(d, PL) = result
}

val decode_TRN1_P_PP__ : (bits(2), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_TRN1_P_PP__ (size, Pm, H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let 'part = 0;
    match VL {
      128 => {
          execute_TRN1_P_PP__(128, d, esize, m, n, part)
      },
      256 => {
          execute_TRN1_P_PP__(256, d, esize, m, n, part)
      },
      512 => {
          execute_TRN1_P_PP__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_TRN1_P_PP__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_TRN1_P_PP__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1406) = {
    SEE = 1406;
    let size = Slice(__opcode, 22, 2);
    let Pm = Slice(__opcode, 16, 4);
    let H = Slice(__opcode, 10, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_TRN1_P_PP__(size, Pm, H, Pn, Pd)
}

val execute_TRN2_P_PP__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_TRN2_P_PP__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, DIV(esize, 8), Elem_read(operand1, 2 * p + part, DIV(esize, 8)));
        result = Elem_set(result, 2 * p + 1, DIV(esize, 8), Elem_read(operand2, 2 * p + part, DIV(esize, 8)))
    };
    P_set(d, PL) = result
}

val decode_TRN2_P_PP__ : (bits(2), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_TRN2_P_PP__ (size, Pm, H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let 'part = 1;
    match VL {
      128 => {
          execute_TRN2_P_PP__(128, d, esize, m, n, part)
      },
      256 => {
          execute_TRN2_P_PP__(256, d, esize, m, n, part)
      },
      512 => {
          execute_TRN2_P_PP__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_TRN2_P_PP__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_TRN2_P_PP__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1407) = {
    SEE = 1407;
    let size = Slice(__opcode, 22, 2);
    let Pm = Slice(__opcode, 16, 4);
    let H = Slice(__opcode, 10, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_TRN2_P_PP__(size, Pm, H, Pn, Pd)
}

val execute_UZP1_P_PP__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZP1_P_PP__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, p, DIV(esize, 8), Elem_read(operand1, 2 * p + part, DIV(esize, 8)))
    };
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, pairs + p, DIV(esize, 8), Elem_read(operand2, 2 * p + part, DIV(esize, 8)))
    };
    P_set(d, PL) = result
}

val decode_UZP1_P_PP__ : (bits(2), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_UZP1_P_PP__ (size, Pm, H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let 'part = 0;
    match VL {
      128 => {
          execute_UZP1_P_PP__(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZP1_P_PP__(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZP1_P_PP__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZP1_P_PP__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZP1_P_PP__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1408) = {
    SEE = 1408;
    let size = Slice(__opcode, 22, 2);
    let Pm = Slice(__opcode, 16, 4);
    let H = Slice(__opcode, 10, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_UZP1_P_PP__(size, Pm, H, Pn, Pd)
}

val execute_UZP2_P_PP__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZP2_P_PP__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, p, DIV(esize, 8), Elem_read(operand1, 2 * p + part, DIV(esize, 8)))
    };
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, pairs + p, DIV(esize, 8), Elem_read(operand2, 2 * p + part, DIV(esize, 8)))
    };
    P_set(d, PL) = result
}

val decode_UZP2_P_PP__ : (bits(2), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_UZP2_P_PP__ (size, Pm, H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let 'part = 1;
    match VL {
      128 => {
          execute_UZP2_P_PP__(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZP2_P_PP__(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZP2_P_PP__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZP2_P_PP__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZP2_P_PP__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1409) = {
    SEE = 1409;
    let size = Slice(__opcode, 22, 2);
    let Pm = Slice(__opcode, 16, 4);
    let H = Slice(__opcode, 10, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_UZP2_P_PP__(size, Pm, H, Pn, Pd)
}

val execute_ZIP1_P_PP__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIP1_P_PP__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'base = part * pairs;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, DIV(esize, 8), Elem_read(operand1, base + p, DIV(esize, 8)));
        result = Elem_set(result, 2 * p + 1, DIV(esize, 8), Elem_read(operand2, base + p, DIV(esize, 8)))
    };
    P_set(d, PL) = result
}

val decode_ZIP1_P_PP__ : (bits(2), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_ZIP1_P_PP__ (size, Pm, H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let 'part = 0;
    match VL {
      128 => {
          execute_ZIP1_P_PP__(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIP1_P_PP__(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIP1_P_PP__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIP1_P_PP__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIP1_P_PP__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1410) = {
    SEE = 1410;
    let size = Slice(__opcode, 22, 2);
    let Pm = Slice(__opcode, 16, 4);
    let H = Slice(__opcode, 10, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_ZIP1_P_PP__(size, Pm, H, Pn, Pd)
}

val execute_ZIP2_P_PP__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIP2_P_PP__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'base = part * pairs;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, DIV(esize, 8), Elem_read(operand1, base + p, DIV(esize, 8)));
        result = Elem_set(result, 2 * p + 1, DIV(esize, 8), Elem_read(operand2, base + p, DIV(esize, 8)))
    };
    P_set(d, PL) = result
}

val decode_ZIP2_P_PP__ : (bits(2), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_ZIP2_P_PP__ (size, Pm, H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let 'part = 1;
    match VL {
      128 => {
          execute_ZIP2_P_PP__(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIP2_P_PP__(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIP2_P_PP__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIP2_P_PP__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIP2_P_PP__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1411) = {
    SEE = 1411;
    let size = Slice(__opcode, 22, 2);
    let Pm = Slice(__opcode, 16, 4);
    let H = Slice(__opcode, 10, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_ZIP2_P_PP__(size, Pm, H, Pn, Pd)
}

val execute_REV_Z_Z__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_REV_Z_Z__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let operand : bits('VL) = Z_read(n, VL);
    let result : bits('VL) = Reverse(operand, esize);
    Z_set(d, VL) = result
}

val decode_REV_Z_Z__ : (bits(2), bits(5), bits(5)) -> unit

function decode_REV_Z_Z__ (size, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_REV_Z_Z__(128, d, esize, n)
      },
      256 => {
          execute_REV_Z_Z__(256, d, esize, n)
      },
      512 => {
          execute_REV_Z_Z__(512, d, esize, n)
      },
      1024 => {
          execute_REV_Z_Z__(1024, d, esize, n)
      },
      2048 => {
          execute_REV_Z_Z__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1412) = {
    SEE = 1412;
    let size = Slice(__opcode, 22, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_REV_Z_Z__(size, Zn, Zd)
}

val execute_TBL_Z_ZZ_1 : forall 'VL 'd ('double_table : Bool) 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('double_table), int('esize), int('m), int('n)) -> unit

function execute_TBL_Z_ZZ_1 (VL, d, double_table, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let indexes : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    let 'table_size = if double_table then VL * 2 else VL;
    let 'table_elems = DIV(table_size, esize);
    table : bits('table_size) = undefined;
    if double_table then {
        let top : bits('VL) = Z_read(MOD(n + 1, 32), VL);
        let bottom : bits('VL) = Z_read(n, VL);
        table = (top @ bottom)[table_size - 1 .. 0]
    } else {
        table = Z_read(n, table_size)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'idx = UInt(Elem_read(indexes, e, esize));
        result = Elem_set(result, e, esize, if idx < table_elems then
          Elem_read(table, idx, esize)
        else
          Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_TBL_Z_ZZ_1 : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_TBL_Z_ZZ_1 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let double_table : bool = false;
    match VL {
      128 => {
          execute_TBL_Z_ZZ_1(128, d, double_table, esize, m, n)
      },
      256 => {
          execute_TBL_Z_ZZ_1(256, d, double_table, esize, m, n)
      },
      512 => {
          execute_TBL_Z_ZZ_1(512, d, double_table, esize, m, n)
      },
      1024 => {
          execute_TBL_Z_ZZ_1(1024, d, double_table, esize, m, n)
      },
      2048 => {
          execute_TBL_Z_ZZ_1(2048, d, double_table, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1413) = {
    SEE = 1413;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TBL_Z_ZZ_1(size, Zm, Zn, Zd)
}

val execute_TBL_Z_ZZ_2 : forall 'VL 'd ('double_table : Bool) 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), bool('double_table), int('esize), int('m), int('n)) -> unit

function execute_TBL_Z_ZZ_2 (VL, d, double_table, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let indexes : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    let 'table_size = if double_table then VL * 2 else VL;
    let 'table_elems = DIV(table_size, esize);
    table : bits('table_size) = undefined;
    if double_table then {
        let top : bits('VL) = Z_read(MOD(n + 1, 32), VL);
        let bottom : bits('VL) = Z_read(n, VL);
        table = (top @ bottom)[table_size - 1 .. 0]
    } else {
        table = Z_read(n, table_size)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'idx = UInt(Elem_read(indexes, e, esize));
        result = Elem_set(result, e, esize, if idx < table_elems then
          Elem_read(table, idx, esize)
        else
          Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_TBL_Z_ZZ_2 : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_TBL_Z_ZZ_2 (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let double_table : bool = true;
    match VL {
      128 => {
          execute_TBL_Z_ZZ_2(128, d, double_table, esize, m, n)
      },
      256 => {
          execute_TBL_Z_ZZ_2(256, d, double_table, esize, m, n)
      },
      512 => {
          execute_TBL_Z_ZZ_2(512, d, double_table, esize, m, n)
      },
      1024 => {
          execute_TBL_Z_ZZ_2(1024, d, double_table, esize, m, n)
      },
      2048 => {
          execute_TBL_Z_ZZ_2(2048, d, double_table, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1414) = {
    SEE = 1414;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TBL_Z_ZZ_2(size, Zm, Zn, Zd)
}

val execute_TRN1_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_TRN1_Z_ZZ__ (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, 2 * p + part, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_TRN1_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_TRN1_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_TRN1_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_TRN1_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_TRN1_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_TRN1_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_TRN1_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1415) = {
    SEE = 1415;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TRN1_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_TRN2_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_TRN2_Z_ZZ__ (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, 2 * p + part, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_TRN2_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_TRN2_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_TRN2_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_TRN2_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_TRN2_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_TRN2_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_TRN2_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1416) = {
    SEE = 1416;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TRN2_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_UZP1_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZP1_Z_ZZ__ (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, p, esize, Elem_read(operand1, 2 * p + part, esize))
    };
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, pairs + p, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_UZP1_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UZP1_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_UZP1_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZP1_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZP1_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZP1_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZP1_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1417) = {
    SEE = 1417;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UZP1_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_UZP2_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZP2_Z_ZZ__ (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, p, esize, Elem_read(operand1, 2 * p + part, esize))
    };
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, pairs + p, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_UZP2_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UZP2_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_UZP2_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZP2_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZP2_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZP2_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZP2_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1418) = {
    SEE = 1418;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UZP2_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_ZIP1_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIP1_Z_ZZ__ (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    let 'base = part * pairs;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, base + p, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, base + p, esize))
    };
    Z_set(d, VL) = result
}

val decode_ZIP1_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ZIP1_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_ZIP1_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIP1_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIP1_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIP1_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIP1_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1419) = {
    SEE = 1419;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ZIP1_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_ZIP2_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIP2_Z_ZZ__ (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    let 'base = part * pairs;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, base + p, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, base + p, esize))
    };
    Z_set(d, VL) = result
}

val decode_ZIP2_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ZIP2_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_ZIP2_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIP2_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIP2_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIP2_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIP2_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1420) = {
    SEE = 1420;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ZIP2_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_TRN1_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_TRN1_Z_ZZ_Q (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, 2 * p + part, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_TRN1_Z_ZZ_Q : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_TRN1_Z_ZZ_Q (Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_TRN1_Z_ZZ_Q(128, d, esize, m, n, part)
      },
      256 => {
          execute_TRN1_Z_ZZ_Q(256, d, esize, m, n, part)
      },
      512 => {
          execute_TRN1_Z_ZZ_Q(512, d, esize, m, n, part)
      },
      1024 => {
          execute_TRN1_Z_ZZ_Q(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_TRN1_Z_ZZ_Q(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1421) = {
    SEE = 1421;
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TRN1_Z_ZZ_Q(Zm, H, Zn, Zd)
}

val execute_TRN2_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_TRN2_Z_ZZ_Q (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, 2 * p + part, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_TRN2_Z_ZZ_Q : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_TRN2_Z_ZZ_Q (Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_TRN2_Z_ZZ_Q(128, d, esize, m, n, part)
      },
      256 => {
          execute_TRN2_Z_ZZ_Q(256, d, esize, m, n, part)
      },
      512 => {
          execute_TRN2_Z_ZZ_Q(512, d, esize, m, n, part)
      },
      1024 => {
          execute_TRN2_Z_ZZ_Q(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_TRN2_Z_ZZ_Q(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1422) = {
    SEE = 1422;
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TRN2_Z_ZZ_Q(Zm, H, Zn, Zd)
}

val execute_ZIP1_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIP1_Z_ZZ_Q (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    let 'base = part * pairs;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, base + p, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, base + p, esize))
    };
    Z_set(d, VL) = result
}

val decode_ZIP1_Z_ZZ_Q : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ZIP1_Z_ZZ_Q (Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_ZIP1_Z_ZZ_Q(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIP1_Z_ZZ_Q(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIP1_Z_ZZ_Q(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIP1_Z_ZZ_Q(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIP1_Z_ZZ_Q(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1423) = {
    SEE = 1423;
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ZIP1_Z_ZZ_Q(Zm, H, Zn, Zd)
}

val execute_ZIP2_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIP2_Z_ZZ_Q (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    let 'base = part * pairs;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, 2 * p + 0, esize, Elem_read(operand1, base + p, esize));
        result = Elem_set(result, 2 * p + 1, esize, Elem_read(operand2, base + p, esize))
    };
    Z_set(d, VL) = result
}

val decode_ZIP2_Z_ZZ_Q : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ZIP2_Z_ZZ_Q (Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_ZIP2_Z_ZZ_Q(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIP2_Z_ZZ_Q(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIP2_Z_ZZ_Q(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIP2_Z_ZZ_Q(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIP2_Z_ZZ_Q(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1424) = {
    SEE = 1424;
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ZIP2_Z_ZZ_Q(Zm, H, Zn, Zd)
}

val execute_UZP1_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZP1_Z_ZZ_Q (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, p, esize, Elem_read(operand1, 2 * p + part, esize))
    };
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, pairs + p, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_UZP1_Z_ZZ_Q : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UZP1_Z_ZZ_Q (Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_UZP1_Z_ZZ_Q(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZP1_Z_ZZ_Q(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZP1_Z_ZZ_Q(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZP1_Z_ZZ_Q(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZP1_Z_ZZ_Q(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1425) = {
    SEE = 1425;
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UZP1_Z_ZZ_Q(Zm, H, Zn, Zd)
}

val execute_UZP2_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZP2_Z_ZZ_Q (VL, d, esize, m, n, part) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    if VL < esize * 2 then {
        throw(Error_Undefined())
    };
    let 'pairs = DIV(VL, esize * 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Zeros(VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, p, esize, Elem_read(operand1, 2 * p + part, esize))
    };
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        result = Elem_set(result, pairs + p, esize, Elem_read(operand2, 2 * p + part, esize))
    };
    Z_set(d, VL) = result
}

val decode_UZP2_Z_ZZ_Q : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UZP2_Z_ZZ_Q (Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_UZP2_Z_ZZ_Q(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZP2_Z_ZZ_Q(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZP2_Z_ZZ_Q(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZP2_Z_ZZ_Q(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZP2_Z_ZZ_Q(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1426) = {
    SEE = 1426;
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UZP2_Z_ZZ_Q(Zm, H, Zn, Zd)
}

val execute_CLASTA_R_P_Z__ : forall 'VL 'csize 'dn 'esize 'g ('isBefore : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 'csize in {32, 64} & is_VL('VL)).
  (int('VL), int('csize), int('dn), int('esize), int('g), bool('isBefore), int('m)) -> unit

function execute_CLASTA_R_P_Z__ (VL, csize, dn, esize, g, isBefore, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('esize) = X_read(dn, esize);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('csize) = undefined;
    last : int = LastActiveElement(mask, esize);
    if last < 0 then {
        assert(constraint(('esize >= 0 & 'csize >= 'esize)));
        result = ZeroExtend(operand1, csize)
    } else {
        if not_bool(isBefore) then {
            last = last + 1;
            if last >= elements then {
                last = 0
            };
            ()
        };
        let 'last = last;
        assert(constraint(('esize >= 0 & 'csize >= 'esize)));
        result = ZeroExtend(Elem_read(operand2, last, esize), csize)
    };
    X_set(dn, csize) = result
}

val decode_CLASTA_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_CLASTA_R_P_Z__ (size, B, Pg, Zm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Rdn);
    let 'm = UInt(Zm);
    let 'csize = if esize < 64 then 32 else 64;
    let isBefore : bool = false;
    match VL {
      128 => {
          execute_CLASTA_R_P_Z__(128, csize, dn, esize, g, isBefore, m)
      },
      256 => {
          execute_CLASTA_R_P_Z__(256, csize, dn, esize, g, isBefore, m)
      },
      512 => {
          execute_CLASTA_R_P_Z__(512, csize, dn, esize, g, isBefore, m)
      },
      1024 => {
          execute_CLASTA_R_P_Z__(1024, csize, dn, esize, g, isBefore, m)
      },
      2048 => {
          execute_CLASTA_R_P_Z__(2048, csize, dn, esize, g, isBefore, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1427) = {
    SEE = 1427;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_CLASTA_R_P_Z__(size, B, Pg, Zm, Rdn)
}

val execute_CLASTB_R_P_Z__ : forall 'VL 'csize 'dn 'esize 'g ('isBefore : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & 'csize in {32, 64} & is_VL('VL)).
  (int('VL), int('csize), int('dn), int('esize), int('g), bool('isBefore), int('m)) -> unit

function execute_CLASTB_R_P_Z__ (VL, csize, dn, esize, g, isBefore, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('esize) = X_read(dn, esize);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('csize) = undefined;
    last : int = LastActiveElement(mask, esize);
    if last < 0 then {
        assert(constraint(('esize >= 0 & 'csize >= 'esize)));
        result = ZeroExtend(operand1, csize)
    } else {
        if not_bool(isBefore) then {
            last = last + 1;
            if last >= elements then {
                last = 0
            };
            ()
        };
        let 'last = last;
        assert(constraint(('esize >= 0 & 'csize >= 'esize)));
        result = ZeroExtend(Elem_read(operand2, last, esize), csize)
    };
    X_set(dn, csize) = result
}

val decode_CLASTB_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_CLASTB_R_P_Z__ (size, B, Pg, Zm, Rdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Rdn);
    let 'm = UInt(Zm);
    let 'csize = if esize < 64 then 32 else 64;
    let isBefore : bool = true;
    match VL {
      128 => {
          execute_CLASTB_R_P_Z__(128, csize, dn, esize, g, isBefore, m)
      },
      256 => {
          execute_CLASTB_R_P_Z__(256, csize, dn, esize, g, isBefore, m)
      },
      512 => {
          execute_CLASTB_R_P_Z__(512, csize, dn, esize, g, isBefore, m)
      },
      1024 => {
          execute_CLASTB_R_P_Z__(1024, csize, dn, esize, g, isBefore, m)
      },
      2048 => {
          execute_CLASTB_R_P_Z__(2048, csize, dn, esize, g, isBefore, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1428) = {
    SEE = 1428;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Rdn = Slice(__opcode, 0, 5);
    decode_CLASTB_R_P_Z__(size, B, Pg, Zm, Rdn)
}

val execute_CLASTA_V_P_Z__ : forall 'VL 'dn 'esize 'g ('isBefore : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bool('isBefore), int('m)) -> unit

function execute_CLASTA_V_P_Z__ (VL, dn, esize, g, isBefore, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('esize) = V_read(dn, esize);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('esize) = undefined;
    last : int = LastActiveElement(mask, esize);
    if last < 0 then {
        result = ZeroExtend(operand1, esize)
    } else {
        if not_bool(isBefore) then {
            last = last + 1;
            if last >= elements then {
                last = 0
            };
            ()
        };
        let 'last = last;
        result = Elem_read(operand2, last, esize)
    };
    V_set(dn, esize) = result
}

val decode_CLASTA_V_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_CLASTA_V_P_Z__ (size, B, Pg, Zm, Vdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Vdn);
    let 'm = UInt(Zm);
    let isBefore : bool = false;
    match VL {
      128 => {
          execute_CLASTA_V_P_Z__(128, dn, esize, g, isBefore, m)
      },
      256 => {
          execute_CLASTA_V_P_Z__(256, dn, esize, g, isBefore, m)
      },
      512 => {
          execute_CLASTA_V_P_Z__(512, dn, esize, g, isBefore, m)
      },
      1024 => {
          execute_CLASTA_V_P_Z__(1024, dn, esize, g, isBefore, m)
      },
      2048 => {
          execute_CLASTA_V_P_Z__(2048, dn, esize, g, isBefore, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1429) = {
    SEE = 1429;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Vdn = Slice(__opcode, 0, 5);
    decode_CLASTA_V_P_Z__(size, B, Pg, Zm, Vdn)
}

val execute_CLASTB_V_P_Z__ : forall 'VL 'dn 'esize 'g ('isBefore : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bool('isBefore), int('m)) -> unit

function execute_CLASTB_V_P_Z__ (VL, dn, esize, g, isBefore, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('esize) = V_read(dn, esize);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('esize) = undefined;
    last : int = LastActiveElement(mask, esize);
    if last < 0 then {
        result = ZeroExtend(operand1, esize)
    } else {
        if not_bool(isBefore) then {
            last = last + 1;
            if last >= elements then {
                last = 0
            };
            ()
        };
        let 'last = last;
        result = Elem_read(operand2, last, esize)
    };
    V_set(dn, esize) = result
}

val decode_CLASTB_V_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_CLASTB_V_P_Z__ (size, B, Pg, Zm, Vdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Vdn);
    let 'm = UInt(Zm);
    let isBefore : bool = true;
    match VL {
      128 => {
          execute_CLASTB_V_P_Z__(128, dn, esize, g, isBefore, m)
      },
      256 => {
          execute_CLASTB_V_P_Z__(256, dn, esize, g, isBefore, m)
      },
      512 => {
          execute_CLASTB_V_P_Z__(512, dn, esize, g, isBefore, m)
      },
      1024 => {
          execute_CLASTB_V_P_Z__(1024, dn, esize, g, isBefore, m)
      },
      2048 => {
          execute_CLASTB_V_P_Z__(2048, dn, esize, g, isBefore, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1430) = {
    SEE = 1430;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Vdn = Slice(__opcode, 0, 5);
    decode_CLASTB_V_P_Z__(size, B, Pg, Zm, Vdn)
}

val execute_CLASTA_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('isBefore : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bool('isBefore), int('m)) -> unit

function execute_CLASTA_Z_P_ZZ__ (VL, dn, esize, g, isBefore, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    last : int = LastActiveElement(mask, esize);
    if last < 0 then {
        result = operand1
    } else {
        if not_bool(isBefore) then {
            last = last + 1;
            if last >= elements then {
                last = 0
            };
            ()
        };
        let 'last = last;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = Elem_set(result, e, esize, Elem_read(operand2, last, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_CLASTA_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_CLASTA_Z_P_ZZ__ (size, B, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let isBefore : bool = false;
    match VL {
      128 => {
          execute_CLASTA_Z_P_ZZ__(128, dn, esize, g, isBefore, m)
      },
      256 => {
          execute_CLASTA_Z_P_ZZ__(256, dn, esize, g, isBefore, m)
      },
      512 => {
          execute_CLASTA_Z_P_ZZ__(512, dn, esize, g, isBefore, m)
      },
      1024 => {
          execute_CLASTA_Z_P_ZZ__(1024, dn, esize, g, isBefore, m)
      },
      2048 => {
          execute_CLASTA_Z_P_ZZ__(2048, dn, esize, g, isBefore, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1431) = {
    SEE = 1431;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_CLASTA_Z_P_ZZ__(size, B, Pg, Zm, Zdn)
}

val execute_CLASTB_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('isBefore : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), bool('isBefore), int('m)) -> unit

function execute_CLASTB_Z_P_ZZ__ (VL, dn, esize, g, isBefore, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    last : int = LastActiveElement(mask, esize);
    if last < 0 then {
        result = operand1
    } else {
        if not_bool(isBefore) then {
            last = last + 1;
            if last >= elements then {
                last = 0
            };
            ()
        };
        let 'last = last;
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            result = Elem_set(result, e, esize, Elem_read(operand2, last, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_CLASTB_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_CLASTB_Z_P_ZZ__ (size, B, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let isBefore : bool = true;
    match VL {
      128 => {
          execute_CLASTB_Z_P_ZZ__(128, dn, esize, g, isBefore, m)
      },
      256 => {
          execute_CLASTB_Z_P_ZZ__(256, dn, esize, g, isBefore, m)
      },
      512 => {
          execute_CLASTB_Z_P_ZZ__(512, dn, esize, g, isBefore, m)
      },
      1024 => {
          execute_CLASTB_Z_P_ZZ__(1024, dn, esize, g, isBefore, m)
      },
      2048 => {
          execute_CLASTB_Z_P_ZZ__(2048, dn, esize, g, isBefore, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1432) = {
    SEE = 1432;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_CLASTB_Z_P_ZZ__(size, B, Pg, Zm, Zdn)
}

val execute_COMPACT_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_COMPACT_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Zeros(VL);
    x : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand1, e, esize);
            let 'x = x in
              {
                  result = Elem_set(result, x, esize, element)
              };
            x = x + 1
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_COMPACT_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_COMPACT_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_COMPACT_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_COMPACT_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_COMPACT_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_COMPACT_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_COMPACT_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1433) = {
    SEE = 1433;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_COMPACT_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_SPLICE_Z_P_ZZ_Des : forall 'VL 'dst 'esize 's1 's2 'v,
  ('v in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 's2 & 's2 <= 31 & 0 <= 's1 & 's1 <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dst & 'dst <= 31 & is_VL('VL)).
  (int('VL), int('dst), int('esize), int('s1), int('s2), int('v)) -> unit

function execute_SPLICE_Z_P_ZZ_Des (VL, dst, esize, s1, s2, v) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(v, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(s1, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(s2, VL);
    result : bits('VL) = undefined;
    x : int = 0;
    active : bool = false;
    let 'lastnum = LastActiveElement(mask, esize);
    if lastnum >= 0 then {
        foreach (e from 0 to lastnum by 1 in inc) {
            active = active | ActivePredicateElement(mask, e, esize);
            if active then {
                let 'x = x in
                  {
                      result = Elem_set(result, x, esize, Elem_read(operand1, e, esize))
                  };
                x = x + 1
            };
            ()
        }
    };
    let 'nelements = elements - x - 1;
    foreach (e from 0 to nelements by 1 in inc) {
        let 'x = x in
          {
              result = Elem_set(result, x, esize, Elem_read(operand2, e, esize))
          };
        x = x + 1
    };
    Z_set(dst, VL) = result
}

val decode_SPLICE_Z_P_ZZ_Des : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_SPLICE_Z_P_ZZ_Des (size, Pv, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'v = UInt(Pv);
    let 'dst = UInt(Zdn);
    let 's1 = dst;
    let 's2 = UInt(Zm);
    match VL {
      128 => {
          execute_SPLICE_Z_P_ZZ_Des(128, dst, esize, s1, s2, v)
      },
      256 => {
          execute_SPLICE_Z_P_ZZ_Des(256, dst, esize, s1, s2, v)
      },
      512 => {
          execute_SPLICE_Z_P_ZZ_Des(512, dst, esize, s1, s2, v)
      },
      1024 => {
          execute_SPLICE_Z_P_ZZ_Des(1024, dst, esize, s1, s2, v)
      },
      2048 => {
          execute_SPLICE_Z_P_ZZ_Des(2048, dst, esize, s1, s2, v)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1434) = {
    SEE = 1434;
    let size = Slice(__opcode, 22, 2);
    let Pv = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SPLICE_Z_P_ZZ_Des(size, Pv, Zm, Zdn)
}

val execute_SPLICE_Z_P_ZZ_Con : forall 'VL 'dst 'esize 's1 's2 'v,
  ('v in {0, 1, 2, 3, 4, 5, 6, 7} & 0 <= 's1 & 's1 <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dst & 'dst <= 31 & is_VL('VL)).
  (int('VL), int('dst), int('esize), int('s1), int('s2), int('v)) -> unit

function execute_SPLICE_Z_P_ZZ_Con (VL, dst, esize, s1, s2, v) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(v, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(s1, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(s2, VL);
    result : bits('VL) = undefined;
    x : int = 0;
    active : bool = false;
    let 'lastnum = LastActiveElement(mask, esize);
    if lastnum >= 0 then {
        foreach (e from 0 to lastnum by 1 in inc) {
            active = active | ActivePredicateElement(mask, e, esize);
            if active then {
                let 'x = x in
                  {
                      result = Elem_set(result, x, esize, Elem_read(operand1, e, esize))
                  };
                x = x + 1
            };
            ()
        }
    };
    let 'nelements = elements - x - 1;
    foreach (e from 0 to nelements by 1 in inc) {
        let 'x = x in
          {
              result = Elem_set(result, x, esize, Elem_read(operand2, e, esize))
          };
        x = x + 1
    };
    Z_set(dst, VL) = result
}

val decode_SPLICE_Z_P_ZZ_Con : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_SPLICE_Z_P_ZZ_Con (size, Pv, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'v = UInt(Pv);
    let 'dst = UInt(Zd);
    let 's1 = UInt(Zn);
    let 's2 = MOD(s1 + 1, 32);
    match VL {
      128 => {
          execute_SPLICE_Z_P_ZZ_Con(128, dst, esize, s1, s2, v)
      },
      256 => {
          execute_SPLICE_Z_P_ZZ_Con(256, dst, esize, s1, s2, v)
      },
      512 => {
          execute_SPLICE_Z_P_ZZ_Con(512, dst, esize, s1, s2, v)
      },
      1024 => {
          execute_SPLICE_Z_P_ZZ_Con(1024, dst, esize, s1, s2, v)
      },
      2048 => {
          execute_SPLICE_Z_P_ZZ_Con(2048, dst, esize, s1, s2, v)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1435) = {
    SEE = 1435;
    let size = Slice(__opcode, 22, 2);
    let Pv = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SPLICE_Z_P_ZZ_Con(size, Pv, Zn, Zd)
}

val execute_EXT_Z_ZI_Des : forall 'VL 'dst 'esize 'position 's1 's2,
  (0 <= 's2 & 's2 <= 31 & 0 <= 's1 & 's1 <= 31 & 0 <= 'position & 'position <= 255 & 'esize == 8 & 0 <= 'dst & 'dst <= 31 & is_VL('VL)).
  (int('VL), int('dst), int('esize), int('position), int('s1), int('s2)) -> unit

function execute_EXT_Z_ZI_Des (VL, dst, esize, position__arg, s1, s2) = {
    position : int = position__arg;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(s1, VL);
    let operand2 : bits('VL) = Z_read(s2, VL);
    if position >= elements then {
        position = 0
    };
    let 'position = (position << 3);
    let concat : bits('VL * 2) = operand2 @ operand1;
    assert(constraint((0 <= 'position & 'position + 'VL - 1 < 'VL * 2)));
    let result : bits('VL) = concat[position + VL - 1 .. position];
    Z_set(dst, VL) = result
}

val decode_EXT_Z_ZI_Des : (bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_EXT_Z_ZI_Des (imm8h, imm8l, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dst = UInt(Zdn);
    let 's1 = dst;
    let 's2 = UInt(Zm);
    let 'position = UInt(imm8h @ imm8l);
    match VL {
      128 => {
          execute_EXT_Z_ZI_Des(128, dst, esize, position, s1, s2)
      },
      256 => {
          execute_EXT_Z_ZI_Des(256, dst, esize, position, s1, s2)
      },
      512 => {
          execute_EXT_Z_ZI_Des(512, dst, esize, position, s1, s2)
      },
      1024 => {
          execute_EXT_Z_ZI_Des(1024, dst, esize, position, s1, s2)
      },
      2048 => {
          execute_EXT_Z_ZI_Des(2048, dst, esize, position, s1, s2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1436) = {
    SEE = 1436;
    let imm8h = Slice(__opcode, 16, 5);
    let imm8l = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_EXT_Z_ZI_Des(imm8h, imm8l, Zm, Zdn)
}

val execute_EXT_Z_ZI_Con : forall 'VL 'dst 'esize 'position 's1 's2,
  (0 <= 's1 & 's1 <= 31 & 0 <= 'position & 'position <= 255 & 'esize == 8 & 0 <= 'dst & 'dst <= 31 & is_VL('VL)).
  (int('VL), int('dst), int('esize), int('position), int('s1), int('s2)) -> unit

function execute_EXT_Z_ZI_Con (VL, dst, esize, position__arg, s1, s2) = {
    position : int = position__arg;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(s1, VL);
    let operand2 : bits('VL) = Z_read(s2, VL);
    if position >= elements then {
        position = 0
    };
    let 'position = (position << 3);
    let concat : bits('VL * 2) = operand2 @ operand1;
    assert(constraint((0 <= 'position & 'position + 'VL - 1 < 'VL * 2)));
    let result : bits('VL) = concat[position + VL - 1 .. position];
    Z_set(dst, VL) = result
}

val decode_EXT_Z_ZI_Con : (bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_EXT_Z_ZI_Con (imm8h, imm8l, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'dst = UInt(Zd);
    let 's1 = UInt(Zn);
    let 's2 = MOD(s1 + 1, 32);
    let 'position = UInt(imm8h @ imm8l);
    match VL {
      128 => {
          execute_EXT_Z_ZI_Con(128, dst, esize, position, s1, s2)
      },
      256 => {
          execute_EXT_Z_ZI_Con(256, dst, esize, position, s1, s2)
      },
      512 => {
          execute_EXT_Z_ZI_Con(512, dst, esize, position, s1, s2)
      },
      1024 => {
          execute_EXT_Z_ZI_Con(1024, dst, esize, position, s1, s2)
      },
      2048 => {
          execute_EXT_Z_ZI_Con(2048, dst, esize, position, s1, s2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1437) = {
    SEE = 1437;
    let imm8h = Slice(__opcode, 16, 5);
    let imm8l = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_EXT_Z_ZI_Con(imm8h, imm8l, Zn, Zd)
}

val execute_CPY_Z_P_R__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_CPY_Z_P_R__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = Z_read(d, VL);
    if AnyActiveElement(mask, esize) then {
        operand1 : bits(64) = undefined;
        if n == 31 then {
            operand1 = SP_read()
        } else {
            operand1 = X_read(n, 64)
        };
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                result = Elem_set(result, e, esize, operand1[esize - 1 .. 0])
            };
            ()
        }
    };
    Z_set(d, VL) = result
}

val decode_CPY_Z_P_R__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_CPY_Z_P_R__ (size, Pg, Rn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_CPY_Z_P_R__(128, d, esize, g, n)
      },
      256 => {
          execute_CPY_Z_P_R__(256, d, esize, g, n)
      },
      512 => {
          execute_CPY_Z_P_R__(512, d, esize, g, n)
      },
      1024 => {
          execute_CPY_Z_P_R__(1024, d, esize, g, n)
      },
      2048 => {
          execute_CPY_Z_P_R__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1438) = {
    SEE = 1438;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_CPY_Z_P_R__(size, Pg, Rn, Zd)
}

val execute_CPY_Z_P_V__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_CPY_Z_P_V__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('esize) = if AnyActiveElement(mask, esize) then
      V_read(n, esize)
    else
      Zeros(esize);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, operand1)
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_CPY_Z_P_V__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_CPY_Z_P_V__ (size, Pg, Vn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Vn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_CPY_Z_P_V__(128, d, esize, g, n)
      },
      256 => {
          execute_CPY_Z_P_V__(256, d, esize, g, n)
      },
      512 => {
          execute_CPY_Z_P_V__(512, d, esize, g, n)
      },
      1024 => {
          execute_CPY_Z_P_V__(1024, d, esize, g, n)
      },
      2048 => {
          execute_CPY_Z_P_V__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1439) = {
    SEE = 1439;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Vn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_CPY_Z_P_V__(size, Pg, Vn, Zd)
}

val execute_DUP_Z_Zi__ : forall 'VL 'd 'esize 'index 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'index & 'index <= 63 & 'esize in {8, 16, 32, 64, 128} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('n)) -> unit

function execute_DUP_Z_Zi__ (VL, d, esize, index, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    element : bits('esize) = undefined;
    if index >= elements then {
        element = Zeros(esize)
    } else {
        element = Elem_read(operand1, index, esize)
    };
    let result : bits('VL) = Replicate(element, DIV(VL, esize));
    Z_set(d, VL) = result
}

val decode_DUP_Z_Zi__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_DUP_Z_Zi__ (imm2, tsz, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let imm : bits(7) = imm2 @ tsz;
    esize : {8, 16, 32, 64, 128} = 8;
    index : range(0, 63) = undefined;
    match tsz {
      0b00000 => {
          throw(Error_Undefined())
      },
      0b10000 => {
          esize = 128;
          index = UInt(imm[6 .. 5])
      },
      [_, bitone, bitzero, bitzero, bitzero] => {
          esize = 64;
          index = UInt(imm[6 .. 4])
      },
      [_, _, bitone, bitzero, bitzero] => {
          esize = 32;
          index = UInt(imm[6 .. 3])
      },
      [_, _, _, bitone, bitzero] => {
          esize = 16;
          index = UInt(imm[6 .. 2])
      },
      [_, _, _, _, bitone] => {
          esize = 8;
          index = UInt(imm[6 .. 1])
      }
    };
    let 'index = index;
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_DUP_Z_Zi__(128, d, esize, index, n)
      },
      256 => {
          execute_DUP_Z_Zi__(256, d, esize, index, n)
      },
      512 => {
          execute_DUP_Z_Zi__(512, d, esize, index, n)
      },
      1024 => {
          execute_DUP_Z_Zi__(1024, d, esize, index, n)
      },
      2048 => {
          execute_DUP_Z_Zi__(2048, d, esize, index, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1440) = {
    SEE = 1440;
    let imm2 = Slice(__opcode, 22, 2);
    let tsz = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_DUP_Z_Zi__(imm2, tsz, Zn, Zd)
}

val execute_DUP_Z_R__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_DUP_Z_R__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'PL = DIV(VL, 8);
    operand : bits(64) = undefined;
    if n == 31 then {
        operand = SP_read()
    } else {
        operand = X_read(n, 64)
    };
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, operand[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_DUP_Z_R__ : (bits(2), bits(5), bits(5)) -> unit

function decode_DUP_Z_R__ (size, Rn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Rn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_DUP_Z_R__(128, d, esize, n)
      },
      256 => {
          execute_DUP_Z_R__(256, d, esize, n)
      },
      512 => {
          execute_DUP_Z_R__(512, d, esize, n)
      },
      1024 => {
          execute_DUP_Z_R__(1024, d, esize, n)
      },
      2048 => {
          execute_DUP_Z_R__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1441) = {
    SEE = 1441;
    let size = Slice(__opcode, 22, 2);
    let Rn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_DUP_Z_R__(size, Rn, Zd)
}

val execute_LASTA_R_P_Z__ : forall 'VL 'd 'esize 'g ('isBefore : Bool) 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('isBefore), int('n), int('rsize)) -> unit

function execute_LASTA_R_P_Z__ (VL, d, esize, g, isBefore, n, rsize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    last : int = LastActiveElement(mask, esize);
    if isBefore then {
        if last < 0 then {
            last = elements - 1
        };
        ()
    } else {
        last = last + 1;
        if last >= elements then {
            last = 0
        };
        ()
    };
    let 'last = last;
    assert(constraint('rsize >= 'esize));
    let result : bits('rsize) = ZeroExtend(Elem_read(operand, last, esize), rsize);
    X_set(d, rsize) = result
}

val decode_LASTA_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LASTA_R_P_Z__ (size, B, Pg, Zn, Rd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = if esize < 64 then 32 else 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Rd);
    let isBefore : bool = false;
    match VL {
      128 => {
          execute_LASTA_R_P_Z__(128, d, esize, g, isBefore, n, rsize)
      },
      256 => {
          execute_LASTA_R_P_Z__(256, d, esize, g, isBefore, n, rsize)
      },
      512 => {
          execute_LASTA_R_P_Z__(512, d, esize, g, isBefore, n, rsize)
      },
      1024 => {
          execute_LASTA_R_P_Z__(1024, d, esize, g, isBefore, n, rsize)
      },
      2048 => {
          execute_LASTA_R_P_Z__(2048, d, esize, g, isBefore, n, rsize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1442) = {
    SEE = 1442;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Rd = Slice(__opcode, 0, 5);
    decode_LASTA_R_P_Z__(size, B, Pg, Zn, Rd)
}

val execute_LASTB_R_P_Z__ : forall 'VL 'd 'esize 'g ('isBefore : Bool) 'n 'rsize,
  ('rsize in {32, 64} & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('isBefore), int('n), int('rsize)) -> unit

function execute_LASTB_R_P_Z__ (VL, d, esize, g, isBefore, n, rsize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    last : int = LastActiveElement(mask, esize);
    if isBefore then {
        if last < 0 then {
            last = elements - 1
        };
        ()
    } else {
        last = last + 1;
        if last >= elements then {
            last = 0
        };
        ()
    };
    let 'last = last;
    assert(constraint('rsize >= 'esize));
    let result : bits('rsize) = ZeroExtend(Elem_read(operand, last, esize), rsize);
    X_set(d, rsize) = result
}

val decode_LASTB_R_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LASTB_R_P_Z__ (size, B, Pg, Zn, Rd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = if esize < 64 then 32 else 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Rd);
    let isBefore : bool = true;
    match VL {
      128 => {
          execute_LASTB_R_P_Z__(128, d, esize, g, isBefore, n, rsize)
      },
      256 => {
          execute_LASTB_R_P_Z__(256, d, esize, g, isBefore, n, rsize)
      },
      512 => {
          execute_LASTB_R_P_Z__(512, d, esize, g, isBefore, n, rsize)
      },
      1024 => {
          execute_LASTB_R_P_Z__(1024, d, esize, g, isBefore, n, rsize)
      },
      2048 => {
          execute_LASTB_R_P_Z__(2048, d, esize, g, isBefore, n, rsize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1443) = {
    SEE = 1443;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Rd = Slice(__opcode, 0, 5);
    decode_LASTB_R_P_Z__(size, B, Pg, Zn, Rd)
}

val execute_LASTA_V_P_Z__ : forall 'VL 'd 'esize 'g ('isBefore : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('isBefore), int('n)) -> unit

function execute_LASTA_V_P_Z__ (VL, d, esize, g, isBefore, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    last : int = LastActiveElement(mask, esize);
    if isBefore then {
        if last < 0 then {
            last = elements - 1
        };
        ()
    } else {
        last = last + 1;
        if last >= elements then {
            last = 0
        };
        ()
    };
    let 'last = last;
    V_set(d, esize) = Elem_read(operand, last, esize)
}

val decode_LASTA_V_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LASTA_V_P_Z__ (size, B, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let isBefore : bool = false;
    match VL {
      128 => {
          execute_LASTA_V_P_Z__(128, d, esize, g, isBefore, n)
      },
      256 => {
          execute_LASTA_V_P_Z__(256, d, esize, g, isBefore, n)
      },
      512 => {
          execute_LASTA_V_P_Z__(512, d, esize, g, isBefore, n)
      },
      1024 => {
          execute_LASTA_V_P_Z__(1024, d, esize, g, isBefore, n)
      },
      2048 => {
          execute_LASTA_V_P_Z__(2048, d, esize, g, isBefore, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1444) = {
    SEE = 1444;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_LASTA_V_P_Z__(size, B, Pg, Zn, Vd)
}

val execute_LASTB_V_P_Z__ : forall 'VL 'd 'esize 'g ('isBefore : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('isBefore), int('n)) -> unit

function execute_LASTB_V_P_Z__ (VL, d, esize, g, isBefore, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = Z_read(n, VL);
    last : int = LastActiveElement(mask, esize);
    if isBefore then {
        if last < 0 then {
            last = elements - 1
        };
        ()
    } else {
        last = last + 1;
        if last >= elements then {
            last = 0
        };
        ()
    };
    let 'last = last;
    V_set(d, esize) = Elem_read(operand, last, esize)
}

val decode_LASTB_V_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LASTB_V_P_Z__ (size, B, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let isBefore : bool = true;
    match VL {
      128 => {
          execute_LASTB_V_P_Z__(128, d, esize, g, isBefore, n)
      },
      256 => {
          execute_LASTB_V_P_Z__(256, d, esize, g, isBefore, n)
      },
      512 => {
          execute_LASTB_V_P_Z__(512, d, esize, g, isBefore, n)
      },
      1024 => {
          execute_LASTB_V_P_Z__(1024, d, esize, g, isBefore, n)
      },
      2048 => {
          execute_LASTB_V_P_Z__(2048, d, esize, g, isBefore, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1445) = {
    SEE = 1445;
    let size = Slice(__opcode, 22, 2);
    let B = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_LASTB_V_P_Z__(size, B, Pg, Zn, Vd)
}

val execute_PUNPKLO_P_P__ : forall 'VL 'd 'esize ('hi : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 'esize == 16 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('hi), int('n)) -> unit

function execute_PUNPKLO_P_P__ (VL, d, esize, hi, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('PL) = P_read(n, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let pbit : bits(1) = PredicateElement(operand, if hi then e + elements
        else
          e, DIV(esize, 2));
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
    };
    P_set(d, PL) = result
}

val decode_PUNPKLO_P_P__ : (bits(1), bits(4), bits(4)) -> unit

function decode_PUNPKLO_P_P__ (H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Pn);
    let 'd = UInt(Pd);
    let hi : bool = false;
    match VL {
      128 => {
          execute_PUNPKLO_P_P__(128, d, esize, hi, n)
      },
      256 => {
          execute_PUNPKLO_P_P__(256, d, esize, hi, n)
      },
      512 => {
          execute_PUNPKLO_P_P__(512, d, esize, hi, n)
      },
      1024 => {
          execute_PUNPKLO_P_P__(1024, d, esize, hi, n)
      },
      2048 => {
          execute_PUNPKLO_P_P__(2048, d, esize, hi, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1446) = {
    SEE = 1446;
    let H = Slice(__opcode, 16, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_PUNPKLO_P_P__(H, Pn, Pd)
}

val execute_PUNPKHI_P_P__ : forall 'VL 'd 'esize ('hi : Bool) 'n,
  (0 <= 'n & 'n <= 15 & 'esize == 16 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('hi), int('n)) -> unit

function execute_PUNPKHI_P_P__ (VL, d, esize, hi, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('PL) = P_read(n, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let pbit : bits(1) = PredicateElement(operand, if hi then e + elements
        else
          e, DIV(esize, 2));
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
    };
    P_set(d, PL) = result
}

val decode_PUNPKHI_P_P__ : (bits(1), bits(4), bits(4)) -> unit

function decode_PUNPKHI_P_P__ (H, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Pn);
    let 'd = UInt(Pd);
    let hi : bool = true;
    match VL {
      128 => {
          execute_PUNPKHI_P_P__(128, d, esize, hi, n)
      },
      256 => {
          execute_PUNPKHI_P_P__(256, d, esize, hi, n)
      },
      512 => {
          execute_PUNPKHI_P_P__(512, d, esize, hi, n)
      },
      1024 => {
          execute_PUNPKHI_P_P__(1024, d, esize, hi, n)
      },
      2048 => {
          execute_PUNPKHI_P_P__(2048, d, esize, hi, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1447) = {
    SEE = 1447;
    let H = Slice(__opcode, 16, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_PUNPKHI_P_P__(H, Pn, Pd)
}

val execute_REVW_Z_Z__ : forall 'VL 'd 'esize 'g 'n 'swsize,
  ('swsize == 32 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('swsize)) -> unit

function execute_REVW_Z_Z__ (VL, d, esize, g, n, swsize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, Reverse(element, swsize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_REVW_Z_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_REVW_Z_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size != 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'swsize = 32;
    match VL {
      128 => {
          execute_REVW_Z_Z__(128, d, esize, g, n, swsize)
      },
      256 => {
          execute_REVW_Z_Z__(256, d, esize, g, n, swsize)
      },
      512 => {
          execute_REVW_Z_Z__(512, d, esize, g, n, swsize)
      },
      1024 => {
          execute_REVW_Z_Z__(1024, d, esize, g, n, swsize)
      },
      2048 => {
          execute_REVW_Z_Z__(2048, d, esize, g, n, swsize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1448) = {
    SEE = 1448;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_REVW_Z_Z__(size, Pg, Zn, Zd)
}

val execute_REVH_Z_Z__ : forall 'VL 'd 'esize 'g 'n 'swsize,
  ('swsize == 16 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('swsize)) -> unit

function execute_REVH_Z_Z__ (VL, d, esize, g, n, swsize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, Reverse(element, swsize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_REVH_Z_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_REVH_Z_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'swsize = 16;
    match VL {
      128 => {
          execute_REVH_Z_Z__(128, d, esize, g, n, swsize)
      },
      256 => {
          execute_REVH_Z_Z__(256, d, esize, g, n, swsize)
      },
      512 => {
          execute_REVH_Z_Z__(512, d, esize, g, n, swsize)
      },
      1024 => {
          execute_REVH_Z_Z__(1024, d, esize, g, n, swsize)
      },
      2048 => {
          execute_REVH_Z_Z__(2048, d, esize, g, n, swsize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1449) = {
    SEE = 1449;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_REVH_Z_Z__(size, Pg, Zn, Zd)
}

val execute_REVB_Z_Z__ : forall 'VL 'd 'esize 'g 'n 'swsize,
  ('swsize == 8 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('swsize)) -> unit

function execute_REVB_Z_Z__ (VL, d, esize, g, n, swsize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, Reverse(element, swsize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_REVB_Z_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_REVB_Z_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'swsize = 8;
    match VL {
      128 => {
          execute_REVB_Z_Z__(128, d, esize, g, n, swsize)
      },
      256 => {
          execute_REVB_Z_Z__(256, d, esize, g, n, swsize)
      },
      512 => {
          execute_REVB_Z_Z__(512, d, esize, g, n, swsize)
      },
      1024 => {
          execute_REVB_Z_Z__(1024, d, esize, g, n, swsize)
      },
      2048 => {
          execute_REVB_Z_Z__(2048, d, esize, g, n, swsize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1450) = {
    SEE = 1450;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_REVB_Z_Z__(size, Pg, Zn, Zd)
}

val execute_UUNPKLO_Z_Z__ : forall 'VL 'd 'esize ('hi : Bool) ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('hi), int('n), bool('is_unsigned)) -> unit

function execute_UUNPKLO_Z_Z__ (VL, d, esize, hi, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('hsize) = if hi then
          Elem_read(operand, e + elements, hsize)
        else
          Elem_read(operand, e, hsize);
        result = Elem_set(result, e, esize, Extend(element, esize, is_unsigned))
    };
    Z_set(d, VL) = result
}

val decode_UUNPKLO_Z_Z__ : (bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UUNPKLO_Z_Z__ (size, U, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    let hi : bool = false;
    match VL {
      128 => {
          execute_UUNPKLO_Z_Z__(128, d, esize, hi, n, is_unsigned)
      },
      256 => {
          execute_UUNPKLO_Z_Z__(256, d, esize, hi, n, is_unsigned)
      },
      512 => {
          execute_UUNPKLO_Z_Z__(512, d, esize, hi, n, is_unsigned)
      },
      1024 => {
          execute_UUNPKLO_Z_Z__(1024, d, esize, hi, n, is_unsigned)
      },
      2048 => {
          execute_UUNPKLO_Z_Z__(2048, d, esize, hi, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1451) = {
    SEE = 1451;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 17, 1);
    let H = Slice(__opcode, 16, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UUNPKLO_Z_Z__(size, U, H, Zn, Zd)
}

val execute_UUNPKHI_Z_Z__ : forall 'VL 'd 'esize ('hi : Bool) ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('hi), int('n), bool('is_unsigned)) -> unit

function execute_UUNPKHI_Z_Z__ (VL, d, esize, hi, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('hsize) = if hi then
          Elem_read(operand, e + elements, hsize)
        else
          Elem_read(operand, e, hsize);
        result = Elem_set(result, e, esize, Extend(element, esize, is_unsigned))
    };
    Z_set(d, VL) = result
}

val decode_UUNPKHI_Z_Z__ : (bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UUNPKHI_Z_Z__ (size, U, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    let hi : bool = true;
    match VL {
      128 => {
          execute_UUNPKHI_Z_Z__(128, d, esize, hi, n, is_unsigned)
      },
      256 => {
          execute_UUNPKHI_Z_Z__(256, d, esize, hi, n, is_unsigned)
      },
      512 => {
          execute_UUNPKHI_Z_Z__(512, d, esize, hi, n, is_unsigned)
      },
      1024 => {
          execute_UUNPKHI_Z_Z__(1024, d, esize, hi, n, is_unsigned)
      },
      2048 => {
          execute_UUNPKHI_Z_Z__(2048, d, esize, hi, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1452) = {
    SEE = 1452;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 17, 1);
    let H = Slice(__opcode, 16, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UUNPKHI_Z_Z__(size, U, H, Zn, Zd)
}

val execute_SUNPKLO_Z_Z__ : forall 'VL 'd 'esize ('hi : Bool) ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('hi), int('n), bool('is_unsigned)) -> unit

function execute_SUNPKLO_Z_Z__ (VL, d, esize, hi, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('hsize) = if hi then
          Elem_read(operand, e + elements, hsize)
        else
          Elem_read(operand, e, hsize);
        result = Elem_set(result, e, esize, Extend(element, esize, is_unsigned))
    };
    Z_set(d, VL) = result
}

val decode_SUNPKLO_Z_Z__ : (bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SUNPKLO_Z_Z__ (size, U, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    let hi : bool = false;
    match VL {
      128 => {
          execute_SUNPKLO_Z_Z__(128, d, esize, hi, n, is_unsigned)
      },
      256 => {
          execute_SUNPKLO_Z_Z__(256, d, esize, hi, n, is_unsigned)
      },
      512 => {
          execute_SUNPKLO_Z_Z__(512, d, esize, hi, n, is_unsigned)
      },
      1024 => {
          execute_SUNPKLO_Z_Z__(1024, d, esize, hi, n, is_unsigned)
      },
      2048 => {
          execute_SUNPKLO_Z_Z__(2048, d, esize, hi, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1453) = {
    SEE = 1453;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 17, 1);
    let H = Slice(__opcode, 16, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SUNPKLO_Z_Z__(size, U, H, Zn, Zd)
}

val execute_SUNPKHI_Z_Z__ : forall 'VL 'd 'esize ('hi : Bool) ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('hi), int('n), bool('is_unsigned)) -> unit

function execute_SUNPKHI_Z_Z__ (VL, d, esize, hi, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'hsize = DIV(esize, 2);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('hsize) = if hi then
          Elem_read(operand, e + elements, hsize)
        else
          Elem_read(operand, e, hsize);
        result = Elem_set(result, e, esize, Extend(element, esize, is_unsigned))
    };
    Z_set(d, VL) = result
}

val decode_SUNPKHI_Z_Z__ : (bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SUNPKHI_Z_Z__ (size, U, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    let hi : bool = true;
    match VL {
      128 => {
          execute_SUNPKHI_Z_Z__(128, d, esize, hi, n, is_unsigned)
      },
      256 => {
          execute_SUNPKHI_Z_Z__(256, d, esize, hi, n, is_unsigned)
      },
      512 => {
          execute_SUNPKHI_Z_Z__(512, d, esize, hi, n, is_unsigned)
      },
      1024 => {
          execute_SUNPKHI_Z_Z__(1024, d, esize, hi, n, is_unsigned)
      },
      2048 => {
          execute_SUNPKHI_Z_Z__(2048, d, esize, hi, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1454) = {
    SEE = 1454;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 17, 1);
    let H = Slice(__opcode, 16, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SUNPKHI_Z_Z__(size, U, H, Zn, Zd)
}

val execute_SETFFR_F__ : forall 'VL, is_VL('VL). int('VL) -> unit

function execute_SETFFR_F__ VL = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    FFR_set(PL) = Ones(PL)
}

val decode_SETFFR_F__ : unit -> unit

function decode_SETFFR_F__ () = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    match VL {
      128 => {
          execute_SETFFR_F__(128)
      },
      256 => {
          execute_SETFFR_F__(256)
      },
      512 => {
          execute_SETFFR_F__(512)
      },
      1024 => {
          execute_SETFFR_F__(1024)
      },
      2048 => {
          execute_SETFFR_F__(2048)
      }
    }
}

function clause __DecodeA64_SVE ((pc, (0b00100101001011001001000000000000 as __opcode)) if SEE < 1455) = {
    SEE = 1455;
    decode_SETFFR_F__()
}

val execute_PTRUE_P_S__ : forall 'VL 'd 'esize ('setflags : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bits(5), bool('setflags)) -> unit

function execute_PTRUE_P_S__ (VL, d, esize, pat, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let pbit : bits(1) = if e < count then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(result, result, esize)
    };
    P_set(d, PL) = result
}

val decode_PTRUE_P_S__ : (bits(2), bits(1), bits(5), bits(4)) -> unit

function decode_PTRUE_P_S__ (size, S, pattern, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'd = UInt(Pd);
    let setflags : bool = false;
    let pat : bits(5) = pattern;
    match VL {
      128 => {
          execute_PTRUE_P_S__(128, d, esize, pat, setflags)
      },
      256 => {
          execute_PTRUE_P_S__(256, d, esize, pat, setflags)
      },
      512 => {
          execute_PTRUE_P_S__(512, d, esize, pat, setflags)
      },
      1024 => {
          execute_PTRUE_P_S__(1024, d, esize, pat, setflags)
      },
      2048 => {
          execute_PTRUE_P_S__(2048, d, esize, pat, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1456) = {
    SEE = 1456;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 16, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_PTRUE_P_S__(size, S, pattern, Pd)
}

val execute_PTRUES_P_S__ : forall 'VL 'd 'esize ('setflags : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bits(5), bool('setflags)) -> unit

function execute_PTRUES_P_S__ (VL, d, esize, pat, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'count = DecodePredCount(pat, esize);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let pbit : bits(1) = if e < count then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(result, result, esize)
    };
    P_set(d, PL) = result
}

val decode_PTRUES_P_S__ : (bits(2), bits(1), bits(5), bits(4)) -> unit

function decode_PTRUES_P_S__ (size, S, pattern, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'd = UInt(Pd);
    let setflags : bool = true;
    let pat : bits(5) = pattern;
    match VL {
      128 => {
          execute_PTRUES_P_S__(128, d, esize, pat, setflags)
      },
      256 => {
          execute_PTRUES_P_S__(256, d, esize, pat, setflags)
      },
      512 => {
          execute_PTRUES_P_S__(512, d, esize, pat, setflags)
      },
      1024 => {
          execute_PTRUES_P_S__(1024, d, esize, pat, setflags)
      },
      2048 => {
          execute_PTRUES_P_S__(2048, d, esize, pat, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1457) = {
    SEE = 1457;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 16, 1);
    let pattern = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_PTRUES_P_S__(size, S, pattern, Pd)
}

val execute_PFALSE_P__ : forall 'VL 'd,
  (0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d)) -> unit

function execute_PFALSE_P__ (VL, d) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    P_set(d, PL) = Zeros(PL)
}

val decode_PFALSE_P__ : (bits(1), bits(4)) -> unit

function decode_PFALSE_P__ (S, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(Pd);
    match VL {
      128 => {
          execute_PFALSE_P__(128, d)
      },
      256 => {
          execute_PFALSE_P__(256, d)
      },
      512 => {
          execute_PFALSE_P__(512, d)
      },
      1024 => {
          execute_PFALSE_P__(1024, d)
      },
      2048 => {
          execute_PFALSE_P__(2048, d)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 1458) = {
    SEE = 1458;
    let S = Slice(__opcode, 22, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_PFALSE_P__(S, Pd)
}

val execute_RDFFR_P_F__ : forall 'VL 'd,
  (0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d)) -> unit

function execute_RDFFR_P_F__ (VL, d) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let ffr : bits('PL) = FFR_read(PL);
    P_set(d, PL) = ffr
}

val decode_RDFFR_P_F__ : (bits(1), bits(4)) -> unit

function decode_RDFFR_P_F__ (S, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(Pd);
    match VL {
      128 => {
          execute_RDFFR_P_F__(128, d)
      },
      256 => {
          execute_RDFFR_P_F__(256, d)
      },
      512 => {
          execute_RDFFR_P_F__(512, d)
      },
      1024 => {
          execute_RDFFR_P_F__(1024, d)
      },
      2048 => {
          execute_RDFFR_P_F__(2048, d)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _] as __opcode)) if SEE < 1459) = {
    SEE = 1459;
    let S = Slice(__opcode, 22, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_RDFFR_P_F__(S, Pd)
}

val execute_WRFFR_F_P__ : forall 'VL 'n,
  (0 <= 'n & 'n <= 15 & is_VL('VL)).
  (int('VL), int('n)) -> unit

function execute_WRFFR_F_P__ (VL, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let operand : bits('PL) = P_read(n, PL);
    let 'hsb = HighestSetBit(operand);
    if hsb < 0 | is_ones_subrange(operand, hsb, 0) then {
        FFR_set(PL) = operand
    } else {
        FFR_set(PL) = __UNKNOWN_bits(PL)
    }
}

val decode_WRFFR_F_P__ : bits(4) -> unit

function decode_WRFFR_F_P__ Pn = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Pn);
    match VL {
      128 => {
          execute_WRFFR_F_P__(128, n)
      },
      256 => {
          execute_WRFFR_F_P__(256, n)
      },
      512 => {
          execute_WRFFR_F_P__(512, n)
      },
      1024 => {
          execute_WRFFR_F_P__(1024, n)
      },
      2048 => {
          execute_WRFFR_F_P__(2048, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 1460) = {
    SEE = 1460;
    let Pn = Slice(__opcode, 5, 4);
    decode_WRFFR_F_P__(Pn)
}

val execute_RDFFR_P_P_F__ : forall 'VL 'd 'g ('setflags : Bool),
  (0 <= 'g & 'g <= 15 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('g), bool('setflags)) -> unit

function execute_RDFFR_P_P_F__ (VL, d, g, setflags) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let ffr : bits('PL) = FFR_read(PL);
    let result : bits('PL) = ffr & mask;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, 8)
    };
    P_set(d, PL) = result
}

val decode_RDFFR_P_P_F__ : (bits(1), bits(4), bits(4)) -> unit

function decode_RDFFR_P_P_F__ (S, Pg, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_RDFFR_P_P_F__(128, d, g, setflags)
      },
      256 => {
          execute_RDFFR_P_P_F__(256, d, g, setflags)
      },
      512 => {
          execute_RDFFR_P_P_F__(512, d, g, setflags)
      },
      1024 => {
          execute_RDFFR_P_P_F__(1024, d, g, setflags)
      },
      2048 => {
          execute_RDFFR_P_P_F__(2048, d, g, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1461) = {
    SEE = 1461;
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_RDFFR_P_P_F__(S, Pg, Pd)
}

val execute_RDFFRS_P_P_F__ : forall 'VL 'd 'g ('setflags : Bool),
  (0 <= 'g & 'g <= 15 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('g), bool('setflags)) -> unit

function execute_RDFFRS_P_P_F__ (VL, d, g, setflags) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let ffr : bits('PL) = FFR_read(PL);
    let result : bits('PL) = ffr & mask;
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, 8)
    };
    P_set(d, PL) = result
}

val decode_RDFFRS_P_P_F__ : (bits(1), bits(4), bits(4)) -> unit

function decode_RDFFRS_P_P_F__ (S, Pg, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_RDFFRS_P_P_F__(128, d, g, setflags)
      },
      256 => {
          execute_RDFFRS_P_P_F__(256, d, g, setflags)
      },
      512 => {
          execute_RDFFRS_P_P_F__(512, d, g, setflags)
      },
      1024 => {
          execute_RDFFRS_P_P_F__(1024, d, g, setflags)
      },
      2048 => {
          execute_RDFFRS_P_P_F__(2048, d, g, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1462) = {
    SEE = 1462;
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_RDFFRS_P_P_F__(S, Pg, Pd)
}

val execute_PTEST__P_P__ : forall 'VL 'esize 'g 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n)) -> unit

function execute_PTEST__P_P__ (VL, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let result : bits('PL) = P_read(n, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
}

val decode_PTEST__P_P__ : (bits(1), bits(4), bits(4)) -> unit

function decode_PTEST__P_P__ (S, Pg, Pn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    match VL {
      128 => {
          execute_PTEST__P_P__(128, esize, g, n)
      },
      256 => {
          execute_PTEST__P_P__(256, esize, g, n)
      },
      512 => {
          execute_PTEST__P_P__(512, esize, g, n)
      },
      1024 => {
          execute_PTEST__P_P__(1024, esize, g, n)
      },
      2048 => {
          execute_PTEST__P_P__(2048, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero] as __opcode)) if SEE < 1463) = {
    SEE = 1463;
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    decode_PTEST__P_P__(S, Pg, Pn)
}

val execute_BRKA_P_P_P__ : forall 'VL 'd 'esize 'g ('merging : Bool) 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('merging), int('n), bool('setflags)) -> unit

function execute_BRKA_P_P_P__ (VL, d, esize, g, merging, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(d, PL);
    break : bool = false;
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bool = ActivePredicateElement(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let pbit : bits(1) = if not_bool(break) then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
            break = break | element
        } else if merging then {
            let pbit : bits(1) = PredicateElement(operand2, e, esize);
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKA_P_P_P__ : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKA_P_P_P__ (B, S, Pg, Pn, M, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'd = UInt(Pd);
    let merging : bool = M == 0b1;
    let setflags : bool = false;
    match VL {
      128 => {
          execute_BRKA_P_P_P__(128, d, esize, g, merging, n, setflags)
      },
      256 => {
          execute_BRKA_P_P_P__(256, d, esize, g, merging, n, setflags)
      },
      512 => {
          execute_BRKA_P_P_P__(512, d, esize, g, merging, n, setflags)
      },
      1024 => {
          execute_BRKA_P_P_P__(1024, d, esize, g, merging, n, setflags)
      },
      2048 => {
          execute_BRKA_P_P_P__(2048, d, esize, g, merging, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1464) = {
    SEE = 1464;
    let B = Slice(__opcode, 23, 1);
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let M = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKA_P_P_P__(B, S, Pg, Pn, M, Pd)
}

val execute_BRKAS_P_P_P_Z : forall 'VL 'd 'esize 'g ('merging : Bool) 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('merging), int('n), bool('setflags)) -> unit

function execute_BRKAS_P_P_P_Z (VL, d, esize, g, merging, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(d, PL);
    break : bool = false;
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bool = ActivePredicateElement(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            let pbit : bits(1) = if not_bool(break) then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
            break = break | element
        } else if merging then {
            let pbit : bits(1) = PredicateElement(operand2, e, esize);
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKAS_P_P_P_Z : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKAS_P_P_P_Z (B, S, Pg, Pn, M, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'd = UInt(Pd);
    let merging : bool = false;
    let setflags : bool = true;
    match VL {
      128 => {
          execute_BRKAS_P_P_P_Z(128, d, esize, g, merging, n, setflags)
      },
      256 => {
          execute_BRKAS_P_P_P_Z(256, d, esize, g, merging, n, setflags)
      },
      512 => {
          execute_BRKAS_P_P_P_Z(512, d, esize, g, merging, n, setflags)
      },
      1024 => {
          execute_BRKAS_P_P_P_Z(1024, d, esize, g, merging, n, setflags)
      },
      2048 => {
          execute_BRKAS_P_P_P_Z(2048, d, esize, g, merging, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1465) = {
    SEE = 1465;
    let B = Slice(__opcode, 23, 1);
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let M = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKAS_P_P_P_Z(B, S, Pg, Pn, M, Pd)
}

val execute_BRKB_P_P_P__ : forall 'VL 'd 'esize 'g ('merging : Bool) 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('merging), int('n), bool('setflags)) -> unit

function execute_BRKB_P_P_P__ (VL, d, esize, g, merging, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(d, PL);
    break : bool = false;
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bool = ActivePredicateElement(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            break = break | element;
            let pbit : bits(1) = if not_bool(break) then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else if merging then {
            let pbit : bits(1) = PredicateElement(operand2, e, esize);
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKB_P_P_P__ : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKB_P_P_P__ (B, S, Pg, Pn, M, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'd = UInt(Pd);
    let merging : bool = M == 0b1;
    let setflags : bool = false;
    match VL {
      128 => {
          execute_BRKB_P_P_P__(128, d, esize, g, merging, n, setflags)
      },
      256 => {
          execute_BRKB_P_P_P__(256, d, esize, g, merging, n, setflags)
      },
      512 => {
          execute_BRKB_P_P_P__(512, d, esize, g, merging, n, setflags)
      },
      1024 => {
          execute_BRKB_P_P_P__(1024, d, esize, g, merging, n, setflags)
      },
      2048 => {
          execute_BRKB_P_P_P__(2048, d, esize, g, merging, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1466) = {
    SEE = 1466;
    let B = Slice(__opcode, 23, 1);
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let M = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKB_P_P_P__(B, S, Pg, Pn, M, Pd)
}

val execute_BRKBS_P_P_P_Z : forall 'VL 'd 'esize 'g ('merging : Bool) 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), bool('merging), int('n), bool('setflags)) -> unit

function execute_BRKBS_P_P_P_Z (VL, d, esize, g, merging, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(d, PL);
    break : bool = false;
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bool = ActivePredicateElement(operand, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            break = break | element;
            let pbit : bits(1) = if not_bool(break) then 0b1 else 0b0;
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else if merging then {
            let pbit : bits(1) = PredicateElement(operand2, e, esize);
            result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKBS_P_P_P_Z : (bits(1), bits(1), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKBS_P_P_P_Z (B, S, Pg, Pn, M, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'd = UInt(Pd);
    let merging : bool = false;
    let setflags : bool = true;
    match VL {
      128 => {
          execute_BRKBS_P_P_P_Z(128, d, esize, g, merging, n, setflags)
      },
      256 => {
          execute_BRKBS_P_P_P_Z(256, d, esize, g, merging, n, setflags)
      },
      512 => {
          execute_BRKBS_P_P_P_Z(512, d, esize, g, merging, n, setflags)
      },
      1024 => {
          execute_BRKBS_P_P_P_Z(1024, d, esize, g, merging, n, setflags)
      },
      2048 => {
          execute_BRKBS_P_P_P_Z(2048, d, esize, g, merging, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1467) = {
    SEE = 1467;
    let B = Slice(__opcode, 23, 1);
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let M = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKBS_P_P_P_Z(B, S, Pg, Pn, M, Pd)
}

val execute_AND_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_AND_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 & element2, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_AND_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_AND_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_AND_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_AND_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_AND_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_AND_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_AND_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1468) = {
    SEE = 1468;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_AND_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_ANDS_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_ANDS_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 & element2, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_ANDS_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_ANDS_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_ANDS_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_ANDS_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_ANDS_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_ANDS_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_ANDS_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1469) = {
    SEE = 1469;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_ANDS_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_BIC_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_BIC_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 & not_vec(element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BIC_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_BIC_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_BIC_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_BIC_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_BIC_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_BIC_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_BIC_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1470) = {
    SEE = 1470;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_BIC_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_BICS_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_BICS_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 & not_vec(element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BICS_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_BICS_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_BICS_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_BICS_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_BICS_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_BICS_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_BICS_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1471) = {
    SEE = 1471;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_BICS_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_EOR_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_EOR_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(EOR(element1, element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_EOR_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_EOR_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_EOR_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_EOR_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_EOR_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_EOR_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_EOR_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1472) = {
    SEE = 1472;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_EOR_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_EORS_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_EORS_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(EOR(element1, element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_EORS_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_EORS_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_EORS_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_EORS_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_EORS_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_EORS_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_EORS_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1473) = {
    SEE = 1473;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_EORS_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_NAND_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_NAND_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(not_vec(element1 & element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_NAND_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_NAND_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_NAND_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_NAND_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_NAND_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_NAND_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_NAND_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1474) = {
    SEE = 1474;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_NAND_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_NANDS_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_NANDS_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(not_vec(element1 & element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_NANDS_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_NANDS_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_NANDS_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_NANDS_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_NANDS_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_NANDS_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_NANDS_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1475) = {
    SEE = 1475;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_NANDS_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_NOR_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_NOR_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(not_vec(element1 | element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_NOR_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_NOR_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_NOR_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_NOR_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_NOR_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_NOR_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_NOR_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1476) = {
    SEE = 1476;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_NOR_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_NORS_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_NORS_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(not_vec(element1 | element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_NORS_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_NORS_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_NORS_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_NORS_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_NORS_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_NORS_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_NORS_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1477) = {
    SEE = 1477;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_NORS_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_ORN_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_ORN_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 | not_vec(element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_ORN_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_ORN_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_ORN_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_ORN_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_ORN_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_ORN_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_ORN_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1478) = {
    SEE = 1478;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_ORN_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_ORNS_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_ORNS_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 | not_vec(element2), psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_ORNS_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_ORNS_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_ORNS_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_ORNS_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_ORNS_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_ORNS_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_ORNS_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1479) = {
    SEE = 1479;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_ORNS_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_ORR_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_ORR_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 | element2, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_ORR_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_ORR_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_ORR_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_ORR_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_ORR_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_ORR_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_ORR_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1480) = {
    SEE = 1480;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_ORR_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_ORRS_P_P_PP_Z : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_ORRS_P_P_PP_Z (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1 | element2, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_ORRS_P_P_PP_Z : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_ORRS_P_P_PP_Z (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_ORRS_P_P_PP_Z(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_ORRS_P_P_PP_Z(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_ORRS_P_P_PP_Z(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_ORRS_P_P_PP_Z(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_ORRS_P_P_PP_Z(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1481) = {
    SEE = 1481;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_ORRS_P_P_PP_Z(S, Pm, Pg, Pn, Pd)
}

val execute_SEL_P_P_PP__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n)) -> unit

function execute_SEL_P_P_PP__ (VL, d, esize, g, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(1) = PredicateElement(operand1, e, esize);
        let element2 : bits(1) = PredicateElement(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, psize, ZeroExtend(element1, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(element2, psize))
        }
    };
    P_set(d, PL) = result
}

val decode_SEL_P_P_PP__ : (bits(1), bits(4), bits(4), bits(4), bits(4)) -> unit

function decode_SEL_P_P_PP__ (S, Pm, Pg, Pn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    match VL {
      128 => {
          execute_SEL_P_P_PP__(128, d, esize, g, m, n)
      },
      256 => {
          execute_SEL_P_P_PP__(256, d, esize, g, m, n)
      },
      512 => {
          execute_SEL_P_P_PP__(512, d, esize, g, m, n)
      },
      1024 => {
          execute_SEL_P_P_PP__(1024, d, esize, g, m, n)
      },
      2048 => {
          execute_SEL_P_P_PP__(2048, d, esize, g, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitone, _, _, _, _, bitone, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1482) = {
    SEE = 1482;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_SEL_P_P_PP__(S, Pm, Pg, Pn, Pd)
}

val execute_PFIRST_P_P_P__ : forall 'VL 'dn 'esize 'g,
  (0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'dn & 'dn <= 15 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g)) -> unit

function execute_PFIRST_P_P_P__ (VL, dn, esize, g) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('PL) = P_read(dn, PL);
    first : int = negate(1);
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) & first == negate(1) then {
            first = e
        };
        ()
    };
    let 'first = first;
    if first >= 0 then {
        result = Elem_set(result, first, psize, ZeroExtend(0b1, psize))
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(dn, PL) = result
}

val decode_PFIRST_P_P_P__ : (bits(1), bits(4), bits(4)) -> unit

function decode_PFIRST_P_P_P__ (S, Pg, Pdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'dn = UInt(Pdn);
    match VL {
      128 => {
          execute_PFIRST_P_P_P__(128, dn, esize, g)
      },
      256 => {
          execute_PFIRST_P_P_P__(256, dn, esize, g)
      },
      512 => {
          execute_PFIRST_P_P_P__(512, dn, esize, g)
      },
      1024 => {
          execute_PFIRST_P_P_P__(1024, dn, esize, g)
      },
      2048 => {
          execute_PFIRST_P_P_P__(2048, dn, esize, g)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1483) = {
    SEE = 1483;
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 5, 4);
    let Pdn = Slice(__opcode, 0, 4);
    decode_PFIRST_P_P_P__(S, Pg, Pdn)
}

val execute_PNEXT_P_P_P__ : forall 'VL 'dn 'esize 'v,
  (0 <= 'v & 'v <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 15 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('v)) -> unit

function execute_PNEXT_P_P_P__ (VL, dn, esize, v) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(v, PL);
    let operand : bits('PL) = P_read(dn, PL);
    let 'psize = DIV(esize, 8);
    next : int = LastActiveElement(operand, esize) + 1;
    while next < elements & not_bool(ActivePredicateElement(mask, next, esize)) do {
        next = next + 1
    };
    let 'next = next;
    result : bits('PL) = Zeros(PL);
    if next < elements then {
        result = Elem_set(result, next, psize, ZeroExtend(0b1, psize))
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(dn, PL) = result
}

val decode_PNEXT_P_P_P__ : (bits(2), bits(4), bits(4)) -> unit

function decode_PNEXT_P_P_P__ (size, Pv, Pdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'v = UInt(Pv);
    let 'dn = UInt(Pdn);
    match VL {
      128 => {
          execute_PNEXT_P_P_P__(128, dn, esize, v)
      },
      256 => {
          execute_PNEXT_P_P_P__(256, dn, esize, v)
      },
      512 => {
          execute_PNEXT_P_P_P__(512, dn, esize, v)
      },
      1024 => {
          execute_PNEXT_P_P_P__(1024, dn, esize, v)
      },
      2048 => {
          execute_PNEXT_P_P_P__(2048, dn, esize, v)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1484) = {
    SEE = 1484;
    let size = Slice(__opcode, 22, 2);
    let Pv = Slice(__opcode, 5, 4);
    let Pdn = Slice(__opcode, 0, 4);
    decode_PNEXT_P_P_P__(size, Pv, Pdn)
}

val execute_RDVL_R_I__ : forall 'VL 'd 'imm,
  (0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('imm)) -> unit

function execute_RDVL_R_I__ (VL, d, imm) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'len = imm * DIV(VL, 8);
    X_set(d, 64) = len[63 .. 0]
}

val decode_RDVL_R_I__ : (bits(6), bits(5)) -> unit

function decode_RDVL_R_I__ (imm6, Rd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'd = UInt(Rd);
    let 'imm = SInt(imm6);
    match VL {
      128 => {
          execute_RDVL_R_I__(128, d, imm)
      },
      256 => {
          execute_RDVL_R_I__(256, d, imm)
      },
      512 => {
          execute_RDVL_R_I__(512, d, imm)
      },
      1024 => {
          execute_RDVL_R_I__(1024, d, imm)
      },
      2048 => {
          execute_RDVL_R_I__(2048, d, imm)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1485) = {
    SEE = 1485;
    let imm6 = Slice(__opcode, 5, 6);
    let Rd = Slice(__opcode, 0, 5);
    decode_RDVL_R_I__(imm6, Rd)
}

val execute_SEL_Z_P_ZZ__ : forall 'VL 'd 'esize 'm 'n 'v,
  (0 <= 'v & 'v <= 15 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('v)) -> unit

function execute_SEL_Z_P_ZZ__ (VL, d, esize, m, n, v) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(v, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(not_vec(mask), esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand2, e, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SEL_Z_P_ZZ__ : (bits(2), bits(5), bits(4), bits(5), bits(5)) -> unit

function decode_SEL_Z_P_ZZ__ (size, Zm, Pv, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'v = UInt(Pv);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SEL_Z_P_ZZ__(128, d, esize, m, n, v)
      },
      256 => {
          execute_SEL_Z_P_ZZ__(256, d, esize, m, n, v)
      },
      512 => {
          execute_SEL_Z_P_ZZ__(512, d, esize, m, n, v)
      },
      1024 => {
          execute_SEL_Z_P_ZZ__(1024, d, esize, m, n, v)
      },
      2048 => {
          execute_SEL_Z_P_ZZ__(2048, d, esize, m, n, v)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1486) = {
    SEE = 1486;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pv = Slice(__opcode, 10, 4);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SEL_Z_P_ZZ__(size, Zm, Pv, Zn, Zd)
}

val execute_LSL_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_LSL_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        result = Elem_set(result, e, esize, LSL(element1, shift))
    };
    Z_set(d, VL) = result
}

val decode_LSL_Z_ZI__ : (bits(2), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LSL_Z_ZI__ (tszh, tszl, imm3, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = UInt(tsize @ imm3) - esize;
    match esize {
      8 => {
          match VL {
            128 => {
                execute_LSL_Z_ZI__(128, d, 8, n, shift)
            },
            256 => {
                execute_LSL_Z_ZI__(256, d, 8, n, shift)
            },
            512 => {
                execute_LSL_Z_ZI__(512, d, 8, n, shift)
            },
            1024 => {
                execute_LSL_Z_ZI__(1024, d, 8, n, shift)
            },
            2048 => {
                execute_LSL_Z_ZI__(2048, d, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_LSL_Z_ZI__(128, d, 16, n, shift)
            },
            256 => {
                execute_LSL_Z_ZI__(256, d, 16, n, shift)
            },
            512 => {
                execute_LSL_Z_ZI__(512, d, 16, n, shift)
            },
            1024 => {
                execute_LSL_Z_ZI__(1024, d, 16, n, shift)
            },
            2048 => {
                execute_LSL_Z_ZI__(2048, d, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_LSL_Z_ZI__(128, d, 32, n, shift)
            },
            256 => {
                execute_LSL_Z_ZI__(256, d, 32, n, shift)
            },
            512 => {
                execute_LSL_Z_ZI__(512, d, 32, n, shift)
            },
            1024 => {
                execute_LSL_Z_ZI__(1024, d, 32, n, shift)
            },
            2048 => {
                execute_LSL_Z_ZI__(2048, d, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_LSL_Z_ZI__(128, d, 64, n, shift)
            },
            256 => {
                execute_LSL_Z_ZI__(256, d, 64, n, shift)
            },
            512 => {
                execute_LSL_Z_ZI__(512, d, 64, n, shift)
            },
            1024 => {
                execute_LSL_Z_ZI__(1024, d, 64, n, shift)
            },
            2048 => {
                execute_LSL_Z_ZI__(2048, d, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1487) = {
    SEE = 1487;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_LSL_Z_ZI__(tszh, tszl, imm3, Zn, Zd)
}

val execute_LSR_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_LSR_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        result = Elem_set(result, e, esize, LSR(element1, shift))
    };
    Z_set(d, VL) = result
}

val decode_LSR_Z_ZI__ : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_LSR_Z_ZI__ (tszh, tszl, imm3, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_LSR_Z_ZI__(128, d, 8, n, shift)
            },
            256 => {
                execute_LSR_Z_ZI__(256, d, 8, n, shift)
            },
            512 => {
                execute_LSR_Z_ZI__(512, d, 8, n, shift)
            },
            1024 => {
                execute_LSR_Z_ZI__(1024, d, 8, n, shift)
            },
            2048 => {
                execute_LSR_Z_ZI__(2048, d, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_LSR_Z_ZI__(128, d, 16, n, shift)
            },
            256 => {
                execute_LSR_Z_ZI__(256, d, 16, n, shift)
            },
            512 => {
                execute_LSR_Z_ZI__(512, d, 16, n, shift)
            },
            1024 => {
                execute_LSR_Z_ZI__(1024, d, 16, n, shift)
            },
            2048 => {
                execute_LSR_Z_ZI__(2048, d, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_LSR_Z_ZI__(128, d, 32, n, shift)
            },
            256 => {
                execute_LSR_Z_ZI__(256, d, 32, n, shift)
            },
            512 => {
                execute_LSR_Z_ZI__(512, d, 32, n, shift)
            },
            1024 => {
                execute_LSR_Z_ZI__(1024, d, 32, n, shift)
            },
            2048 => {
                execute_LSR_Z_ZI__(2048, d, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_LSR_Z_ZI__(128, d, 64, n, shift)
            },
            256 => {
                execute_LSR_Z_ZI__(256, d, 64, n, shift)
            },
            512 => {
                execute_LSR_Z_ZI__(512, d, 64, n, shift)
            },
            1024 => {
                execute_LSR_Z_ZI__(1024, d, 64, n, shift)
            },
            2048 => {
                execute_LSR_Z_ZI__(2048, d, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1488) = {
    SEE = 1488;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_LSR_Z_ZI__(tszh, tszl, imm3, U, Zn, Zd)
}

val execute_ASR_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_ASR_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        result = Elem_set(result, e, esize, ASR(element1, shift))
    };
    Z_set(d, VL) = result
}

val decode_ASR_Z_ZI__ : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_ASR_Z_ZI__ (tszh, tszl, imm3, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_ASR_Z_ZI__(128, d, 8, n, shift)
            },
            256 => {
                execute_ASR_Z_ZI__(256, d, 8, n, shift)
            },
            512 => {
                execute_ASR_Z_ZI__(512, d, 8, n, shift)
            },
            1024 => {
                execute_ASR_Z_ZI__(1024, d, 8, n, shift)
            },
            2048 => {
                execute_ASR_Z_ZI__(2048, d, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_ASR_Z_ZI__(128, d, 16, n, shift)
            },
            256 => {
                execute_ASR_Z_ZI__(256, d, 16, n, shift)
            },
            512 => {
                execute_ASR_Z_ZI__(512, d, 16, n, shift)
            },
            1024 => {
                execute_ASR_Z_ZI__(1024, d, 16, n, shift)
            },
            2048 => {
                execute_ASR_Z_ZI__(2048, d, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_ASR_Z_ZI__(128, d, 32, n, shift)
            },
            256 => {
                execute_ASR_Z_ZI__(256, d, 32, n, shift)
            },
            512 => {
                execute_ASR_Z_ZI__(512, d, 32, n, shift)
            },
            1024 => {
                execute_ASR_Z_ZI__(1024, d, 32, n, shift)
            },
            2048 => {
                execute_ASR_Z_ZI__(2048, d, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_ASR_Z_ZI__(128, d, 64, n, shift)
            },
            256 => {
                execute_ASR_Z_ZI__(256, d, 64, n, shift)
            },
            512 => {
                execute_ASR_Z_ZI__(512, d, 64, n, shift)
            },
            1024 => {
                execute_ASR_Z_ZI__(1024, d, 64, n, shift)
            },
            2048 => {
                execute_ASR_Z_ZI__(2048, d, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1489) = {
    SEE = 1489;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ASR_Z_ZI__(tszh, tszl, imm3, U, Zn, Zd)
}

val execute_ASRD_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_ASRD_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element1 : int = SInt(Elem_read(operand1, e, esize));
            if element1 < 0 then {
                element1 = element1 + ((1 << shift) - 1)
            };
            let 'element1 = element1;
            result = Elem_set(result, e, esize, ((element1 >> shift))[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_ASRD_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_ASRD_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_ASRD_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_ASRD_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_ASRD_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_ASRD_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_ASRD_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_ASRD_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_ASRD_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_ASRD_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_ASRD_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_ASRD_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_ASRD_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_ASRD_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_ASRD_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_ASRD_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_ASRD_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_ASRD_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_ASRD_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_ASRD_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_ASRD_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_ASRD_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1490) = {
    SEE = 1490;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ASRD_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_LSL_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_LSL_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'PL = DIV(VL, 8);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, LSL(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSL_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_LSL_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = UInt(tsize @ imm3) - esize;
    match esize {
      8 => {
          match VL {
            128 => {
                execute_LSL_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_LSL_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_LSL_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_LSL_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_LSL_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_LSL_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_LSL_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_LSL_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_LSL_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_LSL_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_LSL_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_LSL_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_LSL_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_LSL_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_LSL_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_LSL_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_LSL_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_LSL_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_LSL_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_LSL_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1491) = {
    SEE = 1491;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSL_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_LSR_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_LSR_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'PL = DIV(VL, 8);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, LSR(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSR_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_LSR_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_LSR_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_LSR_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_LSR_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_LSR_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_LSR_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_LSR_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_LSR_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_LSR_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_LSR_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_LSR_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_LSR_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_LSR_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_LSR_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_LSR_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_LSR_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_LSR_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_LSR_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_LSR_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_LSR_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_LSR_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1492) = {
    SEE = 1492;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSR_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_ASR_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_ASR_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'PL = DIV(VL, 8);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, ASR(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_ASR_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_ASR_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_ASR_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_ASR_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_ASR_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_ASR_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_ASR_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_ASR_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_ASR_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_ASR_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_ASR_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_ASR_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_ASR_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_ASR_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_ASR_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_ASR_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_ASR_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_ASR_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_ASR_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_ASR_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_ASR_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_ASR_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1493) = {
    SEE = 1493;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ASR_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_LSL_Z_ZW__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_LSL_Z_ZW__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits(64) = Elem_read(operand2, DIV(e * esize, 64), 64);
        let 'shift = Min(UInt(element2), esize);
        result = Elem_set(result, e, esize, LSL(element1, shift))
    };
    Z_set(d, VL) = result
}

val decode_LSL_Z_ZW__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_LSL_Z_ZW__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_LSL_Z_ZW__(128, d, esize, m, n)
      },
      256 => {
          execute_LSL_Z_ZW__(256, d, esize, m, n)
      },
      512 => {
          execute_LSL_Z_ZW__(512, d, esize, m, n)
      },
      1024 => {
          execute_LSL_Z_ZW__(1024, d, esize, m, n)
      },
      2048 => {
          execute_LSL_Z_ZW__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1494) = {
    SEE = 1494;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_LSL_Z_ZW__(size, Zm, Zn, Zd)
}

val execute_LSR_Z_ZW__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_LSR_Z_ZW__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits(64) = Elem_read(operand2, DIV(e * esize, 64), 64);
        let 'shift = Min(UInt(element2), esize);
        result = Elem_set(result, e, esize, LSR(element1, shift))
    };
    Z_set(d, VL) = result
}

val decode_LSR_Z_ZW__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_LSR_Z_ZW__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_LSR_Z_ZW__(128, d, esize, m, n)
      },
      256 => {
          execute_LSR_Z_ZW__(256, d, esize, m, n)
      },
      512 => {
          execute_LSR_Z_ZW__(512, d, esize, m, n)
      },
      1024 => {
          execute_LSR_Z_ZW__(1024, d, esize, m, n)
      },
      2048 => {
          execute_LSR_Z_ZW__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1495) = {
    SEE = 1495;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_LSR_Z_ZW__(size, Zm, U, Zn, Zd)
}

val execute_ASR_Z_ZW__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_ASR_Z_ZW__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits(64) = Elem_read(operand2, DIV(e * esize, 64), 64);
        let 'shift = Min(UInt(element2), esize);
        result = Elem_set(result, e, esize, ASR(element1, shift))
    };
    Z_set(d, VL) = result
}

val decode_ASR_Z_ZW__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ASR_Z_ZW__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_ASR_Z_ZW__(128, d, esize, m, n)
      },
      256 => {
          execute_ASR_Z_ZW__(256, d, esize, m, n)
      },
      512 => {
          execute_ASR_Z_ZW__(512, d, esize, m, n)
      },
      1024 => {
          execute_ASR_Z_ZW__(1024, d, esize, m, n)
      },
      2048 => {
          execute_ASR_Z_ZW__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1496) = {
    SEE = 1496;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ASR_Z_ZW__(size, Zm, U, Zn, Zd)
}

val execute_LSL_Z_P_ZW__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_LSL_Z_P_ZW__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits(64) = Elem_read(operand2, DIV(e * esize, 64), 64);
            let 'shift = Min(UInt(element2), esize);
            result = Elem_set(result, e, esize, LSL(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSL_Z_P_ZW__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LSL_Z_P_ZW__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_LSL_Z_P_ZW__(128, dn, esize, g, m)
      },
      256 => {
          execute_LSL_Z_P_ZW__(256, dn, esize, g, m)
      },
      512 => {
          execute_LSL_Z_P_ZW__(512, dn, esize, g, m)
      },
      1024 => {
          execute_LSL_Z_P_ZW__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_LSL_Z_P_ZW__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1497) = {
    SEE = 1497;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSL_Z_P_ZW__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_LSR_Z_P_ZW__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_LSR_Z_P_ZW__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits(64) = Elem_read(operand2, DIV(e * esize, 64), 64);
            let 'shift = Min(UInt(element2), esize);
            result = Elem_set(result, e, esize, LSR(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_LSR_Z_P_ZW__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LSR_Z_P_ZW__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_LSR_Z_P_ZW__(128, dn, esize, g, m)
      },
      256 => {
          execute_LSR_Z_P_ZW__(256, dn, esize, g, m)
      },
      512 => {
          execute_LSR_Z_P_ZW__(512, dn, esize, g, m)
      },
      1024 => {
          execute_LSR_Z_P_ZW__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_LSR_Z_P_ZW__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1498) = {
    SEE = 1498;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_LSR_Z_P_ZW__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_ASR_Z_P_ZW__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_ASR_Z_P_ZW__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            let element2 : bits(64) = Elem_read(operand2, DIV(e * esize, 64), 64);
            let 'shift = Min(UInt(element2), esize);
            result = Elem_set(result, e, esize, ASR(element1, shift))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_ASR_Z_P_ZW__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ASR_Z_P_ZW__ (size, R, L, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b11 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_ASR_Z_P_ZW__(128, dn, esize, g, m)
      },
      256 => {
          execute_ASR_Z_P_ZW__(256, dn, esize, g, m)
      },
      512 => {
          execute_ASR_Z_P_ZW__(512, dn, esize, g, m)
      },
      1024 => {
          execute_ASR_Z_P_ZW__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_ASR_Z_P_ZW__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1499) = {
    SEE = 1499;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ASR_Z_P_ZW__(size, R, L, U, Pg, Zm, Zdn)
}

val execute_ABS_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_ABS_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element : int = SInt(Elem_read(operand, e, esize));
            let 'element = Abs(element);
            result = Elem_set(result, e, esize, element[esize - 1 .. 0])
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_ABS_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_ABS_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_ABS_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_ABS_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_ABS_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_ABS_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_ABS_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1500) = {
    SEE = 1500;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ABS_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_CLS_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_CLS_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, CountLeadingSignBits(element)[esize - 1 .. 0])
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_CLS_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_CLS_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_CLS_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_CLS_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_CLS_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_CLS_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_CLS_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1501) = {
    SEE = 1501;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_CLS_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_CLZ_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_CLZ_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, CountLeadingZeroBits(element)[esize - 1 .. 0])
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_CLZ_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_CLZ_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_CLZ_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_CLZ_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_CLZ_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_CLZ_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_CLZ_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1502) = {
    SEE = 1502;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_CLZ_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_CNOT_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_CNOT_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, ZeroExtend(IsZeroBit(element), esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_CNOT_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_CNOT_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_CNOT_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_CNOT_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_CNOT_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_CNOT_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_CNOT_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1503) = {
    SEE = 1503;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_CNOT_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_CNT_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_CNT_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, BitCount(element)[esize - 1 .. 0])
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_CNT_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_CNT_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_CNT_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_CNT_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_CNT_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_CNT_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_CNT_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1504) = {
    SEE = 1504;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_CNT_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FABS_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FABS_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPAbs(element))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FABS_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FABS_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FABS_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FABS_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FABS_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FABS_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FABS_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1505) = {
    SEE = 1505;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FABS_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_FNEG_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_FNEG_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            assert(constraint('esize in {16, 32, 64}));
            result = Elem_set(result, e, esize, FPNeg(element))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_FNEG_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_FNEG_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_FNEG_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_FNEG_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_FNEG_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_FNEG_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_FNEG_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1506) = {
    SEE = 1506;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_FNEG_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_NEG_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_NEG_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element : int = SInt(Elem_read(operand, e, esize));
            let 'element = negate(element);
            result = Elem_set(result, e, esize, element[esize - 1 .. 0])
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_NEG_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_NEG_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_NEG_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_NEG_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_NEG_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_NEG_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_NEG_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1507) = {
    SEE = 1507;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_NEG_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_NOT_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_NOT_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, not_vec(element))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_NOT_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_NOT_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_NOT_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_NOT_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_NOT_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_NOT_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_NOT_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1508) = {
    SEE = 1508;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_NOT_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_RBIT_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_RBIT_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, BitReverse(element))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_RBIT_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_RBIT_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_RBIT_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_RBIT_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_RBIT_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_RBIT_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_RBIT_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1509) = {
    SEE = 1509;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RBIT_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_UQADD_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_UQADD_Z_ZZ__ (VL, d, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + element2, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(d, VL) = result
}

val decode_UQADD_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UQADD_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQADD_Z_ZZ__(128, d, esize, m, n, is_unsigned)
      },
      256 => {
          execute_UQADD_Z_ZZ__(256, d, esize, m, n, is_unsigned)
      },
      512 => {
          execute_UQADD_Z_ZZ__(512, d, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_UQADD_Z_ZZ__(1024, d, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_UQADD_Z_ZZ__(2048, d, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1510) = {
    SEE = 1510;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQADD_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_SQADD_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_SQADD_Z_ZZ__ (VL, d, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + element2, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(d, VL) = result
}

val decode_SQADD_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQADD_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQADD_Z_ZZ__(128, d, esize, m, n, is_unsigned)
      },
      256 => {
          execute_SQADD_Z_ZZ__(256, d, esize, m, n, is_unsigned)
      },
      512 => {
          execute_SQADD_Z_ZZ__(512, d, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_SQADD_Z_ZZ__(1024, d, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_SQADD_Z_ZZ__(2048, d, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1511) = {
    SEE = 1511;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQADD_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_UQSUB_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_UQSUB_Z_ZZ__ (VL, d, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - element2, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(d, VL) = result
}

val decode_UQSUB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UQSUB_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQSUB_Z_ZZ__(128, d, esize, m, n, is_unsigned)
      },
      256 => {
          execute_UQSUB_Z_ZZ__(256, d, esize, m, n, is_unsigned)
      },
      512 => {
          execute_UQSUB_Z_ZZ__(512, d, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_UQSUB_Z_ZZ__(1024, d, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_UQSUB_Z_ZZ__(2048, d, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1512) = {
    SEE = 1512;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQSUB_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_SQSUB_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_SQSUB_Z_ZZ__ (VL, d, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - element2, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(d, VL) = result
}

val decode_SQSUB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQSUB_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQSUB_Z_ZZ__(128, d, esize, m, n, is_unsigned)
      },
      256 => {
          execute_SQSUB_Z_ZZ__(256, d, esize, m, n, is_unsigned)
      },
      512 => {
          execute_SQSUB_Z_ZZ__(512, d, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_SQSUB_Z_ZZ__(1024, d, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_SQSUB_Z_ZZ__(2048, d, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1513) = {
    SEE = 1513;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQSUB_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_UQADD_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_UQADD_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQADD_Z_ZI__ : (bits(2), bits(1), bits(1), bits(8), bits(5)) -> unit

function decode_UQADD_Z_ZI__ (size, U, sh, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    imm : int = UInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQADD_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_UQADD_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_UQADD_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_UQADD_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_UQADD_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1514) = {
    SEE = 1514;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQADD_Z_ZI__(size, U, sh, imm8, Zdn)
}

val execute_SQADD_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_SQADD_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 + imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQADD_Z_ZI__ : (bits(2), bits(1), bits(1), bits(8), bits(5)) -> unit

function decode_SQADD_Z_ZI__ (size, U, sh, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    imm : int = UInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQADD_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_SQADD_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_SQADD_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_SQADD_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_SQADD_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1515) = {
    SEE = 1515;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQADD_Z_ZI__(size, U, sh, imm8, Zdn)
}

val execute_UQSUB_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_UQSUB_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_UQSUB_Z_ZI__ : (bits(2), bits(1), bits(1), bits(8), bits(5)) -> unit

function decode_UQSUB_Z_ZI__ (size, U, sh, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    imm : int = UInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQSUB_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_UQSUB_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_UQSUB_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_UQSUB_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_UQSUB_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1516) = {
    SEE = 1516;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQSUB_Z_ZI__(size, U, sh, imm8, Zdn)
}

val execute_SQSUB_Z_ZI__ : forall 'VL 'dn 'esize 'imm ('is_unsigned : Bool),
  ('esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('imm), bool('is_unsigned)) -> unit

function execute_SQSUB_Z_ZI__ (VL, dn, esize, imm, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let (__tup_0 : bits('esize), _) = SatQ(element1 - imm, esize, is_unsigned);
        result = Elem_set(result, e, esize, __tup_0)
    };
    Z_set(dn, VL) = result
}

val decode_SQSUB_Z_ZI__ : (bits(2), bits(1), bits(1), bits(8), bits(5)) -> unit

function decode_SQSUB_Z_ZI__ (size, U, sh, imm8, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (size @ sh) == 0b001 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    imm : int = UInt(imm8);
    if sh == 0b1 then {
        imm = (imm << 8)
    };
    let 'imm = imm;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQSUB_Z_ZI__(128, dn, esize, imm, is_unsigned)
      },
      256 => {
          execute_SQSUB_Z_ZI__(256, dn, esize, imm, is_unsigned)
      },
      512 => {
          execute_SQSUB_Z_ZI__(512, dn, esize, imm, is_unsigned)
      },
      1024 => {
          execute_SQSUB_Z_ZI__(1024, dn, esize, imm, is_unsigned)
      },
      2048 => {
          execute_SQSUB_Z_ZI__(2048, dn, esize, imm, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1517) = {
    SEE = 1517;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let sh = Slice(__opcode, 13, 1);
    let imm8 = Slice(__opcode, 5, 8);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQSUB_Z_ZI__(size, U, sh, imm8, Zdn)
}

val execute_BRKPA_P_P_PP__ : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_BRKPA_P_P_PP__ (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    last : bool = LastActive(mask, operand1, 8) == 0b1;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 8) then {
            let pbit : bits(1) = if last then 0b1 else 0b0;
            result = Elem_set(result, e, 1, ZeroExtend(pbit, 1));
            last = last & not_bool(ActivePredicateElement(operand2, e, 8))
        } else {
            result = Elem_set(result, e, 1, ZeroExtend(0b0, 1))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKPA_P_P_PP__ : (bits(1), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKPA_P_P_PP__ (S, Pm, Pg, Pn, B, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_BRKPA_P_P_PP__(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_BRKPA_P_P_PP__(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_BRKPA_P_P_PP__(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_BRKPA_P_P_PP__(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_BRKPA_P_P_PP__(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1518) = {
    SEE = 1518;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let B = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKPA_P_P_PP__(S, Pm, Pg, Pn, B, Pd)
}

val execute_BRKPAS_P_P_PP__ : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_BRKPAS_P_P_PP__ (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    last : bool = LastActive(mask, operand1, 8) == 0b1;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 8) then {
            let pbit : bits(1) = if last then 0b1 else 0b0;
            result = Elem_set(result, e, 1, ZeroExtend(pbit, 1));
            last = last & not_bool(ActivePredicateElement(operand2, e, 8))
        } else {
            result = Elem_set(result, e, 1, ZeroExtend(0b0, 1))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKPAS_P_P_PP__ : (bits(1), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKPAS_P_P_PP__ (S, Pm, Pg, Pn, B, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_BRKPAS_P_P_PP__(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_BRKPAS_P_P_PP__(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_BRKPAS_P_P_PP__(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_BRKPAS_P_P_PP__(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_BRKPAS_P_P_PP__(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1519) = {
    SEE = 1519;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let B = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKPAS_P_P_PP__(S, Pm, Pg, Pn, B, Pd)
}

val execute_BRKPB_P_P_PP__ : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_BRKPB_P_P_PP__ (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    last : bool = LastActive(mask, operand1, 8) == 0b1;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 8) then {
            last = last & not_bool(ActivePredicateElement(operand2, e, 8));
            let pbit : bits(1) = if last then 0b1 else 0b0;
            result = Elem_set(result, e, 1, ZeroExtend(pbit, 1))
        } else {
            result = Elem_set(result, e, 1, ZeroExtend(0b0, 1))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKPB_P_P_PP__ : (bits(1), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKPB_P_P_PP__ (S, Pm, Pg, Pn, B, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_BRKPB_P_P_PP__(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_BRKPB_P_P_PP__(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_BRKPB_P_P_PP__(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_BRKPB_P_P_PP__(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_BRKPB_P_P_PP__(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, _, _, _, _, bitzero, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1520) = {
    SEE = 1520;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let B = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKPB_P_P_PP__(S, Pm, Pg, Pn, B, Pd)
}

val execute_BRKPBS_P_P_PP__ : forall 'VL 'd 'esize 'g 'm 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'g & 'g <= 15 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n), bool('setflags)) -> unit

function execute_BRKPBS_P_P_PP__ (VL, d, esize, g, m, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    result : bits('PL) = undefined;
    last : bool = LastActive(mask, operand1, 8) == 0b1;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 8) then {
            last = last & not_bool(ActivePredicateElement(operand2, e, 8));
            let pbit : bits(1) = if last then 0b1 else 0b0;
            result = Elem_set(result, e, 1, ZeroExtend(pbit, 1))
        } else {
            result = Elem_set(result, e, 1, ZeroExtend(0b0, 1))
        }
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize)
    };
    P_set(d, PL) = result
}

val decode_BRKPBS_P_P_PP__ : (bits(1), bits(4), bits(4), bits(4), bits(1), bits(4)) -> unit

function decode_BRKPBS_P_P_PP__ (S, Pm, Pg, Pn, B, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_BRKPBS_P_P_PP__(128, d, esize, g, m, n, setflags)
      },
      256 => {
          execute_BRKPBS_P_P_PP__(256, d, esize, g, m, n, setflags)
      },
      512 => {
          execute_BRKPBS_P_P_PP__(512, d, esize, g, m, n, setflags)
      },
      1024 => {
          execute_BRKPBS_P_P_PP__(1024, d, esize, g, m, n, setflags)
      },
      2048 => {
          execute_BRKPBS_P_P_PP__(2048, d, esize, g, m, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, _, _, _, _, bitzero, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1521) = {
    SEE = 1521;
    let S = Slice(__opcode, 22, 1);
    let Pm = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let B = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_BRKPBS_P_P_PP__(S, Pm, Pg, Pn, B, Pd)
}

val execute_BRKN_P_P_PP__ : forall 'VL 'dm 'g 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 0 <= 'dm & 'dm <= 15 & is_VL('VL)).
  (int('VL), int('dm), int('g), int('n), bool('setflags)) -> unit

function execute_BRKN_P_P_PP__ (VL, dm, g, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(dm, PL);
    result : bits('PL) = undefined;
    if LastActive(mask, operand1, 8) == 0b1 then {
        result = operand2
    } else {
        result = Zeros(PL)
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(Ones(PL), result, 8)
    };
    P_set(dm, PL) = result
}

val decode_BRKN_P_P_PP__ : (bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_BRKN_P_P_PP__ (S, Pg, Pn, Pdm) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'dm = UInt(Pdm);
    let setflags : bool = false;
    match VL {
      128 => {
          execute_BRKN_P_P_PP__(128, dm, g, n, setflags)
      },
      256 => {
          execute_BRKN_P_P_PP__(256, dm, g, n, setflags)
      },
      512 => {
          execute_BRKN_P_P_PP__(512, dm, g, n, setflags)
      },
      1024 => {
          execute_BRKN_P_P_PP__(1024, dm, g, n, setflags)
      },
      2048 => {
          execute_BRKN_P_P_PP__(2048, dm, g, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1522) = {
    SEE = 1522;
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pdm = Slice(__opcode, 0, 4);
    decode_BRKN_P_P_PP__(S, Pg, Pn, Pdm)
}

val execute_BRKNS_P_P_PP__ : forall 'VL 'dm 'g 'n ('setflags : Bool),
  (0 <= 'n & 'n <= 15 & 0 <= 'g & 'g <= 15 & 0 <= 'dm & 'dm <= 15 & is_VL('VL)).
  (int('VL), int('dm), int('g), int('n), bool('setflags)) -> unit

function execute_BRKNS_P_P_PP__ (VL, dm, g, n, setflags) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(dm, PL);
    result : bits('PL) = undefined;
    if LastActive(mask, operand1, 8) == 0b1 then {
        result = operand2
    } else {
        result = Zeros(PL)
    };
    if setflags then {
        (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(Ones(PL), result, 8)
    };
    P_set(dm, PL) = result
}

val decode_BRKNS_P_P_PP__ : (bits(1), bits(4), bits(4), bits(4)) -> unit

function decode_BRKNS_P_P_PP__ (S, Pg, Pn, Pdm) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'g = UInt(Pg);
    let 'n = UInt(Pn);
    let 'dm = UInt(Pdm);
    let setflags : bool = true;
    match VL {
      128 => {
          execute_BRKNS_P_P_PP__(128, dm, g, n, setflags)
      },
      256 => {
          execute_BRKNS_P_P_PP__(256, dm, g, n, setflags)
      },
      512 => {
          execute_BRKNS_P_P_PP__(512, dm, g, n, setflags)
      },
      1024 => {
          execute_BRKNS_P_P_PP__(1024, dm, g, n, setflags)
      },
      2048 => {
          execute_BRKNS_P_P_PP__(2048, dm, g, n, setflags)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1523) = {
    SEE = 1523;
    let S = Slice(__opcode, 22, 1);
    let Pg = Slice(__opcode, 10, 4);
    let Pn = Slice(__opcode, 5, 4);
    let Pdm = Slice(__opcode, 0, 4);
    decode_BRKNS_P_P_PP__(S, Pg, Pn, Pdm)
}

val execute_INSR_Z_V__ : forall 'VL 'dn 'esize 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m)) -> unit

function execute_INSR_Z_V__ (VL, dn, esize, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let dest : bits('VL) = Z_read(dn, VL);
    let src : bits('esize) = V_read(m, esize);
    Z_set(dn, VL) = dest[VL - esize - 1 .. 0] @ src
}

val decode_INSR_Z_V__ : (bits(2), bits(5), bits(5)) -> unit

function decode_INSR_Z_V__ (size, Vm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let 'm = UInt(Vm);
    match VL {
      128 => {
          execute_INSR_Z_V__(128, dn, esize, m)
      },
      256 => {
          execute_INSR_Z_V__(256, dn, esize, m)
      },
      512 => {
          execute_INSR_Z_V__(512, dn, esize, m)
      },
      1024 => {
          execute_INSR_Z_V__(1024, dn, esize, m)
      },
      2048 => {
          execute_INSR_Z_V__(2048, dn, esize, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1524) = {
    SEE = 1524;
    let size = Slice(__opcode, 22, 2);
    let Vm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_INSR_Z_V__(size, Vm, Zdn)
}

val execute_INSR_Z_R__ : forall 'VL 'dn 'esize 'm,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m)) -> unit

function execute_INSR_Z_R__ (VL, dn, esize, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let dest : bits('VL) = Z_read(dn, VL);
    let src : bits('esize) = X_read(m, esize);
    Z_set(dn, VL) = dest[VL - esize - 1 .. 0] @ src
}

val decode_INSR_Z_R__ : (bits(2), bits(5), bits(5)) -> unit

function decode_INSR_Z_R__ (size, Rm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'dn = UInt(Zdn);
    let 'm = UInt(Rm);
    match VL {
      128 => {
          execute_INSR_Z_R__(128, dn, esize, m)
      },
      256 => {
          execute_INSR_Z_R__(256, dn, esize, m)
      },
      512 => {
          execute_INSR_Z_R__(512, dn, esize, m)
      },
      1024 => {
          execute_INSR_Z_R__(1024, dn, esize, m)
      },
      2048 => {
          execute_INSR_Z_R__(2048, dn, esize, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1525) = {
    SEE = 1525;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_INSR_Z_R__(size, Rm, Zdn)
}

val execute_SDOT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SDOT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_SDOT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SDOT_Z_ZZZ__ (size, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SDOT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SDOT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SDOT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SDOT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SDOT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1526) = {
    SEE = 1526;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SDOT_Z_ZZZ__(size, Zm, U, Zn, Zda)
}

val execute_SDOT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SDOT_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_SDOT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SDOT_Z_ZZZi_S (size, i2, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SDOT_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_SDOT_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_SDOT_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SDOT_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SDOT_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1527) = {
    SEE = 1527;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SDOT_Z_ZZZi_S(size, i2, Zm, U, Zn, Zda)
}

val execute_SDOT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SDOT_Z_ZZZi_D (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_SDOT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_SDOT_Z_ZZZi_D (size, i1, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SDOT_Z_ZZZi_D(128, da, esize, index, m, n)
      },
      256 => {
          execute_SDOT_Z_ZZZi_D(256, da, esize, index, m, n)
      },
      512 => {
          execute_SDOT_Z_ZZZi_D(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SDOT_Z_ZZZi_D(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SDOT_Z_ZZZi_D(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1528) = {
    SEE = 1528;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SDOT_Z_ZZZi_D(size, i1, Zm, U, Zn, Zda)
}

val execute_UDOT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UDOT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = UInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_UDOT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UDOT_Z_ZZZ__ (size, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UDOT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UDOT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UDOT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UDOT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UDOT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1529) = {
    SEE = 1529;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UDOT_Z_ZZZ__(size, Zm, U, Zn, Zda)
}

val execute_UDOT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_UDOT_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_UDOT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_UDOT_Z_ZZZi_S (size, i2, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UDOT_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_UDOT_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_UDOT_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_UDOT_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_UDOT_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1530) = {
    SEE = 1530;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UDOT_Z_ZZZi_S(size, i2, Zm, U, Zn, Zda)
}

val execute_UDOT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_UDOT_Z_ZZZi_D (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_UDOT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_UDOT_Z_ZZZi_D (size, i1, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UDOT_Z_ZZZi_D(128, da, esize, index, m, n)
      },
      256 => {
          execute_UDOT_Z_ZZZi_D(256, da, esize, index, m, n)
      },
      512 => {
          execute_UDOT_Z_ZZZi_D(512, da, esize, index, m, n)
      },
      1024 => {
          execute_UDOT_Z_ZZZi_D(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_UDOT_Z_ZZZi_D(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1531) = {
    SEE = 1531;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UDOT_Z_ZZZi_D(size, i1, Zm, U, Zn, Zda)
}

val execute_USDOT_Z_ZZZ_S : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_USDOT_Z_ZZZ_S (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = SInt(Elem_read(operand2, 4 * e + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_USDOT_Z_ZZZ_S : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_USDOT_Z_ZZZ_S (size, Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveInt8MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_USDOT_Z_ZZZ_S(128, da, esize, m, n)
      },
      256 => {
          execute_USDOT_Z_ZZZ_S(256, da, esize, m, n)
      },
      512 => {
          execute_USDOT_Z_ZZZ_S(512, da, esize, m, n)
      },
      1024 => {
          execute_USDOT_Z_ZZZ_S(1024, da, esize, m, n)
      },
      2048 => {
          execute_USDOT_Z_ZZZ_S(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1532) = {
    SEE = 1532;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_USDOT_Z_ZZZ_S(size, Zm, Zn, Zda)
}

val execute_USDOT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_USDOT_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = SInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_USDOT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_USDOT_Z_ZZZi_S (size, i2, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveInt8MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_USDOT_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_USDOT_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_USDOT_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_USDOT_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_USDOT_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1533) = {
    SEE = 1533;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_USDOT_Z_ZZZi_S(size, i2, Zm, U, Zn, Zda)
}

val execute_SUDOT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SUDOT_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 3 by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, 4 * e + i, DIV(esize, 4)));
            let 'element2 = UInt(Elem_read(operand2, 4 * s + i, DIV(esize, 4)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_SUDOT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SUDOT_Z_ZZZi_S (size, i2, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) | not_bool(HaveInt8MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SUDOT_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_SUDOT_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_SUDOT_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SUDOT_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SUDOT_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1534) = {
    SEE = 1534;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SUDOT_Z_ZZZi_S(size, i2, Zm, U, Zn, Zda)
}

val execute_SDOT_Z32_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SDOT_Z32_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 1 by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
            let 'element2 = SInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_SDOT_Z32_ZZZ__ : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SDOT_Z32_ZZZ__ (Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SDOT_Z32_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SDOT_Z32_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SDOT_Z32_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SDOT_Z32_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SDOT_Z32_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1535) = {
    SEE = 1535;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SDOT_Z32_ZZZ__(Zm, U, Zn, Zda)
}

val execute_SDOT_Z32_ZZZi__ : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SDOT_Z32_ZZZi__ (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 1 by 1 in inc) {
            let 'element1 = SInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
            let 'element2 = SInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_SDOT_Z32_ZZZi__ : (bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SDOT_Z32_ZZZi__ (i2, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SDOT_Z32_ZZZi__(128, da, esize, index, m, n)
      },
      256 => {
          execute_SDOT_Z32_ZZZi__(256, da, esize, index, m, n)
      },
      512 => {
          execute_SDOT_Z32_ZZZi__(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SDOT_Z32_ZZZi__(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SDOT_Z32_ZZZi__(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1536) = {
    SEE = 1536;
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SDOT_Z32_ZZZi__(i2, Zm, U, Zn, Zda)
}

val execute_UDOT_Z32_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UDOT_Z32_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 1 by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
            let 'element2 = UInt(Elem_read(operand2, 2 * e + i, DIV(esize, 2)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_UDOT_Z32_ZZZ__ : (bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UDOT_Z32_ZZZ__ (Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UDOT_Z32_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UDOT_Z32_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UDOT_Z32_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UDOT_Z32_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UDOT_Z32_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1537) = {
    SEE = 1537;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UDOT_Z32_ZZZ__(Zm, U, Zn, Zda)
}

val execute_UDOT_Z32_ZZZi__ : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_UDOT_Z32_ZZZi__ (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 1 by 1 in inc) {
            let 'element1 = UInt(Elem_read(operand1, 2 * e + i, DIV(esize, 2)));
            let 'element2 = UInt(Elem_read(operand2, 2 * s + i, DIV(esize, 2)));
            res = res + element1 * element2
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_UDOT_Z32_ZZZi__ : (bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_UDOT_Z32_ZZZi__ (i2, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UDOT_Z32_ZZZi__(128, da, esize, index, m, n)
      },
      256 => {
          execute_UDOT_Z32_ZZZi__(256, da, esize, index, m, n)
      },
      512 => {
          execute_UDOT_Z32_ZZZi__(512, da, esize, index, m, n)
      },
      1024 => {
          execute_UDOT_Z32_ZZZi__(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_UDOT_Z32_ZZZi__(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1538) = {
    SEE = 1538;
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UDOT_Z32_ZZZi__(i2, Zm, U, Zn, Zda)
}

val execute_SQABS_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_SQABS_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element : int = SInt(Elem_read(operand, e, esize));
            let 'element = Abs(element);
            result = Elem_set(result, e, esize, SignedSat(element, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SQABS_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQABS_Z_P_Z__ (size, Q, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQABS_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_SQABS_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_SQABS_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_SQABS_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_SQABS_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1539) = {
    SEE = 1539;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQABS_Z_P_Z__(size, Q, Pg, Zn, Zd)
}

val execute_SQNEG_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_SQNEG_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            element : int = SInt(Elem_read(operand, e, esize));
            let 'element = negate(element);
            result = Elem_set(result, e, esize, SignedSat(element, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_SQNEG_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQNEG_Z_P_Z__ (size, Q, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQNEG_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_SQNEG_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_SQNEG_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_SQNEG_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_SQNEG_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1540) = {
    SEE = 1540;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQNEG_Z_P_Z__(size, Q, Pg, Zn, Zd)
}

val execute_SQDMULH_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SQDMULH_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat((res >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULH_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULH_Z_ZZ__ (size, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQDMULH_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SQDMULH_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SQDMULH_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SQDMULH_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SQDMULH_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1541) = {
    SEE = 1541;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULH_Z_ZZ__(size, Zm, R, Zn, Zd)
}

val execute_SQRDMULH_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SQRDMULH_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRDMULH_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMULH_Z_ZZ__ (size, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQRDMULH_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SQRDMULH_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SQRDMULH_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SQRDMULH_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SQRDMULH_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1542) = {
    SEE = 1542;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRDMULH_Z_ZZ__(size, Zm, R, Zn, Zd)
}

val execute_SQRDMLAH_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SQRDMLAH_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) + 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLAH_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLAH_Z_ZZZ__ (size, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLAH_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SQRDMLAH_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SQRDMLAH_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SQRDMLAH_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SQRDMLAH_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1543) = {
    SEE = 1543;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLAH_Z_ZZZ__(size, Zm, S, Zn, Zda)
}

val execute_SQRDMLSH_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SQRDMLSH_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) - 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLSH_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLSH_Z_ZZZ__ (size, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLSH_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SQRDMLSH_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SQRDMLSH_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SQRDMLSH_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SQRDMLSH_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1544) = {
    SEE = 1544;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLSH_Z_ZZZ__(size, Zm, S, Zn, Zda)
}

val execute_ADDP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_ADDP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    element1 : int = undefined;
    element2 : int = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(ActivePredicateElement(mask, e, esize)) then {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        } else {
            if IsEven(e) then {
                element1 = UInt(Elem_read(operand1, e + 0, esize));
                element2 = UInt(Elem_read(operand1, e + 1, esize))
            } else {
                element1 = UInt(Elem_read(operand2, e - 1, esize));
                element2 = UInt(Elem_read(operand2, e + 0, esize))
            };
            let 'res = element1 + element2;
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        }
    };
    Z_set(dn, VL) = result
}

val decode_ADDP_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ADDP_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_ADDP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_ADDP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_ADDP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_ADDP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_ADDP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1545) = {
    SEE = 1545;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_ADDP_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_UMAXP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UMAXP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    element1 : int = undefined;
    element2 : int = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(ActivePredicateElement(mask, e, esize)) then {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        } else {
            if IsEven(e) then {
                element1 = UInt(Elem_read(operand1, e + 0, esize));
                element2 = UInt(Elem_read(operand1, e + 1, esize))
            } else {
                element1 = UInt(Elem_read(operand2, e - 1, esize));
                element2 = UInt(Elem_read(operand2, e + 0, esize))
            };
            let 'res = Max(element1, element2);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        }
    };
    Z_set(dn, VL) = result
}

val decode_UMAXP_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMAXP_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_UMAXP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UMAXP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UMAXP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UMAXP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UMAXP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1546) = {
    SEE = 1546;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UMAXP_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_SMAXP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SMAXP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    element1 : int = undefined;
    element2 : int = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(ActivePredicateElement(mask, e, esize)) then {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        } else {
            if IsEven(e) then {
                element1 = SInt(Elem_read(operand1, e + 0, esize));
                element2 = SInt(Elem_read(operand1, e + 1, esize))
            } else {
                element1 = SInt(Elem_read(operand2, e - 1, esize));
                element2 = SInt(Elem_read(operand2, e + 0, esize))
            };
            let 'res = Max(element1, element2);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        }
    };
    Z_set(dn, VL) = result
}

val decode_SMAXP_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMAXP_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SMAXP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SMAXP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SMAXP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SMAXP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SMAXP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1547) = {
    SEE = 1547;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SMAXP_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_UMINP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UMINP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    element1 : int = undefined;
    element2 : int = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(ActivePredicateElement(mask, e, esize)) then {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        } else {
            if IsEven(e) then {
                element1 = UInt(Elem_read(operand1, e + 0, esize));
                element2 = UInt(Elem_read(operand1, e + 1, esize))
            } else {
                element1 = UInt(Elem_read(operand2, e - 1, esize));
                element2 = UInt(Elem_read(operand2, e + 0, esize))
            };
            let 'res = Min(element1, element2);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        }
    };
    Z_set(dn, VL) = result
}

val decode_UMINP_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMINP_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_UMINP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UMINP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UMINP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UMINP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UMINP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1548) = {
    SEE = 1548;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UMINP_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_SMINP_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SMINP_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    element1 : int = undefined;
    element2 : int = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(ActivePredicateElement(mask, e, esize)) then {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        } else {
            if IsEven(e) then {
                element1 = SInt(Elem_read(operand1, e + 0, esize));
                element2 = SInt(Elem_read(operand1, e + 1, esize))
            } else {
                element1 = SInt(Elem_read(operand2, e - 1, esize));
                element2 = SInt(Elem_read(operand2, e + 0, esize))
            };
            let 'res = Min(element1, element2);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        }
    };
    Z_set(dn, VL) = result
}

val decode_SMINP_Z_P_ZZ__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMINP_Z_P_ZZ__ (size, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SMINP_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SMINP_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SMINP_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SMINP_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SMINP_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1549) = {
    SEE = 1549;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SMINP_Z_P_ZZ__(size, U, Pg, Zm, Zdn)
}

val execute_SADALP_Z_P_Z__ : forall 'VL 'da 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('n)) -> unit

function execute_SADALP_Z_P_Z__ (VL, da, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand_acc : bits('VL) = Z_read(da, VL);
    let operand_src : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(ActivePredicateElement(mask, e, esize)) then {
            result = Elem_set(result, e, esize, Elem_read(operand_acc, e, esize))
        } else {
            let 'element1 = SInt(Elem_read(operand_src, 2 * e + 0, DIV(esize, 2)));
            let 'element2 = SInt(Elem_read(operand_src, 2 * e + 1, DIV(esize, 2)));
            let sum : bits('esize) = (element1 + element2)[esize - 1 .. 0];
            result = Elem_set(result, e, esize, Elem_read(operand_acc, e, esize) + sum)
        }
    };
    Z_set(da, VL) = result
}

val decode_SADALP_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SADALP_Z_P_Z__ (size, U, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SADALP_Z_P_Z__(128, da, esize, g, n)
      },
      256 => {
          execute_SADALP_Z_P_Z__(256, da, esize, g, n)
      },
      512 => {
          execute_SADALP_Z_P_Z__(512, da, esize, g, n)
      },
      1024 => {
          execute_SADALP_Z_P_Z__(1024, da, esize, g, n)
      },
      2048 => {
          execute_SADALP_Z_P_Z__(2048, da, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1550) = {
    SEE = 1550;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SADALP_Z_P_Z__(size, U, Pg, Zn, Zda)
}

val execute_UADALP_Z_P_Z__ : forall 'VL 'da 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('g), int('n)) -> unit

function execute_UADALP_Z_P_Z__ (VL, da, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand_acc : bits('VL) = Z_read(da, VL);
    let operand_src : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if not_bool(ActivePredicateElement(mask, e, esize)) then {
            result = Elem_set(result, e, esize, Elem_read(operand_acc, e, esize))
        } else {
            let 'element1 = UInt(Elem_read(operand_src, 2 * e + 0, DIV(esize, 2)));
            let 'element2 = UInt(Elem_read(operand_src, 2 * e + 1, DIV(esize, 2)));
            let sum : bits('esize) = (element1 + element2)[esize - 1 .. 0];
            result = Elem_set(result, e, esize, Elem_read(operand_acc, e, esize) + sum)
        }
    };
    Z_set(da, VL) = result
}

val decode_UADALP_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UADALP_Z_P_Z__ (size, U, Pg, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UADALP_Z_P_Z__(128, da, esize, g, n)
      },
      256 => {
          execute_UADALP_Z_P_Z__(256, da, esize, g, n)
      },
      512 => {
          execute_UADALP_Z_P_Z__(512, da, esize, g, n)
      },
      1024 => {
          execute_UADALP_Z_P_Z__(1024, da, esize, g, n)
      },
      2048 => {
          execute_UADALP_Z_P_Z__(2048, da, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1551) = {
    SEE = 1551;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UADALP_Z_P_Z__(size, U, Pg, Zn, Zda)
}

val execute_SHRNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SHRNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (UInt(element) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, res[esize - 1 .. 0]);
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_SHRNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SHRNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SHRNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SHRNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SHRNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SHRNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SHRNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1552) = {
    SEE = 1552;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SHRNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SHRNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SHRNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (UInt(element) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SHRNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SHRNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SHRNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SHRNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SHRNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SHRNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SHRNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1553) = {
    SEE = 1553;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SHRNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_RSHRNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_RSHRNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, res[esize - 1 .. 0]);
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_RSHRNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_RSHRNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_RSHRNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_RSHRNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_RSHRNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_RSHRNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_RSHRNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1554) = {
    SEE = 1554;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RSHRNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_RSHRNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_RSHRNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_RSHRNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_RSHRNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_RSHRNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_RSHRNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_RSHRNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_RSHRNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_RSHRNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1555) = {
    SEE = 1555;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RSHRNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQSHRNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQSHRNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (SInt(element) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, SignedSat(res, esize));
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_SQSHRNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQSHRNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQSHRNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQSHRNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQSHRNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQSHRNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQSHRNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1556) = {
    SEE = 1556;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQSHRNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQSHRNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQSHRNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (SInt(element) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, SignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_SQSHRNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQSHRNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQSHRNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQSHRNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQSHRNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQSHRNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQSHRNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1557) = {
    SEE = 1557;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQSHRNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_UQSHRNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQSHRNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (UInt(element) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, UnsignedSat(res, esize));
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_UQSHRNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQSHRNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_UQSHRNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQSHRNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQSHRNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQSHRNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQSHRNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1558) = {
    SEE = 1558;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQSHRNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_UQSHRNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQSHRNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (UInt(element) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, UnsignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_UQSHRNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQSHRNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_UQSHRNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQSHRNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQSHRNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQSHRNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQSHRNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1559) = {
    SEE = 1559;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQSHRNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQRSHRNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, SignedSat(res, esize));
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQRSHRNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQRSHRNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1560) = {
    SEE = 1560;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQRSHRNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, SignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQRSHRNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQRSHRNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1561) = {
    SEE = 1561;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_UQRSHRNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQRSHRNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, UnsignedSat(res, esize));
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_UQRSHRNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQRSHRNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_UQRSHRNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQRSHRNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQRSHRNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQRSHRNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQRSHRNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1562) = {
    SEE = 1562;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQRSHRNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_UQRSHRNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQRSHRNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, UnsignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_UQRSHRNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQRSHRNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_UQRSHRNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQRSHRNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQRSHRNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQRSHRNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQRSHRNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1563) = {
    SEE = 1563;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQRSHRNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQSHRUNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQSHRUNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (SInt(element) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, UnsignedSat(res, esize));
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_SQSHRUNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQSHRUNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQSHRUNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQSHRUNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQSHRUNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQSHRUNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQSHRUNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1564) = {
    SEE = 1564;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQSHRUNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQSHRUNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQSHRUNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = (SInt(element) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, UnsignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_SQSHRUNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQSHRUNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQSHRUNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQSHRUNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQSHRUNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQSHRUNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQSHRUNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1565) = {
    SEE = 1565;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQSHRUNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQRSHRUNB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRUNB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 0, esize, UnsignedSat(res, esize));
        result = Elem_set(result, 2 * e + 1, esize, Zeros(esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRUNB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQRSHRUNB_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQRSHRUNB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRUNB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRUNB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRUNB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRUNB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1566) = {
    SEE = 1566;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRUNB_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SQRSHRUNT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRUNT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
        let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, 2 * e + 1, esize, UnsignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRUNT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQRSHRUNT_Z_ZI__ (tszh, tszl, imm3, U, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match VL {
      128 => {
          execute_SQRSHRUNT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRUNT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRUNT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRUNT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRUNT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1567) = {
    SEE = 1567;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRUNT_Z_ZI__(tszh, tszl, imm3, U, R, T, Zn, Zd)
}

val execute_SRSHR_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_SRSHR_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SRSHR_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_SRSHR_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_SRSHR_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_SRSHR_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_SRSHR_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_SRSHR_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_SRSHR_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_SRSHR_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_SRSHR_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_SRSHR_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_SRSHR_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_SRSHR_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_SRSHR_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_SRSHR_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_SRSHR_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_SRSHR_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_SRSHR_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_SRSHR_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_SRSHR_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_SRSHR_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_SRSHR_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_SRSHR_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1568) = {
    SEE = 1568;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SRSHR_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_URSHR_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_URSHR_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_URSHR_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_URSHR_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_URSHR_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_URSHR_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_URSHR_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_URSHR_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_URSHR_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_URSHR_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_URSHR_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_URSHR_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_URSHR_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_URSHR_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_URSHR_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_URSHR_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_URSHR_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_URSHR_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_URSHR_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_URSHR_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_URSHR_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_URSHR_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_URSHR_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_URSHR_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1569) = {
    SEE = 1569;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_URSHR_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_SQSHL_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_SQSHL_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = (element1 << shift);
            result = Elem_set(result, e, esize, SignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQSHL_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_SQSHL_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = UInt(tsize @ imm3) - esize;
    match esize {
      8 => {
          match VL {
            128 => {
                execute_SQSHL_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_SQSHL_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_SQSHL_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_SQSHL_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_SQSHL_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_SQSHL_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_SQSHL_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_SQSHL_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_SQSHL_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_SQSHL_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_SQSHL_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_SQSHL_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_SQSHL_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_SQSHL_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_SQSHL_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_SQSHL_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_SQSHL_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_SQSHL_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_SQSHL_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_SQSHL_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1570) = {
    SEE = 1570;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQSHL_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_UQSHL_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_UQSHL_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = (element1 << shift);
            result = Elem_set(result, e, esize, UnsignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQSHL_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_UQSHL_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = UInt(tsize @ imm3) - esize;
    match esize {
      8 => {
          match VL {
            128 => {
                execute_UQSHL_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_UQSHL_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_UQSHL_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_UQSHL_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_UQSHL_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_UQSHL_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_UQSHL_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_UQSHL_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_UQSHL_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_UQSHL_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_UQSHL_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_UQSHL_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_UQSHL_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_UQSHL_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_UQSHL_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_UQSHL_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_UQSHL_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_UQSHL_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_UQSHL_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_UQSHL_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1571) = {
    SEE = 1571;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQSHL_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_SQSHLU_Z_P_ZI__ : forall 'VL 'dn 'esize 'g 'shift,
  ('g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('shift)) -> unit

function execute_SQSHLU_Z_P_ZI__ (VL, dn, esize, g, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = (element1 << shift);
            result = Elem_set(result, e, esize, UnsignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQSHLU_Z_P_ZI__ : (bits(2), bits(1), bits(1), bits(3), bits(2), bits(3), bits(5)) -> unit

function decode_SQSHLU_Z_P_ZI__ (tszh, L, U, Pg, tszl, imm3, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'shift = UInt(tsize @ imm3) - esize;
    match esize {
      8 => {
          match VL {
            128 => {
                execute_SQSHLU_Z_P_ZI__(128, dn, 8, g, shift)
            },
            256 => {
                execute_SQSHLU_Z_P_ZI__(256, dn, 8, g, shift)
            },
            512 => {
                execute_SQSHLU_Z_P_ZI__(512, dn, 8, g, shift)
            },
            1024 => {
                execute_SQSHLU_Z_P_ZI__(1024, dn, 8, g, shift)
            },
            2048 => {
                execute_SQSHLU_Z_P_ZI__(2048, dn, 8, g, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_SQSHLU_Z_P_ZI__(128, dn, 16, g, shift)
            },
            256 => {
                execute_SQSHLU_Z_P_ZI__(256, dn, 16, g, shift)
            },
            512 => {
                execute_SQSHLU_Z_P_ZI__(512, dn, 16, g, shift)
            },
            1024 => {
                execute_SQSHLU_Z_P_ZI__(1024, dn, 16, g, shift)
            },
            2048 => {
                execute_SQSHLU_Z_P_ZI__(2048, dn, 16, g, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_SQSHLU_Z_P_ZI__(128, dn, 32, g, shift)
            },
            256 => {
                execute_SQSHLU_Z_P_ZI__(256, dn, 32, g, shift)
            },
            512 => {
                execute_SQSHLU_Z_P_ZI__(512, dn, 32, g, shift)
            },
            1024 => {
                execute_SQSHLU_Z_P_ZI__(1024, dn, 32, g, shift)
            },
            2048 => {
                execute_SQSHLU_Z_P_ZI__(2048, dn, 32, g, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_SQSHLU_Z_P_ZI__(128, dn, 64, g, shift)
            },
            256 => {
                execute_SQSHLU_Z_P_ZI__(256, dn, 64, g, shift)
            },
            512 => {
                execute_SQSHLU_Z_P_ZI__(512, dn, 64, g, shift)
            },
            1024 => {
                execute_SQSHLU_Z_P_ZI__(1024, dn, 64, g, shift)
            },
            2048 => {
                execute_SQSHLU_Z_P_ZI__(2048, dn, 64, g, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1572) = {
    SEE = 1572;
    let tszh = Slice(__opcode, 22, 2);
    let L = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let tszl = Slice(__opcode, 8, 2);
    let imm3 = Slice(__opcode, 5, 3);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQSHLU_Z_P_ZI__(tszh, L, U, Pg, tszl, imm3, Zdn)
}

val execute_SSHLLB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SSHLLB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, 2 * e + 0, esize);
        let 'shifted_value = (SInt(element) << shift);
        result = Elem_set(result, e, 2 * esize, shifted_value[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSHLLB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSHLLB_Z_ZI__ (tszh, tszl, imm3, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = UInt(tsize @ imm3) - esize;
    match VL {
      128 => {
          execute_SSHLLB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SSHLLB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SSHLLB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SSHLLB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SSHLLB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1573) = {
    SEE = 1573;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSHLLB_Z_ZI__(tszh, tszl, imm3, U, T, Zn, Zd)
}

val execute_SSHLLT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SSHLLT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, 2 * e + 1, esize);
        let 'shifted_value = (SInt(element) << shift);
        result = Elem_set(result, e, 2 * esize, shifted_value[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSHLLT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSHLLT_Z_ZI__ (tszh, tszl, imm3, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = UInt(tsize @ imm3) - esize;
    match VL {
      128 => {
          execute_SSHLLT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_SSHLLT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_SSHLLT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SSHLLT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SSHLLT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1574) = {
    SEE = 1574;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSHLLT_Z_ZI__(tszh, tszl, imm3, U, T, Zn, Zd)
}

val execute_USHLLB_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_USHLLB_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, 2 * e + 0, esize);
        let 'shifted_value = (UInt(element) << shift);
        result = Elem_set(result, e, 2 * esize, shifted_value[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_USHLLB_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_USHLLB_Z_ZI__ (tszh, tszl, imm3, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = UInt(tsize @ imm3) - esize;
    match VL {
      128 => {
          execute_USHLLB_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_USHLLB_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_USHLLB_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_USHLLB_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_USHLLB_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1575) = {
    SEE = 1575;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_USHLLB_Z_ZI__(tszh, tszl, imm3, U, T, Zn, Zd)
}

val execute_USHLLT_Z_ZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_USHLLT_Z_ZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element : bits('esize) = Elem_read(operand, 2 * e + 1, esize);
        let 'shifted_value = (UInt(element) << shift);
        result = Elem_set(result, e, 2 * esize, shifted_value[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_USHLLT_Z_ZI__ : (bits(1), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_USHLLT_Z_ZI__ (tszh, tszl, imm3, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {8, 16, 32} = 8;
    match tsize {
      0b000 => {
          throw(Error_Undefined())
      },
      0b001 => {
          esize = 8
      },
      [bitzero, bitone, _] => {
          esize = 16
      },
      [bitone, _, _] => {
          esize = 32
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = UInt(tsize @ imm3) - esize;
    match VL {
      128 => {
          execute_USHLLT_Z_ZI__(128, d, esize, n, shift)
      },
      256 => {
          execute_USHLLT_Z_ZI__(256, d, esize, n, shift)
      },
      512 => {
          execute_USHLLT_Z_ZI__(512, d, esize, n, shift)
      },
      1024 => {
          execute_USHLLT_Z_ZI__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_USHLLT_Z_ZI__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1576) = {
    SEE = 1576;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_USHLLT_Z_ZI__(tszh, tszl, imm3, U, T, Zn, Zd)
}

val execute_SQXTNB_Z_ZZ__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQXTNB_Z_ZZ__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let res : bits('halfesize) = SignedSat(element1, halfesize);
        result = Elem_set(result, 2 * e + 0, halfesize, res);
        result = Elem_set(result, 2 * e + 1, halfesize, Zeros(halfesize))
    };
    Z_set(d, VL) = result
}

val decode_SQXTNB_Z_ZZ__ : (bits(1), bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQXTNB_Z_ZZ__ (tszh, tszl, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {16, 32, 64} = 16;
    match tsize {
      0b001 => {
          esize = 16
      },
      0b010 => {
          esize = 32
      },
      0b100 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQXTNB_Z_ZZ__(128, d, esize, n)
      },
      256 => {
          execute_SQXTNB_Z_ZZ__(256, d, esize, n)
      },
      512 => {
          execute_SQXTNB_Z_ZZ__(512, d, esize, n)
      },
      1024 => {
          execute_SQXTNB_Z_ZZ__(1024, d, esize, n)
      },
      2048 => {
          execute_SQXTNB_Z_ZZ__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1577) = {
    SEE = 1577;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQXTNB_Z_ZZ__(tszh, tszl, U, T, Zn, Zd)
}

val execute_UQXTNB_Z_ZZ__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UQXTNB_Z_ZZ__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let res : bits('halfesize) = UnsignedSat(element1, halfesize);
        result = Elem_set(result, 2 * e + 0, halfesize, res);
        result = Elem_set(result, 2 * e + 1, halfesize, Zeros(halfesize))
    };
    Z_set(d, VL) = result
}

val decode_UQXTNB_Z_ZZ__ : (bits(1), bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQXTNB_Z_ZZ__ (tszh, tszl, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {16, 32, 64} = 16;
    match tsize {
      0b001 => {
          esize = 16
      },
      0b010 => {
          esize = 32
      },
      0b100 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UQXTNB_Z_ZZ__(128, d, esize, n)
      },
      256 => {
          execute_UQXTNB_Z_ZZ__(256, d, esize, n)
      },
      512 => {
          execute_UQXTNB_Z_ZZ__(512, d, esize, n)
      },
      1024 => {
          execute_UQXTNB_Z_ZZ__(1024, d, esize, n)
      },
      2048 => {
          execute_UQXTNB_Z_ZZ__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1578) = {
    SEE = 1578;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQXTNB_Z_ZZ__(tszh, tszl, U, T, Zn, Zd)
}

val execute_SQXTUNB_Z_ZZ__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQXTUNB_Z_ZZ__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let res : bits('halfesize) = UnsignedSat(element1, halfesize);
        result = Elem_set(result, 2 * e + 0, halfesize, res);
        result = Elem_set(result, 2 * e + 1, halfesize, Zeros(halfesize))
    };
    Z_set(d, VL) = result
}

val decode_SQXTUNB_Z_ZZ__ : (bits(1), bits(2), bits(1), bits(5), bits(5)) -> unit

function decode_SQXTUNB_Z_ZZ__ (tszh, tszl, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {16, 32, 64} = 16;
    match tsize {
      0b001 => {
          esize = 16
      },
      0b010 => {
          esize = 32
      },
      0b100 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQXTUNB_Z_ZZ__(128, d, esize, n)
      },
      256 => {
          execute_SQXTUNB_Z_ZZ__(256, d, esize, n)
      },
      512 => {
          execute_SQXTUNB_Z_ZZ__(512, d, esize, n)
      },
      1024 => {
          execute_SQXTUNB_Z_ZZ__(1024, d, esize, n)
      },
      2048 => {
          execute_SQXTUNB_Z_ZZ__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1579) = {
    SEE = 1579;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQXTUNB_Z_ZZ__(tszh, tszl, T, Zn, Zd)
}

val execute_SQXTNT_Z_ZZ__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQXTNT_Z_ZZ__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let res : bits('halfesize) = SignedSat(element1, halfesize);
        result = Elem_set(result, 2 * e + 1, halfesize, res)
    };
    Z_set(d, VL) = result
}

val decode_SQXTNT_Z_ZZ__ : (bits(1), bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQXTNT_Z_ZZ__ (tszh, tszl, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {16, 32, 64} = 16;
    match tsize {
      0b001 => {
          esize = 16
      },
      0b010 => {
          esize = 32
      },
      0b100 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQXTNT_Z_ZZ__(128, d, esize, n)
      },
      256 => {
          execute_SQXTNT_Z_ZZ__(256, d, esize, n)
      },
      512 => {
          execute_SQXTNT_Z_ZZ__(512, d, esize, n)
      },
      1024 => {
          execute_SQXTNT_Z_ZZ__(1024, d, esize, n)
      },
      2048 => {
          execute_SQXTNT_Z_ZZ__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1580) = {
    SEE = 1580;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQXTNT_Z_ZZ__(tszh, tszl, U, T, Zn, Zd)
}

val execute_UQXTNT_Z_ZZ__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UQXTNT_Z_ZZ__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let res : bits('halfesize) = UnsignedSat(element1, halfesize);
        result = Elem_set(result, 2 * e + 1, halfesize, res)
    };
    Z_set(d, VL) = result
}

val decode_UQXTNT_Z_ZZ__ : (bits(1), bits(2), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UQXTNT_Z_ZZ__ (tszh, tszl, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {16, 32, 64} = 16;
    match tsize {
      0b001 => {
          esize = 16
      },
      0b010 => {
          esize = 32
      },
      0b100 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UQXTNT_Z_ZZ__(128, d, esize, n)
      },
      256 => {
          execute_UQXTNT_Z_ZZ__(256, d, esize, n)
      },
      512 => {
          execute_UQXTNT_Z_ZZ__(512, d, esize, n)
      },
      1024 => {
          execute_UQXTNT_Z_ZZ__(1024, d, esize, n)
      },
      2048 => {
          execute_UQXTNT_Z_ZZ__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1581) = {
    SEE = 1581;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQXTNT_Z_ZZ__(tszh, tszl, U, T, Zn, Zd)
}

val execute_SQXTUNT_Z_ZZ__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize in {16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQXTUNT_Z_ZZ__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let res : bits('halfesize) = UnsignedSat(element1, halfesize);
        result = Elem_set(result, 2 * e + 1, halfesize, res)
    };
    Z_set(d, VL) = result
}

val decode_SQXTUNT_Z_ZZ__ : (bits(1), bits(2), bits(1), bits(5), bits(5)) -> unit

function decode_SQXTUNT_Z_ZZ__ (tszh, tszl, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(3) = tszh @ tszl;
    esize : {16, 32, 64} = 16;
    match tsize {
      0b001 => {
          esize = 16
      },
      0b010 => {
          esize = 32
      },
      0b100 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQXTUNT_Z_ZZ__(128, d, esize, n)
      },
      256 => {
          execute_SQXTUNT_Z_ZZ__(256, d, esize, n)
      },
      512 => {
          execute_SQXTUNT_Z_ZZ__(512, d, esize, n)
      },
      1024 => {
          execute_SQXTUNT_Z_ZZ__(1024, d, esize, n)
      },
      2048 => {
          execute_SQXTUNT_Z_ZZ__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1582) = {
    SEE = 1582;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQXTUNT_Z_ZZ__(tszh, tszl, T, Zn, Zd)
}

val execute_SMULLT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SMULLT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let 'res = element1 * element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SMULLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMULLT_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SMULLT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SMULLT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SMULLT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SMULLT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SMULLT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1583) = {
    SEE = 1583;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SMULLT_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_SMULLB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SMULLB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let 'res = element1 * element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SMULLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMULLB_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SMULLB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SMULLB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SMULLB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SMULLB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SMULLB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1584) = {
    SEE = 1584;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SMULLB_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_UMULLT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UMULLT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let 'res = element1 * element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UMULLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMULLT_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UMULLT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_UMULLT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_UMULLT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_UMULLT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_UMULLT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1585) = {
    SEE = 1585;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UMULLT_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_UMULLB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UMULLB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let 'res = element1 * element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UMULLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMULLB_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UMULLB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_UMULLB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_UMULLB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_UMULLB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_UMULLB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1586) = {
    SEE = 1586;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UMULLB_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_SQDMULLT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SQDMULLT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULLT_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQDMULLT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SQDMULLT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SQDMULLT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SQDMULLT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SQDMULLT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1587) = {
    SEE = 1587;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULLT_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_SQDMULLB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SQDMULLB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(res, esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULLB_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQDMULLB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SQDMULLB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SQDMULLB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SQDMULLB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SQDMULLB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1588) = {
    SEE = 1588;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULLB_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_SMLALT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SMLALT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_SMLALT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLALT_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SMLALT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SMLALT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SMLALT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SMLALT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SMLALT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1589) = {
    SEE = 1589;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLALT_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_SMLALB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SMLALB_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_SMLALB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLALB_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SMLALB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SMLALB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SMLALB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SMLALB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SMLALB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1590) = {
    SEE = 1590;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLALB_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_UMLALT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UMLALT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_UMLALT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLALT_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UMLALT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UMLALT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UMLALT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UMLALT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UMLALT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1591) = {
    SEE = 1591;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLALT_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_UMLALB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UMLALB_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_UMLALB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLALB_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UMLALB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UMLALB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UMLALB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UMLALB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UMLALB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1592) = {
    SEE = 1592;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLALB_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_SQDMLALT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_SQDMLALT_Z_ZZZ__ (VL, da, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)));
        let 'element3 = SInt(Elem_read(result, e, esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, esize));
        result = Elem_set(result, e, esize, SignedSat(element3 + product, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLALT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLALT_Z_ZZZ__ (size, Zm, S, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel1 = 1;
    let 'sel2 = 1;
    match VL {
      128 => {
          execute_SQDMLALT_Z_ZZZ__(128, da, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_SQDMLALT_Z_ZZZ__(256, da, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_SQDMLALT_Z_ZZZ__(512, da, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_SQDMLALT_Z_ZZZ__(1024, da, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_SQDMLALT_Z_ZZZ__(2048, da, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1593) = {
    SEE = 1593;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLALT_Z_ZZZ__(size, Zm, S, T, Zn, Zda)
}

val execute_SQDMLALB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_SQDMLALB_Z_ZZZ__ (VL, da, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)));
        let 'element3 = SInt(Elem_read(result, e, esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, esize));
        result = Elem_set(result, e, esize, SignedSat(element3 + product, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLALB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLALB_Z_ZZZ__ (size, Zm, S, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel1 = 0;
    let 'sel2 = 0;
    match VL {
      128 => {
          execute_SQDMLALB_Z_ZZZ__(128, da, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_SQDMLALB_Z_ZZZ__(256, da, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_SQDMLALB_Z_ZZZ__(512, da, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_SQDMLALB_Z_ZZZ__(1024, da, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_SQDMLALB_Z_ZZZ__(2048, da, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1594) = {
    SEE = 1594;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLALB_Z_ZZZ__(size, Zm, S, T, Zn, Zda)
}

val execute_SMLSLT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SMLSLT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_SMLSLT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLSLT_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SMLSLT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SMLSLT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SMLSLT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SMLSLT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SMLSLT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1595) = {
    SEE = 1595;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLSLT_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_SMLSLB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SMLSLB_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_SMLSLB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLSLB_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SMLSLB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SMLSLB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SMLSLB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SMLSLB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SMLSLB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1596) = {
    SEE = 1596;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLSLB_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_UMLSLT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UMLSLT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_UMLSLT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLSLT_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UMLSLT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UMLSLT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UMLSLT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UMLSLT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UMLSLT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1597) = {
    SEE = 1597;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLSLT_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_UMLSLB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UMLSLB_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_UMLSLB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLSLB_Z_ZZZ__ (size, Zm, S, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UMLSLB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UMLSLB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UMLSLB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UMLSLB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UMLSLB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1598) = {
    SEE = 1598;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLSLB_Z_ZZZ__(size, Zm, S, U, T, Zn, Zda)
}

val execute_SQDMLSLT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_SQDMLSLT_Z_ZZZ__ (VL, da, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)));
        let 'element3 = SInt(Elem_read(result, e, esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, esize));
        result = Elem_set(result, e, esize, SignedSat(element3 - product, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLSLT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLSLT_Z_ZZZ__ (size, Zm, S, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel1 = 1;
    let 'sel2 = 1;
    match VL {
      128 => {
          execute_SQDMLSLT_Z_ZZZ__(128, da, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_SQDMLSLT_Z_ZZZ__(256, da, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_SQDMLSLT_Z_ZZZ__(512, da, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_SQDMLSLT_Z_ZZZ__(1024, da, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_SQDMLSLT_Z_ZZZ__(2048, da, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1599) = {
    SEE = 1599;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLSLT_Z_ZZZ__(size, Zm, S, T, Zn, Zda)
}

val execute_SQDMLSLB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_SQDMLSLB_Z_ZZZ__ (VL, da, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)));
        let 'element3 = SInt(Elem_read(result, e, esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, esize));
        result = Elem_set(result, e, esize, SignedSat(element3 - product, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLSLB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLSLB_Z_ZZZ__ (size, Zm, S, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel1 = 0;
    let 'sel2 = 0;
    match VL {
      128 => {
          execute_SQDMLSLB_Z_ZZZ__(128, da, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_SQDMLSLB_Z_ZZZ__(256, da, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_SQDMLSLB_Z_ZZZ__(512, da, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_SQDMLSLB_Z_ZZZ__(1024, da, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_SQDMLSLB_Z_ZZZ__(2048, da, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1600) = {
    SEE = 1600;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLSLB_Z_ZZZ__(size, Zm, S, T, Zn, Zda)
}

val execute_SABALT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SABALT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let absdiff : bits('esize) = Abs(element1 - element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + absdiff)
    };
    Z_set(da, VL) = result
}

val decode_SABALT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SABALT_Z_ZZZ__ (size, Zm, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SABALT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SABALT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SABALT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SABALT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SABALT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1601) = {
    SEE = 1601;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SABALT_Z_ZZZ__(size, Zm, U, T, Zn, Zda)
}

val execute_SABALB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SABALB_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let absdiff : bits('esize) = Abs(element1 - element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + absdiff)
    };
    Z_set(da, VL) = result
}

val decode_SABALB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SABALB_Z_ZZZ__ (size, Zm, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SABALB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SABALB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SABALB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SABALB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SABALB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1602) = {
    SEE = 1602;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SABALB_Z_ZZZ__(size, Zm, U, T, Zn, Zda)
}

val execute_UABALT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UABALT_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let absdiff : bits('esize) = Abs(element1 - element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + absdiff)
    };
    Z_set(da, VL) = result
}

val decode_UABALT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UABALT_Z_ZZZ__ (size, Zm, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UABALT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UABALT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UABALT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UABALT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UABALT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1603) = {
    SEE = 1603;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UABALT_Z_ZZZ__(size, Zm, U, T, Zn, Zda)
}

val execute_UABALB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_UABALB_Z_ZZZ__ (VL, da, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let absdiff : bits('esize) = Abs(element1 - element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + absdiff)
    };
    Z_set(da, VL) = result
}

val decode_UABALB_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UABALB_Z_ZZZ__ (size, Zm, U, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_UABALB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_UABALB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_UABALB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_UABALB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_UABALB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1604) = {
    SEE = 1604;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UABALB_Z_ZZZ__(size, Zm, U, T, Zn, Zda)
}

val execute_SABA_Z_ZZZ__ : forall 'VL 'da 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_SABA_Z_ZZZ__ (VL, da, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let absdiff : bits('esize) = Abs(element1 - element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + absdiff)
    };
    Z_set(da, VL) = result
}

val decode_SABA_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SABA_Z_ZZZ__ (size, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SABA_Z_ZZZ__(128, da, esize, m, n, is_unsigned)
      },
      256 => {
          execute_SABA_Z_ZZZ__(256, da, esize, m, n, is_unsigned)
      },
      512 => {
          execute_SABA_Z_ZZZ__(512, da, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_SABA_Z_ZZZ__(1024, da, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_SABA_Z_ZZZ__(2048, da, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1605) = {
    SEE = 1605;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SABA_Z_ZZZ__(size, Zm, U, Zn, Zda)
}

val execute_UABA_Z_ZZZ__ : forall 'VL 'da 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_UABA_Z_ZZZ__ (VL, da, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let absdiff : bits('esize) = Abs(element1 - element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + absdiff)
    };
    Z_set(da, VL) = result
}

val decode_UABA_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UABA_Z_ZZZ__ (size, Zm, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UABA_Z_ZZZ__(128, da, esize, m, n, is_unsigned)
      },
      256 => {
          execute_UABA_Z_ZZZ__(256, da, esize, m, n, is_unsigned)
      },
      512 => {
          execute_UABA_Z_ZZZ__(512, da, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_UABA_Z_ZZZ__(1024, da, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_UABA_Z_ZZZ__(2048, da, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1606) = {
    SEE = 1606;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UABA_Z_ZZZ__(size, Zm, U, Zn, Zda)
}

val execute_SADDWT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SADDWT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 + element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SADDWT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SADDWT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SADDWT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SADDWT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SADDWT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SADDWT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SADDWT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1607) = {
    SEE = 1607;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SADDWT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SADDWB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SADDWB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 + element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SADDWB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SADDWB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SADDWB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SADDWB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SADDWB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SADDWB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SADDWB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1608) = {
    SEE = 1608;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SADDWB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_UADDWT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UADDWT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 + element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UADDWT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UADDWT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UADDWT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_UADDWT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_UADDWT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_UADDWT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_UADDWT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1609) = {
    SEE = 1609;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UADDWT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_UADDWB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UADDWB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 + element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UADDWB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UADDWB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UADDWB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_UADDWB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_UADDWB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_UADDWB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_UADDWB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1610) = {
    SEE = 1610;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UADDWB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SSUBWT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SSUBWT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 - element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSUBWT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSUBWT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SSUBWT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SSUBWT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SSUBWT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SSUBWT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SSUBWT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1611) = {
    SEE = 1611;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSUBWT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SSUBWB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SSUBWB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 - element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSUBWB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSUBWB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SSUBWB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SSUBWB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SSUBWB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SSUBWB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SSUBWB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1612) = {
    SEE = 1612;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSUBWB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_USUBWT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_USUBWT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 - element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_USUBWT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_USUBWT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_USUBWT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_USUBWT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_USUBWT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_USUBWT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_USUBWT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1613) = {
    SEE = 1613;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_USUBWT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_USUBWB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_USUBWB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        result = Elem_set(result, e, esize, (element1 - element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_USUBWB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_USUBWB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_USUBWB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_USUBWB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_USUBWB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_USUBWB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_USUBWB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1614) = {
    SEE = 1614;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_USUBWB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_PMUL_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_PMUL_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        result = Elem_set(result, e, esize, PolynomialMult(element1, element2)[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_PMUL_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_PMUL_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_PMUL_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_PMUL_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_PMUL_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_PMUL_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_PMUL_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1615) = {
    SEE = 1615;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMUL_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_PMULLT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_PMULLT_Z_ZZ__ (VL, d, esize, m, n) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 1, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 1, DIV(esize, 2));
        result = Elem_set(result, e, esize, PolynomialMult(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_PMULLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_PMULLT_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    esize : {16, 64} = 16;
    match size {
      0b01 => {
          esize = 16
      },
      0b11 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_PMULLT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_PMULLT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_PMULLT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_PMULLT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_PMULLT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1616) = {
    SEE = 1616;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMULLT_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_PMULLB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {16, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_PMULLB_Z_ZZ__ (VL, d, esize, m, n) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 0, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 0, DIV(esize, 2));
        result = Elem_set(result, e, esize, PolynomialMult(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_PMULLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_PMULLB_Z_ZZ__ (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    esize : {16, 64} = 16;
    match size {
      0b01 => {
          esize = 16
      },
      0b11 => {
          esize = 64
      },
      _ => {
          throw(Error_Undefined())
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_PMULLB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_PMULLB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_PMULLB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_PMULLB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_PMULLB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1617) = {
    SEE = 1617;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMULLB_Z_ZZ__(size, Zm, U, T, Zn, Zd)
}

val execute_PMULLT_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_PMULLT_Z_ZZ_Q (VL, d, esize, m, n) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 1, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 1, DIV(esize, 2));
        result = Elem_set(result, e, esize, PolynomialMult(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_PMULLT_Z_ZZ_Q : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_PMULLT_Z_ZZ_Q (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2PMULL128()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_PMULLT_Z_ZZ_Q(128, d, esize, m, n)
      },
      256 => {
          execute_PMULLT_Z_ZZ_Q(256, d, esize, m, n)
      },
      512 => {
          execute_PMULLT_Z_ZZ_Q(512, d, esize, m, n)
      },
      1024 => {
          execute_PMULLT_Z_ZZ_Q(1024, d, esize, m, n)
      },
      2048 => {
          execute_PMULLT_Z_ZZ_Q(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1618) = {
    SEE = 1618;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMULLT_Z_ZZ_Q(size, Zm, U, T, Zn, Zd)
}

val execute_PMULLB_Z_ZZ_Q : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_PMULLB_Z_ZZ_Q (VL, d, esize, m, n) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(div('esize, 2)) = Elem_read(operand1, 2 * e + 0, DIV(esize, 2));
        let element2 : bits(div('esize, 2)) = Elem_read(operand2, 2 * e + 0, DIV(esize, 2));
        result = Elem_set(result, e, esize, PolynomialMult(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_PMULLB_Z_ZZ_Q : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_PMULLB_Z_ZZ_Q (size, Zm, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2PMULL128()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_PMULLB_Z_ZZ_Q(128, d, esize, m, n)
      },
      256 => {
          execute_PMULLB_Z_ZZ_Q(256, d, esize, m, n)
      },
      512 => {
          execute_PMULLB_Z_ZZ_Q(512, d, esize, m, n)
      },
      1024 => {
          execute_PMULLB_Z_ZZ_Q(1024, d, esize, m, n)
      },
      2048 => {
          execute_PMULLB_Z_ZZ_Q(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1619) = {
    SEE = 1619;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMULLB_Z_ZZ_Q(size, Zm, U, T, Zn, Zd)
}

val execute_SQSHL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SQSHL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = (element >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, SignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQSHL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQSHL_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SQSHL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SQSHL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SQSHL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SQSHL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SQSHL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1620) = {
    SEE = 1620;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQSHL_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_UQSHL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UQSHL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = (element >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, UnsignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQSHL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UQSHL_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_UQSHL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UQSHL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UQSHL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UQSHL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UQSHL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1621) = {
    SEE = 1621;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQSHL_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_SRSHL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SRSHL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SRSHL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SRSHL_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SRSHL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SRSHL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SRSHL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SRSHL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SRSHL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1622) = {
    SEE = 1622;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SRSHL_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_URSHL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_URSHL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_URSHL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_URSHL_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_URSHL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_URSHL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_URSHL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_URSHL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_URSHL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1623) = {
    SEE = 1623;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_URSHL_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_SQRSHL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SQRSHL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, SignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQRSHL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQRSHL_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SQRSHL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SQRSHL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SQRSHL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SQRSHL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SQRSHL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1624) = {
    SEE = 1624;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQRSHL_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_UQRSHL_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UQRSHL_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, UnsignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQRSHL_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UQRSHL_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_UQRSHL_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UQRSHL_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UQRSHL_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UQRSHL_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UQRSHL_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1625) = {
    SEE = 1625;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQRSHL_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_SQSHLR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SQSHLR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = (element >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, SignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand2, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQSHLR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQSHLR_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SQSHLR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SQSHLR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SQSHLR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SQSHLR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SQSHLR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1626) = {
    SEE = 1626;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQSHLR_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_UQSHLR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UQSHLR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = (element >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, UnsignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand2, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQSHLR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UQSHLR_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_UQSHLR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UQSHLR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UQSHLR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UQSHLR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UQSHLR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1627) = {
    SEE = 1627;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQSHLR_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_SRSHLR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SRSHLR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand2, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SRSHLR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SRSHLR_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SRSHLR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SRSHLR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SRSHLR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SRSHLR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SRSHLR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1628) = {
    SEE = 1628;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SRSHLR_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_URSHLR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_URSHLR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand2, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_URSHLR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_URSHLR_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_URSHLR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_URSHLR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_URSHLR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_URSHLR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_URSHLR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1629) = {
    SEE = 1629;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_URSHLR_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_SQRSHLR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SQRSHLR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = SInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, SignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand2, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQRSHLR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQRSHLR_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SQRSHLR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SQRSHLR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SQRSHLR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SQRSHLR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SQRSHLR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1630) = {
    SEE = 1630;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQRSHLR_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_UQRSHLR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UQRSHLR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'element = UInt(Elem_read(operand1, e, esize));
            shift : int = ShiftSat(SInt(Elem_read(operand2, e, esize)), esize);
            res : int = undefined;
            if shift >= 0 then {
                res = (element << shift)
            } else {
                let 'shift = negate(shift);
                res = ((element + (1 << (shift - 1))) >> shift)
            };
            let 'res = res;
            result = Elem_set(result, e, esize, UnsignedSat(res, esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand2, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQRSHLR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UQRSHLR_Z_P_ZZ__ (size, Q, R, N, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_UQRSHLR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UQRSHLR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UQRSHLR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UQRSHLR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UQRSHLR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1631) = {
    SEE = 1631;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let R = Slice(__opcode, 18, 1);
    let N = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQRSHLR_Z_P_ZZ__(size, Q, R, N, U, Pg, Zm, Zdn)
}

val execute_ADDHNB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_ADDHNB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 + element2) >> halfesize);
        result = Elem_set(result, 2 * e + 0, halfesize, res[halfesize - 1 .. 0]);
        result = Elem_set(result, 2 * e + 1, halfesize, Zeros(halfesize))
    };
    Z_set(d, VL) = result
}

val decode_ADDHNB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_ADDHNB_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_ADDHNB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_ADDHNB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_ADDHNB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_ADDHNB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_ADDHNB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1632) = {
    SEE = 1632;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ADDHNB_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_ADDHNT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_ADDHNT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 + element2) >> halfesize);
        result = Elem_set(result, 2 * e + 1, halfesize, res[halfesize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_ADDHNT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_ADDHNT_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_ADDHNT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_ADDHNT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_ADDHNT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_ADDHNT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_ADDHNT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1633) = {
    SEE = 1633;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ADDHNT_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_SUBHNB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SUBHNB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 - element2) >> halfesize);
        result = Elem_set(result, 2 * e + 0, halfesize, res[halfesize - 1 .. 0]);
        result = Elem_set(result, 2 * e + 1, halfesize, Zeros(halfesize))
    };
    Z_set(d, VL) = result
}

val decode_SUBHNB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SUBHNB_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SUBHNB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SUBHNB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SUBHNB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SUBHNB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SUBHNB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1634) = {
    SEE = 1634;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SUBHNB_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_SUBHNT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SUBHNT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 - element2) >> halfesize);
        result = Elem_set(result, 2 * e + 1, halfesize, res[halfesize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SUBHNT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SUBHNT_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SUBHNT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SUBHNT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SUBHNT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SUBHNT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SUBHNT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1635) = {
    SEE = 1635;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SUBHNT_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_RADDHNB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_RADDHNB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 + element2 + (1 << (halfesize - 1))) >> halfesize);
        result = Elem_set(result, 2 * e + 0, halfesize, res[halfesize - 1 .. 0]);
        result = Elem_set(result, 2 * e + 1, halfesize, Zeros(halfesize))
    };
    Z_set(d, VL) = result
}

val decode_RADDHNB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_RADDHNB_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_RADDHNB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_RADDHNB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_RADDHNB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_RADDHNB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_RADDHNB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1636) = {
    SEE = 1636;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RADDHNB_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_RADDHNT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_RADDHNT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 + element2 + (1 << (halfesize - 1))) >> halfesize);
        result = Elem_set(result, 2 * e + 1, halfesize, res[halfesize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_RADDHNT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_RADDHNT_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_RADDHNT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_RADDHNT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_RADDHNT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_RADDHNT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_RADDHNT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1637) = {
    SEE = 1637;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RADDHNT_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_RSUBHNB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_RSUBHNB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 - element2 + (1 << (halfesize - 1))) >> halfesize);
        result = Elem_set(result, 2 * e + 0, halfesize, res[halfesize - 1 .. 0]);
        result = Elem_set(result, 2 * e + 1, halfesize, Zeros(halfesize))
    };
    Z_set(d, VL) = result
}

val decode_RSUBHNB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_RSUBHNB_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_RSUBHNB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_RSUBHNB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_RSUBHNB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_RSUBHNB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_RSUBHNB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1638) = {
    SEE = 1638;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RSUBHNB_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_RSUBHNT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_RSUBHNT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    let 'halfesize = DIV(esize, 2);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'res = ((element1 - element2 + (1 << (halfesize - 1))) >> halfesize);
        result = Elem_set(result, 2 * e + 1, halfesize, res[halfesize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_RSUBHNT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_RSUBHNT_Z_ZZ__ (size, Zm, S, R, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_RSUBHNT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_RSUBHNT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_RSUBHNT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_RSUBHNT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_RSUBHNT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1639) = {
    SEE = 1639;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RSUBHNT_Z_ZZ__(size, Zm, S, R, T, Zn, Zd)
}

val execute_SABDLB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SABDLB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let 'res = Abs(element1 - element2);
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SABDLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SABDLB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SABDLB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SABDLB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SABDLB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SABDLB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SABDLB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1640) = {
    SEE = 1640;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SABDLB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SABDLT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SABDLT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let 'res = Abs(element1 - element2);
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SABDLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SABDLT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SABDLT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SABDLT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SABDLT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SABDLT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SABDLT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1641) = {
    SEE = 1641;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SABDLT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_UABDLB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UABDLB_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 0, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 0, DIV(esize, 2)));
        let 'res = Abs(element1 - element2);
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UABDLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UABDLB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UABDLB_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_UABDLB_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_UABDLB_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_UABDLB_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_UABDLB_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1642) = {
    SEE = 1642;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UABDLB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_UABDLT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UABDLT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, 2 * e + 1, DIV(esize, 2)));
        let 'element2 = UInt(Elem_read(operand2, 2 * e + 1, DIV(esize, 2)));
        let 'res = Abs(element1 - element2);
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UABDLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UABDLT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UABDLT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_UABDLT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_UABDLT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_UABDLT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_UABDLT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1643) = {
    SEE = 1643;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UABDLT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SADDLB_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_SADDLB_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 + element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SADDLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SADDLB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 0;
    let 'sel2 = 0;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SADDLB_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_SADDLB_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_SADDLB_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_SADDLB_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_SADDLB_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1644) = {
    SEE = 1644;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SADDLB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SADDLT_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_SADDLT_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 + element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SADDLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SADDLT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 1;
    let 'sel2 = 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SADDLT_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_SADDLT_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_SADDLT_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_SADDLT_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_SADDLT_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1645) = {
    SEE = 1645;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SADDLT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SSUBLB_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_SSUBLB_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 - element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSUBLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSUBLB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 0;
    let 'sel2 = 0;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SSUBLB_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_SSUBLB_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_SSUBLB_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_SSUBLB_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_SSUBLB_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1646) = {
    SEE = 1646;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSUBLB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SSUBLT_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_SSUBLT_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 - element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSUBLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSUBLT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 1;
    let 'sel2 = 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SSUBLT_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_SSUBLT_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_SSUBLT_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_SSUBLT_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_SSUBLT_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1647) = {
    SEE = 1647;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSUBLT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_UADDLB_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_UADDLB_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 + element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UADDLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UADDLB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 0;
    let 'sel2 = 0;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UADDLB_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_UADDLB_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_UADDLB_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_UADDLB_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_UADDLB_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1648) = {
    SEE = 1648;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UADDLB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_UADDLT_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_UADDLT_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 + element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UADDLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UADDLT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 1;
    let 'sel2 = 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UADDLT_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_UADDLT_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_UADDLT_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_UADDLT_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_UADDLT_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1649) = {
    SEE = 1649;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UADDLT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_USUBLB_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_USUBLB_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 - element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_USUBLB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_USUBLB_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 0;
    let 'sel2 = 0;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_USUBLB_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_USUBLB_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_USUBLB_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_USUBLB_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_USUBLB_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1650) = {
    SEE = 1650;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_USUBLB_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_USUBLT_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_USUBLT_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 - element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_USUBLT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_USUBLT_Z_ZZ__ (size, Zm, S, U, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 1;
    let 'sel2 = 1;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_USUBLT_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_USUBLT_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_USUBLT_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_USUBLT_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_USUBLT_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1651) = {
    SEE = 1651;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 12, 1);
    let U = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_USUBLT_Z_ZZ__(size, Zm, S, U, T, Zn, Zd)
}

val execute_SADDLBT_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_SADDLBT_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 + element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SADDLBT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SADDLBT_Z_ZZ__ (size, Zm, S, tb, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 0;
    let 'sel2 = 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SADDLBT_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_SADDLBT_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_SADDLBT_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_SADDLBT_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_SADDLBT_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1652) = {
    SEE = 1652;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 11, 1);
    let tb = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SADDLBT_Z_ZZ__(size, Zm, S, tb, Zn, Zd)
}

val execute_SSUBLBT_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_SSUBLBT_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 - element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSUBLBT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSUBLBT_Z_ZZ__ (size, Zm, S, tb, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 0;
    let 'sel2 = 1;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SSUBLBT_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_SSUBLBT_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_SSUBLBT_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_SSUBLBT_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_SSUBLBT_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1653) = {
    SEE = 1653;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 11, 1);
    let tb = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSUBLBT_Z_ZZ__(size, Zm, S, tb, Zn, Zd)
}

val execute_SSUBLTB_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2), bool('is_unsigned)) -> unit

function execute_SSUBLTB_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)), is_unsigned);
        let 'res = element1 - element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SSUBLTB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSUBLTB_Z_ZZ__ (size, Zm, S, tb, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 1;
    let 'sel2 = 0;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SSUBLTB_Z_ZZ__(128, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      256 => {
          execute_SSUBLTB_Z_ZZ__(256, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      512 => {
          execute_SSUBLTB_Z_ZZ__(512, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      1024 => {
          execute_SSUBLTB_Z_ZZ__(1024, d, esize, m, n, sel1, sel2, is_unsigned)
      },
      2048 => {
          execute_SSUBLTB_Z_ZZ__(2048, d, esize, m, n, sel1, sel2, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1654) = {
    SEE = 1654;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 11, 1);
    let tb = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SSUBLTB_Z_ZZ__(size, Zm, S, tb, Zn, Zd)
}

val execute_CADD_Z_ZZ__ : forall 'VL 'dn 'esize 'm ('sub_i : Bool) ('sub_r : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), bool('sub_i), bool('sub_r)) -> unit

function execute_CADD_Z_ZZ__ (VL, dn, esize, m, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        acc_r : int = SInt(Elem_read(operand1, 2 * p + 0, esize));
        acc_i : int = SInt(Elem_read(operand1, 2 * p + 1, esize));
        let 'elt2_r = SInt(Elem_read(operand2, 2 * p + 0, esize));
        let 'elt2_i = SInt(Elem_read(operand2, 2 * p + 1, esize));
        if sub_i then {
            acc_r = acc_r - elt2_i;
            acc_i = acc_i + elt2_r
        };
        if sub_r then {
            acc_r = acc_r + elt2_i;
            acc_i = acc_i - elt2_r
        };
        let 'acc_r = acc_r;
        let 'acc_i = acc_i;
        result = Elem_set(result, 2 * p + 0, esize, acc_r[esize - 1 .. 0]);
        result = Elem_set(result, 2 * p + 1, esize, acc_i[esize - 1 .. 0])
    };
    Z_set(dn, VL) = result
}

val decode_CADD_Z_ZZ__ : (bits(2), bits(1), bits(5), bits(5)) -> unit

function decode_CADD_Z_ZZ__ (size, rot, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    let sub_i : bool = rot == 0b0;
    let sub_r : bool = rot == 0b1;
    match VL {
      128 => {
          execute_CADD_Z_ZZ__(128, dn, esize, m, sub_i, sub_r)
      },
      256 => {
          execute_CADD_Z_ZZ__(256, dn, esize, m, sub_i, sub_r)
      },
      512 => {
          execute_CADD_Z_ZZ__(512, dn, esize, m, sub_i, sub_r)
      },
      1024 => {
          execute_CADD_Z_ZZ__(1024, dn, esize, m, sub_i, sub_r)
      },
      2048 => {
          execute_CADD_Z_ZZ__(2048, dn, esize, m, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1655) = {
    SEE = 1655;
    let size = Slice(__opcode, 22, 2);
    let rot = Slice(__opcode, 10, 1);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_CADD_Z_ZZ__(size, rot, Zm, Zdn)
}

val execute_SQCADD_Z_ZZ__ : forall 'VL 'dn 'esize 'm ('sub_i : Bool) ('sub_r : Bool),
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), bool('sub_i), bool('sub_r)) -> unit

function execute_SQCADD_Z_ZZ__ (VL, dn, esize, m, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        acc_r : int = SInt(Elem_read(operand1, 2 * p + 0, esize));
        acc_i : int = SInt(Elem_read(operand1, 2 * p + 1, esize));
        let 'elt2_r = SInt(Elem_read(operand2, 2 * p + 0, esize));
        let 'elt2_i = SInt(Elem_read(operand2, 2 * p + 1, esize));
        if sub_i then {
            acc_r = acc_r - elt2_i;
            acc_i = acc_i + elt2_r
        };
        if sub_r then {
            acc_r = acc_r + elt2_i;
            acc_i = acc_i - elt2_r
        };
        let 'acc_r = acc_r;
        let 'acc_i = acc_i;
        result = Elem_set(result, 2 * p + 0, esize, SignedSat(acc_r, esize));
        result = Elem_set(result, 2 * p + 1, esize, SignedSat(acc_i, esize))
    };
    Z_set(dn, VL) = result
}

val decode_SQCADD_Z_ZZ__ : (bits(2), bits(1), bits(5), bits(5)) -> unit

function decode_SQCADD_Z_ZZ__ (size, rot, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    let sub_i : bool = rot == 0b0;
    let sub_r : bool = rot == 0b1;
    match VL {
      128 => {
          execute_SQCADD_Z_ZZ__(128, dn, esize, m, sub_i, sub_r)
      },
      256 => {
          execute_SQCADD_Z_ZZ__(256, dn, esize, m, sub_i, sub_r)
      },
      512 => {
          execute_SQCADD_Z_ZZ__(512, dn, esize, m, sub_i, sub_r)
      },
      1024 => {
          execute_SQCADD_Z_ZZ__(1024, dn, esize, m, sub_i, sub_r)
      },
      2048 => {
          execute_SQCADD_Z_ZZ__(2048, dn, esize, m, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1656) = {
    SEE = 1656;
    let size = Slice(__opcode, 22, 2);
    let rot = Slice(__opcode, 10, 1);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQCADD_Z_ZZ__(size, rot, Zm, Zdn)
}

val execute_CMLA_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel_a 'sel_b ('sub_i : Bool) ('sub_r : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i), bool('sub_r)) -> unit

function execute_CMLA_Z_ZZZ__ (VL, da, esize, m, n, sel_a, sel_b, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let 'elt1_a = SInt(Elem_read(operand1, 2 * p + sel_a, esize));
        let 'elt2_a = SInt(Elem_read(operand2, 2 * p + sel_a, esize));
        let 'elt2_b = SInt(Elem_read(operand2, 2 * p + sel_b, esize));
        let elt3_r : bits('esize) = Elem_read(operand3, 2 * p + 0, esize);
        let elt3_i : bits('esize) = Elem_read(operand3, 2 * p + 1, esize);
        let 'product_r = elt1_a * elt2_a;
        let 'product_i = elt1_a * elt2_b;
        if sub_r then {
            result = Elem_set(result, 2 * p + 0, esize, elt3_r - product_r)
        } else {
            result = Elem_set(result, 2 * p + 0, esize, elt3_r + product_r)
        };
        if sub_i then {
            result = Elem_set(result, 2 * p + 1, esize, elt3_i - product_i)
        } else {
            result = Elem_set(result, 2 * p + 1, esize, elt3_i + product_i)
        }
    };
    Z_set(da, VL) = result
}

val decode_CMLA_Z_ZZZ__ : (bits(2), bits(5), bits(2), bits(5), bits(5)) -> unit

function decode_CMLA_Z_ZZZ__ (size, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_r : bool = [rot[0]] != [rot[1]];
    let sub_i : bool = [rot[1]] == 0b1;
    match VL {
      128 => {
          execute_CMLA_Z_ZZZ__(128, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      256 => {
          execute_CMLA_Z_ZZZ__(256, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      512 => {
          execute_CMLA_Z_ZZZ__(512, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      1024 => {
          execute_CMLA_Z_ZZZ__(1024, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      2048 => {
          execute_CMLA_Z_ZZZ__(2048, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1657) = {
    SEE = 1657;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_CMLA_Z_ZZZ__(size, Zm, rot, Zn, Zda)
}

val execute_CMLA_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n 'sel_a 'sel_b ('sub_i : Bool) ('sub_r : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i), bool('sub_r)) -> unit

function execute_CMLA_Z_ZZZi_H (VL, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let 'pairspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let 'segmentbase = p - MOD(p, pairspersegment);
        let 's = segmentbase + index;
        let 'elt1_a = SInt(Elem_read(operand1, 2 * p + sel_a, esize));
        let 'elt2_a = SInt(Elem_read(operand2, 2 * s + sel_a, esize));
        let 'elt2_b = SInt(Elem_read(operand2, 2 * s + sel_b, esize));
        let elt3_r : bits('esize) = Elem_read(operand3, 2 * p + 0, esize);
        let elt3_i : bits('esize) = Elem_read(operand3, 2 * p + 1, esize);
        let 'product_r = elt1_a * elt2_a;
        let 'product_i = elt1_a * elt2_b;
        if sub_r then {
            result = Elem_set(result, 2 * p + 0, esize, elt3_r - product_r)
        } else {
            result = Elem_set(result, 2 * p + 0, esize, elt3_r + product_r)
        };
        if sub_i then {
            result = Elem_set(result, 2 * p + 1, esize, elt3_i - product_i)
        } else {
            result = Elem_set(result, 2 * p + 1, esize, elt3_i + product_i)
        }
    };
    Z_set(da, VL) = result
}

val decode_CMLA_Z_ZZZi_H : (bits(2), bits(2), bits(3), bits(2), bits(5), bits(5)) -> unit

function decode_CMLA_Z_ZZZi_H (size, i2, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_r : bool = [rot[0]] != [rot[1]];
    let sub_i : bool = [rot[1]] == 0b1;
    match VL {
      128 => {
          execute_CMLA_Z_ZZZi_H(128, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      256 => {
          execute_CMLA_Z_ZZZi_H(256, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      512 => {
          execute_CMLA_Z_ZZZi_H(512, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      1024 => {
          execute_CMLA_Z_ZZZi_H(1024, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      2048 => {
          execute_CMLA_Z_ZZZi_H(2048, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1658) = {
    SEE = 1658;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_CMLA_Z_ZZZi_H(size, i2, Zm, rot, Zn, Zda)
}

val execute_CMLA_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel_a 'sel_b ('sub_i : Bool) ('sub_r : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i), bool('sub_r)) -> unit

function execute_CMLA_Z_ZZZi_S (VL, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let 'pairspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let 'segmentbase = p - MOD(p, pairspersegment);
        let 's = segmentbase + index;
        let 'elt1_a = SInt(Elem_read(operand1, 2 * p + sel_a, esize));
        let 'elt2_a = SInt(Elem_read(operand2, 2 * s + sel_a, esize));
        let 'elt2_b = SInt(Elem_read(operand2, 2 * s + sel_b, esize));
        let elt3_r : bits('esize) = Elem_read(operand3, 2 * p + 0, esize);
        let elt3_i : bits('esize) = Elem_read(operand3, 2 * p + 1, esize);
        let 'product_r = elt1_a * elt2_a;
        let 'product_i = elt1_a * elt2_b;
        if sub_r then {
            result = Elem_set(result, 2 * p + 0, esize, elt3_r - product_r)
        } else {
            result = Elem_set(result, 2 * p + 0, esize, elt3_r + product_r)
        };
        if sub_i then {
            result = Elem_set(result, 2 * p + 1, esize, elt3_i - product_i)
        } else {
            result = Elem_set(result, 2 * p + 1, esize, elt3_i + product_i)
        }
    };
    Z_set(da, VL) = result
}

val decode_CMLA_Z_ZZZi_S : (bits(2), bits(1), bits(4), bits(2), bits(5), bits(5)) -> unit

function decode_CMLA_Z_ZZZi_S (size, i1, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_r : bool = [rot[0]] != [rot[1]];
    let sub_i : bool = [rot[1]] == 0b1;
    match VL {
      128 => {
          execute_CMLA_Z_ZZZi_S(128, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      256 => {
          execute_CMLA_Z_ZZZi_S(256, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      512 => {
          execute_CMLA_Z_ZZZi_S(512, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      1024 => {
          execute_CMLA_Z_ZZZi_S(1024, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      2048 => {
          execute_CMLA_Z_ZZZi_S(2048, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1659) = {
    SEE = 1659;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_CMLA_Z_ZZZi_S(size, i1, Zm, rot, Zn, Zda)
}

val execute_SQRDCMLAH_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel_a 'sel_b ('sub_i : Bool) ('sub_r : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i), bool('sub_r)) -> unit

function execute_SQRDCMLAH_Z_ZZZ__ (VL, da, esize, m, n, sel_a, sel_b, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    res_i : int = undefined;
    res_r : int = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let 'elt1_a = SInt(Elem_read(operand1, 2 * p + sel_a, esize));
        let 'elt2_a = SInt(Elem_read(operand2, 2 * p + sel_a, esize));
        let 'elt2_b = SInt(Elem_read(operand2, 2 * p + sel_b, esize));
        let elt3_r : bits('esize) = Elem_read(operand3, 2 * p + 0, esize);
        let elt3_i : bits('esize) = Elem_read(operand3, 2 * p + 1, esize);
        let 'product_r = elt1_a * elt2_a;
        let 'product_i = elt1_a * elt2_b;
        if sub_r then {
            res_r = (SInt(elt3_r) << esize) - 2 * product_r
        } else {
            res_r = (SInt(elt3_r) << esize) + 2 * product_r
        };
        res_r = ((res_r + (1 << (esize - 1))) >> esize);
        result = Elem_set(result, 2 * p + 0, esize, SignedSat(res_r, esize));
        if sub_i then {
            res_i = (SInt(elt3_i) << esize) - 2 * product_i
        } else {
            res_i = (SInt(elt3_i) << esize) + 2 * product_i
        };
        res_i = ((res_i + (1 << (esize - 1))) >> esize);
        result = Elem_set(result, 2 * p + 1, esize, SignedSat(res_i, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDCMLAH_Z_ZZZ__ : (bits(2), bits(5), bits(2), bits(5), bits(5)) -> unit

function decode_SQRDCMLAH_Z_ZZZ__ (size, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_r : bool = [rot[0]] != [rot[1]];
    let sub_i : bool = [rot[1]] == 0b1;
    match VL {
      128 => {
          execute_SQRDCMLAH_Z_ZZZ__(128, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      256 => {
          execute_SQRDCMLAH_Z_ZZZ__(256, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      512 => {
          execute_SQRDCMLAH_Z_ZZZ__(512, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      1024 => {
          execute_SQRDCMLAH_Z_ZZZ__(1024, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      2048 => {
          execute_SQRDCMLAH_Z_ZZZ__(2048, da, esize, m, n, sel_a, sel_b, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1660) = {
    SEE = 1660;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDCMLAH_Z_ZZZ__(size, Zm, rot, Zn, Zda)
}

val execute_SQRDCMLAH_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n 'sel_a 'sel_b ('sub_i : Bool) ('sub_r : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i), bool('sub_r)) -> unit

function execute_SQRDCMLAH_Z_ZZZi_H (VL, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let 'pairspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    res_i : int = undefined;
    res_r : int = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let 'segmentbase = p - MOD(p, pairspersegment);
        let 's = segmentbase + index;
        let 'elt1_a = SInt(Elem_read(operand1, 2 * p + sel_a, esize));
        let 'elt2_a = SInt(Elem_read(operand2, 2 * s + sel_a, esize));
        let 'elt2_b = SInt(Elem_read(operand2, 2 * s + sel_b, esize));
        let elt3_r : bits('esize) = Elem_read(operand3, 2 * p + 0, esize);
        let elt3_i : bits('esize) = Elem_read(operand3, 2 * p + 1, esize);
        let 'product_r = elt1_a * elt2_a;
        let 'product_i = elt1_a * elt2_b;
        if sub_r then {
            res_r = (SInt(elt3_r) << esize) - 2 * product_r
        } else {
            res_r = (SInt(elt3_r) << esize) + 2 * product_r
        };
        res_r = ((res_r + (1 << (esize - 1))) >> esize);
        result = Elem_set(result, 2 * p + 0, esize, SignedSat(res_r, esize));
        if sub_i then {
            res_i = (SInt(elt3_i) << esize) - 2 * product_i
        } else {
            res_i = (SInt(elt3_i) << esize) + 2 * product_i
        };
        res_i = ((res_i + (1 << (esize - 1))) >> esize);
        result = Elem_set(result, 2 * p + 1, esize, SignedSat(res_i, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDCMLAH_Z_ZZZi_H : (bits(2), bits(2), bits(3), bits(2), bits(5), bits(5)) -> unit

function decode_SQRDCMLAH_Z_ZZZi_H (size, i2, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_r : bool = [rot[0]] != [rot[1]];
    let sub_i : bool = [rot[1]] == 0b1;
    match VL {
      128 => {
          execute_SQRDCMLAH_Z_ZZZi_H(128, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      256 => {
          execute_SQRDCMLAH_Z_ZZZi_H(256, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      512 => {
          execute_SQRDCMLAH_Z_ZZZi_H(512, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      1024 => {
          execute_SQRDCMLAH_Z_ZZZi_H(1024, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      2048 => {
          execute_SQRDCMLAH_Z_ZZZi_H(2048, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1661) = {
    SEE = 1661;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDCMLAH_Z_ZZZi_H(size, i2, Zm, rot, Zn, Zda)
}

val execute_SQRDCMLAH_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel_a 'sel_b ('sub_i : Bool) ('sub_r : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i), bool('sub_r)) -> unit

function execute_SQRDCMLAH_Z_ZZZi_S (VL, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'pairs = DIV(VL, 2 * esize);
    let 'pairspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    res_i : int = undefined;
    res_r : int = undefined;
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let 'segmentbase = p - MOD(p, pairspersegment);
        let 's = segmentbase + index;
        let 'elt1_a = SInt(Elem_read(operand1, 2 * p + sel_a, esize));
        let 'elt2_a = SInt(Elem_read(operand2, 2 * s + sel_a, esize));
        let 'elt2_b = SInt(Elem_read(operand2, 2 * s + sel_b, esize));
        let elt3_r : bits('esize) = Elem_read(operand3, 2 * p + 0, esize);
        let elt3_i : bits('esize) = Elem_read(operand3, 2 * p + 1, esize);
        let 'product_r = elt1_a * elt2_a;
        let 'product_i = elt1_a * elt2_b;
        if sub_r then {
            res_r = (SInt(elt3_r) << esize) - 2 * product_r
        } else {
            res_r = (SInt(elt3_r) << esize) + 2 * product_r
        };
        res_r = ((res_r + (1 << (esize - 1))) >> esize);
        result = Elem_set(result, 2 * p + 0, esize, SignedSat(res_r, esize));
        if sub_i then {
            res_i = (SInt(elt3_i) << esize) - 2 * product_i
        } else {
            res_i = (SInt(elt3_i) << esize) + 2 * product_i
        };
        res_i = ((res_i + (1 << (esize - 1))) >> esize);
        result = Elem_set(result, 2 * p + 1, esize, SignedSat(res_i, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDCMLAH_Z_ZZZi_S : (bits(2), bits(1), bits(4), bits(2), bits(5), bits(5)) -> unit

function decode_SQRDCMLAH_Z_ZZZi_S (size, i1, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_r : bool = [rot[0]] != [rot[1]];
    let sub_i : bool = [rot[1]] == 0b1;
    match VL {
      128 => {
          execute_SQRDCMLAH_Z_ZZZi_S(128, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      256 => {
          execute_SQRDCMLAH_Z_ZZZi_S(256, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      512 => {
          execute_SQRDCMLAH_Z_ZZZi_S(512, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      1024 => {
          execute_SQRDCMLAH_Z_ZZZi_S(1024, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      },
      2048 => {
          execute_SQRDCMLAH_Z_ZZZi_S(2048, da, esize, index, m, n, sel_a, sel_b, sub_i, sub_r)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1662) = {
    SEE = 1662;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDCMLAH_Z_ZZZi_S(size, i1, Zm, rot, Zn, Zda)
}

val execute_MUL_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_MUL_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'product = element1 * element2;
        result = Elem_set(result, e, esize, product[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_MUL_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_MUL_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_MUL_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_MUL_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_MUL_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_MUL_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_MUL_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1663) = {
    SEE = 1663;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_MUL_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_MUL_Z_ZZi_H : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_MUL_Z_ZZi_H (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_MUL_Z_ZZi_H : (bits(1), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_MUL_Z_ZZi_H (i3h, i3l, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_MUL_Z_ZZi_H(128, d, esize, index, m, n)
      },
      256 => {
          execute_MUL_Z_ZZi_H(256, d, esize, index, m, n)
      },
      512 => {
          execute_MUL_Z_ZZi_H(512, d, esize, index, m, n)
      },
      1024 => {
          execute_MUL_Z_ZZi_H(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_MUL_Z_ZZi_H(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1664) = {
    SEE = 1664;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_MUL_Z_ZZi_H(i3h, i3l, Zm, Zn, Zd)
}

val execute_MUL_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_MUL_Z_ZZi_S (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_MUL_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_MUL_Z_ZZi_S (size, i2, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_MUL_Z_ZZi_S(128, d, esize, index, m, n)
      },
      256 => {
          execute_MUL_Z_ZZi_S(256, d, esize, index, m, n)
      },
      512 => {
          execute_MUL_Z_ZZi_S(512, d, esize, index, m, n)
      },
      1024 => {
          execute_MUL_Z_ZZi_S(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_MUL_Z_ZZi_S(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1665) = {
    SEE = 1665;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_MUL_Z_ZZi_S(size, i2, Zm, Zn, Zd)
}

val execute_MUL_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_MUL_Z_ZZi_D (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_MUL_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(5), bits(5)) -> unit

function decode_MUL_Z_ZZi_D (size, i1, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_MUL_Z_ZZi_D(128, d, esize, index, m, n)
      },
      256 => {
          execute_MUL_Z_ZZi_D(256, d, esize, index, m, n)
      },
      512 => {
          execute_MUL_Z_ZZi_D(512, d, esize, index, m, n)
      },
      1024 => {
          execute_MUL_Z_ZZi_D(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_MUL_Z_ZZi_D(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1666) = {
    SEE = 1666;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_MUL_Z_ZZi_D(size, i1, Zm, Zn, Zd)
}

val execute_MLA_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_MLA_Z_ZZZi_H (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_MLA_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_MLA_Z_ZZZi_H (i3h, i3l, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_MLA_Z_ZZZi_H(128, da, esize, index, m, n)
      },
      256 => {
          execute_MLA_Z_ZZZi_H(256, da, esize, index, m, n)
      },
      512 => {
          execute_MLA_Z_ZZZi_H(512, da, esize, index, m, n)
      },
      1024 => {
          execute_MLA_Z_ZZZi_H(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_MLA_Z_ZZZi_H(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1667) = {
    SEE = 1667;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLA_Z_ZZZi_H(i3h, i3l, Zm, S, Zn, Zda)
}

val execute_MLA_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_MLA_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_MLA_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_MLA_Z_ZZZi_S (size, i2, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_MLA_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_MLA_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_MLA_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_MLA_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_MLA_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1668) = {
    SEE = 1668;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLA_Z_ZZZi_S(size, i2, Zm, S, Zn, Zda)
}

val execute_MLA_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_MLA_Z_ZZZi_D (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_MLA_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_MLA_Z_ZZZi_D (size, i1, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_MLA_Z_ZZZi_D(128, da, esize, index, m, n)
      },
      256 => {
          execute_MLA_Z_ZZZi_D(256, da, esize, index, m, n)
      },
      512 => {
          execute_MLA_Z_ZZZi_D(512, da, esize, index, m, n)
      },
      1024 => {
          execute_MLA_Z_ZZZi_D(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_MLA_Z_ZZZi_D(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1669) = {
    SEE = 1669;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLA_Z_ZZZi_D(size, i1, Zm, S, Zn, Zda)
}

val execute_MLS_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_MLS_Z_ZZZi_H (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_MLS_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_MLS_Z_ZZZi_H (i3h, i3l, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_MLS_Z_ZZZi_H(128, da, esize, index, m, n)
      },
      256 => {
          execute_MLS_Z_ZZZi_H(256, da, esize, index, m, n)
      },
      512 => {
          execute_MLS_Z_ZZZi_H(512, da, esize, index, m, n)
      },
      1024 => {
          execute_MLS_Z_ZZZi_H(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_MLS_Z_ZZZi_H(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1670) = {
    SEE = 1670;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLS_Z_ZZZi_H(i3h, i3l, Zm, S, Zn, Zda)
}

val execute_MLS_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_MLS_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_MLS_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_MLS_Z_ZZZi_S (size, i2, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_MLS_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_MLS_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_MLS_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_MLS_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_MLS_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1671) = {
    SEE = 1671;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLS_Z_ZZZi_S(size, i2, Zm, S, Zn, Zda)
}

val execute_MLS_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_MLS_Z_ZZZi_D (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, s, esize));
        let product : bits('esize) = (element1 * element2)[esize - 1 .. 0];
        result = Elem_set(result, e, esize, Elem_read(result, e, esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_MLS_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_MLS_Z_ZZZi_D (size, i1, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_MLS_Z_ZZZi_D(128, da, esize, index, m, n)
      },
      256 => {
          execute_MLS_Z_ZZZi_D(256, da, esize, index, m, n)
      },
      512 => {
          execute_MLS_Z_ZZZi_D(512, da, esize, index, m, n)
      },
      1024 => {
          execute_MLS_Z_ZZZi_D(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_MLS_Z_ZZZi_D(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1672) = {
    SEE = 1672;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_MLS_Z_ZZZi_D(size, i1, Zm, S, Zn, Zda)
}

val execute_SMULLB_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMULLB_Z_ZZi_S (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SMULLB_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMULLB_Z_ZZi_S (size, i3h, Zm, U, i3l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SMULLB_Z_ZZi_S(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SMULLB_Z_ZZi_S(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SMULLB_Z_ZZi_S(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMULLB_Z_ZZi_S(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMULLB_Z_ZZi_S(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1673) = {
    SEE = 1673;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SMULLB_Z_ZZi_S(size, i3h, Zm, U, i3l, T, Zn, Zd)
}

val execute_SMULLB_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMULLB_Z_ZZi_D (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SMULLB_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMULLB_Z_ZZi_D (size, i2h, Zm, U, i2l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SMULLB_Z_ZZi_D(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SMULLB_Z_ZZi_D(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SMULLB_Z_ZZi_D(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMULLB_Z_ZZi_D(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMULLB_Z_ZZi_D(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1674) = {
    SEE = 1674;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SMULLB_Z_ZZi_D(size, i2h, Zm, U, i2l, T, Zn, Zd)
}

val execute_SMULLT_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMULLT_Z_ZZi_S (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SMULLT_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMULLT_Z_ZZi_S (size, i3h, Zm, U, i3l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SMULLT_Z_ZZi_S(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SMULLT_Z_ZZi_S(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SMULLT_Z_ZZi_S(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMULLT_Z_ZZi_S(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMULLT_Z_ZZi_S(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1675) = {
    SEE = 1675;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SMULLT_Z_ZZi_S(size, i3h, Zm, U, i3l, T, Zn, Zd)
}

val execute_SMULLT_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMULLT_Z_ZZi_D (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SMULLT_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMULLT_Z_ZZi_D (size, i2h, Zm, U, i2l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SMULLT_Z_ZZi_D(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SMULLT_Z_ZZi_D(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SMULLT_Z_ZZi_D(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMULLT_Z_ZZi_D(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMULLT_Z_ZZi_D(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1676) = {
    SEE = 1676;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SMULLT_Z_ZZi_D(size, i2h, Zm, U, i2l, T, Zn, Zd)
}

val execute_UMULLB_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMULLB_Z_ZZi_S (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UMULLB_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMULLB_Z_ZZi_S (size, i3h, Zm, U, i3l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 0;
    match VL {
      128 => {
          execute_UMULLB_Z_ZZi_S(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_UMULLB_Z_ZZi_S(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_UMULLB_Z_ZZi_S(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMULLB_Z_ZZi_S(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMULLB_Z_ZZi_S(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1677) = {
    SEE = 1677;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UMULLB_Z_ZZi_S(size, i3h, Zm, U, i3l, T, Zn, Zd)
}

val execute_UMULLB_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMULLB_Z_ZZi_D (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UMULLB_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMULLB_Z_ZZi_D (size, i2h, Zm, U, i2l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 0;
    match VL {
      128 => {
          execute_UMULLB_Z_ZZi_D(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_UMULLB_Z_ZZi_D(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_UMULLB_Z_ZZi_D(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMULLB_Z_ZZi_D(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMULLB_Z_ZZi_D(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1678) = {
    SEE = 1678;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UMULLB_Z_ZZi_D(size, i2h, Zm, U, i2l, T, Zn, Zd)
}

val execute_UMULLT_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMULLT_Z_ZZi_S (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UMULLT_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMULLT_Z_ZZi_S (size, i3h, Zm, U, i3l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 1;
    match VL {
      128 => {
          execute_UMULLT_Z_ZZi_S(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_UMULLT_Z_ZZi_S(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_UMULLT_Z_ZZi_S(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMULLT_Z_ZZi_S(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMULLT_Z_ZZi_S(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1679) = {
    SEE = 1679;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UMULLT_Z_ZZi_S(size, i3h, Zm, U, i3l, T, Zn, Zd)
}

val execute_UMULLT_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMULLT_Z_ZZi_D (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = element1 * element2;
        result = Elem_set(result, e, 2 * esize, res[2 * esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UMULLT_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMULLT_Z_ZZi_D (size, i2h, Zm, U, i2l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 1;
    match VL {
      128 => {
          execute_UMULLT_Z_ZZi_D(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_UMULLT_Z_ZZi_D(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_UMULLT_Z_ZZi_D(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMULLT_Z_ZZi_D(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMULLT_Z_ZZi_D(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1680) = {
    SEE = 1680;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UMULLT_Z_ZZi_D(size, i2h, Zm, U, i2l, T, Zn, Zd)
}

val execute_SMLALB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLALB_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_SMLALB_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLALB_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SMLALB_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLALB_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLALB_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLALB_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLALB_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1681) = {
    SEE = 1681;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLALB_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_SMLALB_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLALB_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_SMLALB_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLALB_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SMLALB_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLALB_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLALB_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLALB_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLALB_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1682) = {
    SEE = 1682;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLALB_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_SMLALT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLALT_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_SMLALT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLALT_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SMLALT_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLALT_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLALT_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLALT_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLALT_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1683) = {
    SEE = 1683;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLALT_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_SMLALT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLALT_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_SMLALT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLALT_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SMLALT_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLALT_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLALT_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLALT_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLALT_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1684) = {
    SEE = 1684;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLALT_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_UMLALB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLALB_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_UMLALB_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLALB_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_UMLALB_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLALB_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLALB_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLALB_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLALB_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1685) = {
    SEE = 1685;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLALB_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_UMLALB_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLALB_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_UMLALB_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLALB_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_UMLALB_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLALB_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLALB_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLALB_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLALB_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1686) = {
    SEE = 1686;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLALB_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_UMLALT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLALT_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_UMLALT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLALT_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_UMLALT_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLALT_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLALT_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLALT_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLALT_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1687) = {
    SEE = 1687;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLALT_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_UMLALT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLALT_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) + product)
    };
    Z_set(da, VL) = result
}

val decode_UMLALT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLALT_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_UMLALT_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLALT_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLALT_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLALT_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLALT_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1688) = {
    SEE = 1688;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLALT_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_SMLSLB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLSLB_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_SMLSLB_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLSLB_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SMLSLB_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLSLB_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLSLB_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLSLB_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLSLB_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1689) = {
    SEE = 1689;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLSLB_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_SMLSLB_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLSLB_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_SMLSLB_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLSLB_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SMLSLB_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLSLB_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLSLB_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLSLB_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLSLB_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1690) = {
    SEE = 1690;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLSLB_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_SMLSLT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLSLT_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_SMLSLT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLSLT_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SMLSLT_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLSLT_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLSLT_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLSLT_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLSLT_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1691) = {
    SEE = 1691;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLSLT_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_SMLSLT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SMLSLT_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_SMLSLT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SMLSLT_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SMLSLT_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SMLSLT_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SMLSLT_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SMLSLT_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SMLSLT_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1692) = {
    SEE = 1692;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMLSLT_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_UMLSLB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLSLB_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_UMLSLB_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLSLB_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_UMLSLB_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLSLB_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLSLB_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLSLB_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLSLB_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1693) = {
    SEE = 1693;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLSLB_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_UMLSLB_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLSLB_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_UMLSLB_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLSLB_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_UMLSLB_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLSLB_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLSLB_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLSLB_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLSLB_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1694) = {
    SEE = 1694;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLSLB_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_UMLSLT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLSLT_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_UMLSLT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLSLT_Z_ZZZi_S (size, i3h, Zm, S, U, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_UMLSLT_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLSLT_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLSLT_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLSLT_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLSLT_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1695) = {
    SEE = 1695;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLSLT_Z_ZZZi_S(size, i3h, Zm, S, U, i3l, T, Zn, Zda)
}

val execute_UMLSLT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_UMLSLT_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = UInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = UInt(Elem_read(operand2, 2 * s + index, esize));
        let product : bits(2 * 'esize) = (element1 * element2)[2 * esize - 1 .. 0];
        result = Elem_set(result, e, 2 * esize, Elem_read(result, e, 2 * esize) - product)
    };
    Z_set(da, VL) = result
}

val decode_UMLSLT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_UMLSLT_Z_ZZZi_D (size, i2h, Zm, S, U, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_UMLSLT_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_UMLSLT_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_UMLSLT_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_UMLSLT_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_UMLSLT_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1696) = {
    SEE = 1696;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMLSLT_Z_ZZZi_D(size, i2h, Zm, S, U, i2l, T, Zn, Zda)
}

val execute_SQDMULLB_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMULLB_Z_ZZi_S (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULLB_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULLB_Z_ZZi_S (size, i3h, Zm, i3l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SQDMULLB_Z_ZZi_S(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMULLB_Z_ZZi_S(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMULLB_Z_ZZi_S(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMULLB_Z_ZZi_S(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMULLB_Z_ZZi_S(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1697) = {
    SEE = 1697;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULLB_Z_ZZi_S(size, i3h, Zm, i3l, T, Zn, Zd)
}

val execute_SQDMULLB_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMULLB_Z_ZZi_D (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULLB_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULLB_Z_ZZi_D (size, i2h, Zm, i2l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SQDMULLB_Z_ZZi_D(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMULLB_Z_ZZi_D(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMULLB_Z_ZZi_D(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMULLB_Z_ZZi_D(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMULLB_Z_ZZi_D(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1698) = {
    SEE = 1698;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULLB_Z_ZZi_D(size, i2h, Zm, i2l, T, Zn, Zd)
}

val execute_SQDMULLT_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMULLT_Z_ZZi_S (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULLT_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULLT_Z_ZZi_S (size, i3h, Zm, i3l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SQDMULLT_Z_ZZi_S(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMULLT_Z_ZZi_S(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMULLT_Z_ZZi_S(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMULLT_Z_ZZi_S(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMULLT_Z_ZZi_S(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1699) = {
    SEE = 1699;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULLT_Z_ZZi_S(size, i3h, Zm, i3l, T, Zn, Zd)
}

val execute_SQDMULLT_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMULLT_Z_ZZi_D (VL, d, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULLT_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULLT_Z_ZZi_D (size, i2h, Zm, i2l, T, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SQDMULLT_Z_ZZi_D(128, d, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMULLT_Z_ZZi_D(256, d, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMULLT_Z_ZZi_D(512, d, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMULLT_Z_ZZi_D(1024, d, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMULLT_Z_ZZi_D(2048, d, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1700) = {
    SEE = 1700;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULLT_Z_ZZi_D(size, i2h, Zm, i2l, T, Zn, Zd)
}

val execute_SQDMLALB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLALB_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 + product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLALB_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLALB_Z_ZZZi_S (size, i3h, Zm, S, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SQDMLALB_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLALB_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLALB_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLALB_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLALB_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1701) = {
    SEE = 1701;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLALB_Z_ZZZi_S(size, i3h, Zm, S, i3l, T, Zn, Zda)
}

val execute_SQDMLALB_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLALB_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 + product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLALB_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLALB_Z_ZZZi_D (size, i2h, Zm, S, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SQDMLALB_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLALB_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLALB_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLALB_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLALB_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1702) = {
    SEE = 1702;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLALB_Z_ZZZi_D(size, i2h, Zm, S, i2l, T, Zn, Zda)
}

val execute_SQDMLALT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLALT_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 + product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLALT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLALT_Z_ZZZi_S (size, i3h, Zm, S, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SQDMLALT_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLALT_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLALT_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLALT_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLALT_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1703) = {
    SEE = 1703;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLALT_Z_ZZZi_S(size, i3h, Zm, S, i3l, T, Zn, Zda)
}

val execute_SQDMLALT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLALT_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 + product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLALT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLALT_Z_ZZZi_D (size, i2h, Zm, S, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SQDMLALT_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLALT_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLALT_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLALT_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLALT_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1704) = {
    SEE = 1704;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLALT_Z_ZZZi_D(size, i2h, Zm, S, i2l, T, Zn, Zda)
}

val execute_SQDMLSLB_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLSLB_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 - product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLSLB_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLSLB_Z_ZZZi_S (size, i3h, Zm, S, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SQDMLSLB_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLSLB_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLSLB_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLSLB_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLSLB_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1705) = {
    SEE = 1705;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLSLB_Z_ZZZi_S(size, i3h, Zm, S, i3l, T, Zn, Zda)
}

val execute_SQDMLSLB_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLSLB_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 - product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLSLB_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLSLB_Z_ZZZi_D (size, i2h, Zm, S, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 0;
    match VL {
      128 => {
          execute_SQDMLSLB_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLSLB_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLSLB_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLSLB_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLSLB_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1706) = {
    SEE = 1706;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLSLB_Z_ZZZi_D(size, i2h, Zm, S, i2l, T, Zn, Zda)
}

val execute_SQDMLSLT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLSLT_Z_ZZZi_S (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 - product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLSLT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLSLT_Z_ZZZi_S (size, i3h, Zm, S, i3l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SQDMLSLT_Z_ZZZi_S(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLSLT_Z_ZZZi_S(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLSLT_Z_ZZZi_S(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLSLT_Z_ZZZi_S(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLSLT_Z_ZZZi_S(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1707) = {
    SEE = 1707;
    let size = Slice(__opcode, 22, 2);
    let i3h = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 12, 1);
    let i3l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLSLT_Z_ZZZi_S(size, i3h, Zm, S, i3l, T, Zn, Zda)
}

val execute_SQDMLSLT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel,
  ('sel == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel)) -> unit

function execute_SQDMLSLT_Z_ZZZi_D (VL, da, esize, index, m, n, sel) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    let 'eltspersegment = DIV(128, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 's = e - MOD(e, eltspersegment);
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel, esize));
        let 'element2 = SInt(Elem_read(operand2, 2 * s + index, esize));
        let 'element3 = SInt(Elem_read(result, e, 2 * esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, 2 * esize));
        let 'res = element3 - product;
        result = Elem_set(result, e, 2 * esize, SignedSat(res, 2 * esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLSLT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLSLT_Z_ZZZi_D (size, i2h, Zm, S, i2l, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2h @ i2l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel = 1;
    match VL {
      128 => {
          execute_SQDMLSLT_Z_ZZZi_D(128, da, esize, index, m, n, sel)
      },
      256 => {
          execute_SQDMLSLT_Z_ZZZi_D(256, da, esize, index, m, n, sel)
      },
      512 => {
          execute_SQDMLSLT_Z_ZZZi_D(512, da, esize, index, m, n, sel)
      },
      1024 => {
          execute_SQDMLSLT_Z_ZZZi_D(1024, da, esize, index, m, n, sel)
      },
      2048 => {
          execute_SQDMLSLT_Z_ZZZi_D(2048, da, esize, index, m, n, sel)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1708) = {
    SEE = 1708;
    let size = Slice(__opcode, 22, 2);
    let i2h = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 12, 1);
    let i2l = Slice(__opcode, 11, 1);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLSLT_Z_ZZZi_D(size, i2h, Zm, S, i2l, T, Zn, Zda)
}

val execute_SQDMLALBT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_SQDMLALBT_Z_ZZZ__ (VL, da, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)));
        let 'element3 = SInt(Elem_read(result, e, esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, esize));
        result = Elem_set(result, e, esize, SignedSat(element3 + product, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLALBT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLALBT_Z_ZZZ__ (size, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel1 = 0;
    let 'sel2 = 1;
    match VL {
      128 => {
          execute_SQDMLALBT_Z_ZZZ__(128, da, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_SQDMLALBT_Z_ZZZ__(256, da, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_SQDMLALBT_Z_ZZZ__(512, da, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_SQDMLALBT_Z_ZZZ__(1024, da, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_SQDMLALBT_Z_ZZZ__(2048, da, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1709) = {
    SEE = 1709;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLALBT_Z_ZZZ__(size, Zm, S, Zn, Zda)
}

val execute_SQDMLSLBT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_SQDMLSLBT_Z_ZZZ__ (VL, da, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, 2 * e + sel1, DIV(esize, 2)));
        let 'element2 = SInt(Elem_read(operand2, 2 * e + sel2, DIV(esize, 2)));
        let 'element3 = SInt(Elem_read(result, e, esize));
        let 'product = SInt(SignedSat(2 * element1 * element2, esize));
        result = Elem_set(result, e, esize, SignedSat(element3 - product, esize))
    };
    Z_set(da, VL) = result
}

val decode_SQDMLSLBT_Z_ZZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMLSLBT_Z_ZZZ__ (size, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel1 = 0;
    let 'sel2 = 1;
    match VL {
      128 => {
          execute_SQDMLSLBT_Z_ZZZ__(128, da, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_SQDMLSLBT_Z_ZZZ__(256, da, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_SQDMLSLBT_Z_ZZZ__(512, da, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_SQDMLSLBT_Z_ZZZ__(1024, da, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_SQDMLSLBT_Z_ZZZ__(2048, da, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1710) = {
    SEE = 1710;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQDMLSLBT_Z_ZZZ__(size, Zm, S, Zn, Zda)
}

val execute_SQRDMULH_Z_ZZi_H : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMULH_Z_ZZi_H (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRDMULH_Z_ZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMULH_Z_ZZi_H (i3h, i3l, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQRDMULH_Z_ZZi_H(128, d, esize, index, m, n)
      },
      256 => {
          execute_SQRDMULH_Z_ZZi_H(256, d, esize, index, m, n)
      },
      512 => {
          execute_SQRDMULH_Z_ZZi_H(512, d, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMULH_Z_ZZi_H(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMULH_Z_ZZi_H(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1711) = {
    SEE = 1711;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRDMULH_Z_ZZi_H(i3h, i3l, Zm, R, Zn, Zd)
}

val execute_SQRDMULH_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMULH_Z_ZZi_S (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRDMULH_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMULH_Z_ZZi_S (size, i2, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQRDMULH_Z_ZZi_S(128, d, esize, index, m, n)
      },
      256 => {
          execute_SQRDMULH_Z_ZZi_S(256, d, esize, index, m, n)
      },
      512 => {
          execute_SQRDMULH_Z_ZZi_S(512, d, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMULH_Z_ZZi_S(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMULH_Z_ZZi_S(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1712) = {
    SEE = 1712;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRDMULH_Z_ZZi_S(size, i2, Zm, R, Zn, Zd)
}

val execute_SQRDMULH_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMULH_Z_ZZi_D (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQRDMULH_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMULH_Z_ZZi_D (size, i1, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQRDMULH_Z_ZZi_D(128, d, esize, index, m, n)
      },
      256 => {
          execute_SQRDMULH_Z_ZZi_D(256, d, esize, index, m, n)
      },
      512 => {
          execute_SQRDMULH_Z_ZZi_D(512, d, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMULH_Z_ZZi_D(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMULH_Z_ZZi_D(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1713) = {
    SEE = 1713;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRDMULH_Z_ZZi_D(size, i1, Zm, R, Zn, Zd)
}

val execute_SQRDMLAH_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMLAH_Z_ZZZi_H (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) + 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLAH_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLAH_Z_ZZZi_H (i3h, i3l, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLAH_Z_ZZZi_H(128, da, esize, index, m, n)
      },
      256 => {
          execute_SQRDMLAH_Z_ZZZi_H(256, da, esize, index, m, n)
      },
      512 => {
          execute_SQRDMLAH_Z_ZZZi_H(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMLAH_Z_ZZZi_H(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMLAH_Z_ZZZi_H(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1714) = {
    SEE = 1714;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLAH_Z_ZZZi_H(i3h, i3l, Zm, S, Zn, Zda)
}

val execute_SQRDMLAH_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMLAH_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) + 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLAH_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLAH_Z_ZZZi_S (size, i2, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLAH_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_SQRDMLAH_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_SQRDMLAH_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMLAH_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMLAH_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1715) = {
    SEE = 1715;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLAH_Z_ZZZi_S(size, i2, Zm, S, Zn, Zda)
}

val execute_SQRDMLAH_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMLAH_Z_ZZZi_D (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) + 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLAH_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLAH_Z_ZZZi_D (size, i1, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLAH_Z_ZZZi_D(128, da, esize, index, m, n)
      },
      256 => {
          execute_SQRDMLAH_Z_ZZZi_D(256, da, esize, index, m, n)
      },
      512 => {
          execute_SQRDMLAH_Z_ZZZi_D(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMLAH_Z_ZZZi_D(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMLAH_Z_ZZZi_D(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1716) = {
    SEE = 1716;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLAH_Z_ZZZi_D(size, i1, Zm, S, Zn, Zda)
}

val execute_SQRDMLSH_Z_ZZZi_H : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMLSH_Z_ZZZi_H (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) - 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLSH_Z_ZZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLSH_Z_ZZZi_H (i3h, i3l, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLSH_Z_ZZZi_H(128, da, esize, index, m, n)
      },
      256 => {
          execute_SQRDMLSH_Z_ZZZi_H(256, da, esize, index, m, n)
      },
      512 => {
          execute_SQRDMLSH_Z_ZZZi_H(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMLSH_Z_ZZZi_H(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMLSH_Z_ZZZi_H(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1717) = {
    SEE = 1717;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLSH_Z_ZZZi_H(i3h, i3l, Zm, S, Zn, Zda)
}

val execute_SQRDMLSH_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMLSH_Z_ZZZi_S (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) - 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLSH_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLSH_Z_ZZZi_S (size, i2, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLSH_Z_ZZZi_S(128, da, esize, index, m, n)
      },
      256 => {
          execute_SQRDMLSH_Z_ZZZi_S(256, da, esize, index, m, n)
      },
      512 => {
          execute_SQRDMLSH_Z_ZZZi_S(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMLSH_Z_ZZZi_S(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMLSH_Z_ZZZi_S(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1718) = {
    SEE = 1718;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLSH_Z_ZZZi_S(size, i2, Zm, S, Zn, Zda)
}

val execute_SQRDMLSH_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQRDMLSH_Z_ZZZi_D (VL, da, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = (element3 << esize) - 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat(((res + (1 << (esize - 1))) >> esize), esize))
    };
    Z_set(da, VL) = result
}

val decode_SQRDMLSH_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_SQRDMLSH_Z_ZZZi_D (size, i1, Zm, S, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SQRDMLSH_Z_ZZZi_D(128, da, esize, index, m, n)
      },
      256 => {
          execute_SQRDMLSH_Z_ZZZi_D(256, da, esize, index, m, n)
      },
      512 => {
          execute_SQRDMLSH_Z_ZZZi_D(512, da, esize, index, m, n)
      },
      1024 => {
          execute_SQRDMLSH_Z_ZZZi_D(1024, da, esize, index, m, n)
      },
      2048 => {
          execute_SQRDMLSH_Z_ZZZi_D(2048, da, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1719) = {
    SEE = 1719;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let S = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SQRDMLSH_Z_ZZZi_D(size, i1, Zm, S, Zn, Zda)
}

val execute_SHADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SHADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 + element2) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SHADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SHADD_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_SHADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SHADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SHADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SHADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SHADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1720) = {
    SEE = 1720;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SHADD_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_SHSUB_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SHSUB_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 - element2) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SHSUB_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SHSUB_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_SHSUB_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SHSUB_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SHSUB_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SHSUB_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SHSUB_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1721) = {
    SEE = 1721;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SHSUB_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_SHSUBR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SHSUBR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element2 - element1) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SHSUBR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SHSUBR_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_SHSUBR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SHSUBR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SHSUBR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SHSUBR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SHSUBR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1722) = {
    SEE = 1722;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SHSUBR_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_SRHADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SRHADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 + element2 + 1) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SRHADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SRHADD_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_SRHADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SRHADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SRHADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SRHADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SRHADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1723) = {
    SEE = 1723;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SRHADD_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_UHADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UHADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 + element2) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UHADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UHADD_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_UHADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UHADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UHADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UHADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UHADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1724) = {
    SEE = 1724;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UHADD_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_UHSUB_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UHSUB_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 - element2) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UHSUB_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UHSUB_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_UHSUB_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UHSUB_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UHSUB_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UHSUB_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UHSUB_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1725) = {
    SEE = 1725;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UHSUB_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_UHSUBR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_UHSUBR_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element2 - element1) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UHSUBR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UHSUBR_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_UHSUBR_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_UHSUBR_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_UHSUBR_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_UHSUBR_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_UHSUBR_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1726) = {
    SEE = 1726;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UHSUBR_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_URHADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_URHADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = ((element1 + element2 + 1) >> 1);
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_URHADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_URHADD_Z_P_ZZ__ (size, R, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_URHADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_URHADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_URHADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_URHADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_URHADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1727) = {
    SEE = 1727;
    let size = Slice(__opcode, 22, 2);
    let R = Slice(__opcode, 18, 1);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_URHADD_Z_P_ZZ__(size, R, S, U, Pg, Zm, Zdn)
}

val execute_SQADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SQADD_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = SInt(Sat(element1 + element2, esize, is_unsigned));
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQADD_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQADD_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SQADD_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SQADD_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SQADD_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SQADD_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1728) = {
    SEE = 1728;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQADD_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_UQADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UQADD_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = UInt(Sat(element1 + element2, esize, is_unsigned));
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UQADD_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQADD_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UQADD_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UQADD_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UQADD_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UQADD_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1729) = {
    SEE = 1729;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQADD_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_SQSUB_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SQSUB_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = SInt(Sat(element1 - element2, esize, is_unsigned));
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQSUB_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQSUB_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQSUB_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SQSUB_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SQSUB_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SQSUB_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SQSUB_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1730) = {
    SEE = 1730;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQSUB_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_UQSUB_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UQSUB_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = UInt(Sat(element1 - element2, esize, is_unsigned));
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQSUB_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UQSUB_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQSUB_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UQSUB_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UQSUB_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UQSUB_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UQSUB_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1731) = {
    SEE = 1731;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQSUB_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_SQSUBR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_SQSUBR_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = SInt(Sat(element2 - element1, esize, is_unsigned));
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SQSUBR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SQSUBR_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SQSUBR_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_SQSUBR_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_SQSUBR_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_SQSUBR_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_SQSUBR_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1732) = {
    SEE = 1732;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SQSUBR_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_UQSUBR_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g ('is_unsigned : Bool) 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m), bool('is_unsigned)) -> unit

function execute_UQSUBR_Z_P_ZZ__ (VL, dn, esize, g, m, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if ActivePredicateElement(mask, e, esize) then {
            let 'res = UInt(Sat(element2 - element1, esize, is_unsigned));
            result = Elem_set(result, e, esize, res[esize - 1 .. 0])
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_UQSUBR_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UQSUBR_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UQSUBR_Z_P_ZZ__(128, dn, esize, g, m, is_unsigned)
      },
      256 => {
          execute_UQSUBR_Z_P_ZZ__(256, dn, esize, g, m, is_unsigned)
      },
      512 => {
          execute_UQSUBR_Z_P_ZZ__(512, dn, esize, g, m, is_unsigned)
      },
      1024 => {
          execute_UQSUBR_Z_P_ZZ__(1024, dn, esize, g, m, is_unsigned)
      },
      2048 => {
          execute_UQSUBR_Z_P_ZZ__(2048, dn, esize, g, m, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1733) = {
    SEE = 1733;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_UQSUBR_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_SUQADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_SUQADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, SignedSat(SInt(element1) + UInt(element2), esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_SUQADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SUQADD_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_SUQADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_SUQADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_SUQADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_SUQADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_SUQADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1734) = {
    SEE = 1734;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SUQADD_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_USQADD_Z_P_ZZ__ : forall 'VL 'dn 'esize 'g 'm,
  (0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('g), int('m)) -> unit

function execute_USQADD_Z_P_ZZ__ (VL, dn, esize, g, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, UnsignedSat(UInt(element1) + SInt(element2), esize))
        } else {
            result = Elem_set(result, e, esize, Elem_read(operand1, e, esize))
        }
    };
    Z_set(dn, VL) = result
}

val decode_USQADD_Z_P_ZZ__ : (bits(2), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_USQADD_Z_P_ZZ__ (size, S, U, Pg, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_USQADD_Z_P_ZZ__(128, dn, esize, g, m)
      },
      256 => {
          execute_USQADD_Z_P_ZZ__(256, dn, esize, g, m)
      },
      512 => {
          execute_USQADD_Z_P_ZZ__(512, dn, esize, g, m)
      },
      1024 => {
          execute_USQADD_Z_P_ZZ__(1024, dn, esize, g, m)
      },
      2048 => {
          execute_USQADD_Z_P_ZZ__(2048, dn, esize, g, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1735) = {
    SEE = 1735;
    let size = Slice(__opcode, 22, 2);
    let S = Slice(__opcode, 17, 1);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_USQADD_Z_P_ZZ__(size, S, U, Pg, Zm, Zdn)
}

val execute_SLI_Z_ZZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SLI_Z_ZZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(result, e, esize);
        let element2 : bits('esize) = Elem_read(operand, e, esize);
        let mask : bits('esize) = LSL(Ones(esize), shift);
        let shiftedval : bits('esize) = LSL(element2, shift);
        result = Elem_set(result, e, esize, element1 & not_vec(mask) | shiftedval)
    };
    Z_set(d, VL) = result
}

val decode_SLI_Z_ZZI__ : (bits(2), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_SLI_Z_ZZI__ (tszh, tszl, imm3, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = UInt(tsize @ imm3) - esize;
    match esize {
      8 => {
          match VL {
            128 => {
                execute_SLI_Z_ZZI__(128, d, 8, n, shift)
            },
            256 => {
                execute_SLI_Z_ZZI__(256, d, 8, n, shift)
            },
            512 => {
                execute_SLI_Z_ZZI__(512, d, 8, n, shift)
            },
            1024 => {
                execute_SLI_Z_ZZI__(1024, d, 8, n, shift)
            },
            2048 => {
                execute_SLI_Z_ZZI__(2048, d, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_SLI_Z_ZZI__(128, d, 16, n, shift)
            },
            256 => {
                execute_SLI_Z_ZZI__(256, d, 16, n, shift)
            },
            512 => {
                execute_SLI_Z_ZZI__(512, d, 16, n, shift)
            },
            1024 => {
                execute_SLI_Z_ZZI__(1024, d, 16, n, shift)
            },
            2048 => {
                execute_SLI_Z_ZZI__(2048, d, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_SLI_Z_ZZI__(128, d, 32, n, shift)
            },
            256 => {
                execute_SLI_Z_ZZI__(256, d, 32, n, shift)
            },
            512 => {
                execute_SLI_Z_ZZI__(512, d, 32, n, shift)
            },
            1024 => {
                execute_SLI_Z_ZZI__(1024, d, 32, n, shift)
            },
            2048 => {
                execute_SLI_Z_ZZI__(2048, d, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_SLI_Z_ZZI__(128, d, 64, n, shift)
            },
            256 => {
                execute_SLI_Z_ZZI__(256, d, 64, n, shift)
            },
            512 => {
                execute_SLI_Z_ZZI__(512, d, 64, n, shift)
            },
            1024 => {
                execute_SLI_Z_ZZI__(1024, d, 64, n, shift)
            },
            2048 => {
                execute_SLI_Z_ZZI__(2048, d, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1736) = {
    SEE = 1736;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SLI_Z_ZZI__(tszh, tszl, imm3, Zn, Zd)
}

val execute_SRI_Z_ZZI__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SRI_Z_ZZI__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(result, e, esize);
        let element2 : bits('esize) = Elem_read(operand, e, esize);
        let mask : bits('esize) = LSR(Ones(esize), shift);
        let shiftedval : bits('esize) = LSR(element2, shift);
        result = Elem_set(result, e, esize, element1 & not_vec(mask) | shiftedval)
    };
    Z_set(d, VL) = result
}

val decode_SRI_Z_ZZI__ : (bits(2), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_SRI_Z_ZZI__ (tszh, tszl, imm3, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_SRI_Z_ZZI__(128, d, 8, n, shift)
            },
            256 => {
                execute_SRI_Z_ZZI__(256, d, 8, n, shift)
            },
            512 => {
                execute_SRI_Z_ZZI__(512, d, 8, n, shift)
            },
            1024 => {
                execute_SRI_Z_ZZI__(1024, d, 8, n, shift)
            },
            2048 => {
                execute_SRI_Z_ZZI__(2048, d, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_SRI_Z_ZZI__(128, d, 16, n, shift)
            },
            256 => {
                execute_SRI_Z_ZZI__(256, d, 16, n, shift)
            },
            512 => {
                execute_SRI_Z_ZZI__(512, d, 16, n, shift)
            },
            1024 => {
                execute_SRI_Z_ZZI__(1024, d, 16, n, shift)
            },
            2048 => {
                execute_SRI_Z_ZZI__(2048, d, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_SRI_Z_ZZI__(128, d, 32, n, shift)
            },
            256 => {
                execute_SRI_Z_ZZI__(256, d, 32, n, shift)
            },
            512 => {
                execute_SRI_Z_ZZI__(512, d, 32, n, shift)
            },
            1024 => {
                execute_SRI_Z_ZZI__(1024, d, 32, n, shift)
            },
            2048 => {
                execute_SRI_Z_ZZI__(2048, d, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_SRI_Z_ZZI__(128, d, 64, n, shift)
            },
            256 => {
                execute_SRI_Z_ZZI__(256, d, 64, n, shift)
            },
            512 => {
                execute_SRI_Z_ZZI__(512, d, 64, n, shift)
            },
            1024 => {
                execute_SRI_Z_ZZI__(1024, d, 64, n, shift)
            },
            2048 => {
                execute_SRI_Z_ZZI__(2048, d, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1737) = {
    SEE = 1737;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SRI_Z_ZZI__(tszh, tszl, imm3, Zn, Zd)
}

val execute_TBX_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_TBX_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        if element2 < elements then {
            result = Elem_set(result, e, esize, Elem_read(operand1, element2, esize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_TBX_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_TBX_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_TBX_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_TBX_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_TBX_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_TBX_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_TBX_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1738) = {
    SEE = 1738;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TBX_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_URECPE_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_URECPE_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, UnsignedRecipEstimate(element))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_URECPE_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_URECPE_Z_P_Z__ (size, Q, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size != 0b10 then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_URECPE_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_URECPE_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_URECPE_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_URECPE_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_URECPE_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1739) = {
    SEE = 1739;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_URECPE_Z_P_Z__(size, Q, Pg, Zn, Zd)
}

val execute_URSQRTE_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_URSQRTE_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, UnsignedRSqrtEstimate(element))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_URSQRTE_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_URSQRTE_Z_P_Z__ (size, Q, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size != 0b10 then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_URSQRTE_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_URSQRTE_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_URSQRTE_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_URSQRTE_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_URSQRTE_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1740) = {
    SEE = 1740;
    let size = Slice(__opcode, 22, 2);
    let Q = Slice(__opcode, 19, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_URSQRTE_Z_P_Z__(size, Q, Pg, Zn, Zd)
}

val execute_MATCH_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n)) -> unit

function execute_MATCH_P_P_ZZ__ (VL, d, esize, g, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'segmentbase = e - MOD(e, eltspersegment);
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize));
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            foreach (i
            from segmentbase
            to (segmentbase + eltspersegment - 1)
            by 1
            in inc) {
                let element2 : bits('esize) = Elem_read(operand2, i, esize);
                if element1 == element2 then {
                    result = Elem_set(result, e, psize, ZeroExtend(0b1, psize))
                };
                ()
            }
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_MATCH_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_MATCH_P_P_ZZ__ (size, Zm, Pg, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitone, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'd = UInt(Pd);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_MATCH_P_P_ZZ__(128, d, esize, g, m, n)
      },
      256 => {
          execute_MATCH_P_P_ZZ__(256, d, esize, g, m, n)
      },
      512 => {
          execute_MATCH_P_P_ZZ__(512, d, esize, g, m, n)
      },
      1024 => {
          execute_MATCH_P_P_ZZ__(1024, d, esize, g, m, n)
      },
      2048 => {
          execute_MATCH_P_P_ZZ__(2048, d, esize, g, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1741) = {
    SEE = 1741;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_MATCH_P_P_ZZ__(size, Zm, Pg, Zn, Pd)
}

val execute_NMATCH_P_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n)) -> unit

function execute_NMATCH_P_P_ZZ__ (VL, d, esize, g, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'segmentbase = e - MOD(e, eltspersegment);
            result = Elem_set(result, e, psize, ZeroExtend(0b1, psize));
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            foreach (i
            from segmentbase
            to (segmentbase + eltspersegment - 1)
            by 1
            in inc) {
                let element2 : bits('esize) = Elem_read(operand2, i, esize);
                if element1 == element2 then {
                    result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
                };
                ()
            }
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_NMATCH_P_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_NMATCH_P_P_ZZ__ (size, Zm, Pg, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitone, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'd = UInt(Pd);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_NMATCH_P_P_ZZ__(128, d, esize, g, m, n)
      },
      256 => {
          execute_NMATCH_P_P_ZZ__(256, d, esize, g, m, n)
      },
      512 => {
          execute_NMATCH_P_P_ZZ__(512, d, esize, g, m, n)
      },
      1024 => {
          execute_NMATCH_P_P_ZZ__(1024, d, esize, g, m, n)
      },
      2048 => {
          execute_NMATCH_P_P_ZZ__(2048, d, esize, g, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1742) = {
    SEE = 1742;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_NMATCH_P_P_ZZ__(size, Zm, Pg, Zn, Pd)
}

val execute_HISTCNT_Z_P_ZZ__ : forall 'VL 'd 'esize 'g 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('m), int('n)) -> unit

function execute_HISTCNT_Z_P_ZZ__ (VL, d, esize, g, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand1 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    let operand2 : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(m, VL)
    else
      Zeros(VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        count : int = 0;
        if ActivePredicateElement(mask, e, esize) then {
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            foreach (i from 0 to e by 1 in inc) {
                if ActivePredicateElement(mask, i, esize) then {
                    let element2 : bits('esize) = Elem_read(operand2, i, esize);
                    if element1 == element2 then {
                        count = count + 1
                    };
                    ()
                };
                ()
            }
        };
        let 'count = count;
        result = Elem_set(result, e, esize, count[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_HISTCNT_Z_P_ZZ__ : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_HISTCNT_Z_P_ZZ__ (size, Zm, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'd = UInt(Zd);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_HISTCNT_Z_P_ZZ__(128, d, esize, g, m, n)
      },
      256 => {
          execute_HISTCNT_Z_P_ZZ__(256, d, esize, g, m, n)
      },
      512 => {
          execute_HISTCNT_Z_P_ZZ__(512, d, esize, g, m, n)
      },
      1024 => {
          execute_HISTCNT_Z_P_ZZ__(1024, d, esize, g, m, n)
      },
      2048 => {
          execute_HISTCNT_Z_P_ZZ__(2048, d, esize, g, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1743) = {
    SEE = 1743;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_HISTCNT_Z_P_ZZ__(size, Zm, Pg, Zn, Zd)
}

val execute_HISTSEG_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_HISTSEG_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (b from 0 to (segments - 1) by 1 in inc) {
        foreach (s from 0 to (eltspersegment - 1) by 1 in inc) {
            count : int = 0;
            let 'e = eltspersegment * b + s;
            let element1 : bits('esize) = Elem_read(operand1, e, esize);
            foreach (i from 0 to (eltspersegment - 1) by 1 in inc) {
                let 'e2 = eltspersegment * b + i;
                let element2 : bits('esize) = Elem_read(operand2, e2, esize);
                if element1 == element2 then {
                    count = count + 1
                };
                ()
            };
            let 'count = count;
            result = Elem_set(result, e, esize, count[esize - 1 .. 0])
        }
    };
    Z_set(d, VL) = result
}

val decode_HISTSEG_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_HISTSEG_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    if size != 0b00 then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'd = UInt(Zd);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    match VL {
      128 => {
          execute_HISTSEG_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_HISTSEG_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_HISTSEG_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_HISTSEG_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_HISTSEG_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1744) = {
    SEE = 1744;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_HISTSEG_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_WHILEWR_P_RR__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_WHILEWR_P_RR__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    let src1 : bits(64) = X_read(n, 64);
    let src2 : bits(64) = X_read(m, 64);
    let 'operand1 = UInt(src1);
    let 'operand2 = UInt(src2);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    let 'diff = DIV(operand2 - operand1, DIV(esize, 8));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if diff <= 0 | e < diff then {
            result = Elem_set(result, e, psize, ZeroExtend(0b1, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILEWR_P_RR__ : (bits(2), bits(5), bits(5), bits(1), bits(4)) -> unit

function decode_WHILEWR_P_RR__ (size, Rm, Rn, rw, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    match VL {
      128 => {
          execute_WHILEWR_P_RR__(128, d, esize, m, n)
      },
      256 => {
          execute_WHILEWR_P_RR__(256, d, esize, m, n)
      },
      512 => {
          execute_WHILEWR_P_RR__(512, d, esize, m, n)
      },
      1024 => {
          execute_WHILEWR_P_RR__(1024, d, esize, m, n)
      },
      2048 => {
          execute_WHILEWR_P_RR__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1745) = {
    SEE = 1745;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Rn = Slice(__opcode, 5, 5);
    let rw = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILEWR_P_RR__(size, Rm, Rn, rw, Pd)
}

val execute_WHILERW_P_RR__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_WHILERW_P_RR__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = Ones(PL);
    let src1 : bits(64) = X_read(n, 64);
    let src2 : bits(64) = X_read(m, 64);
    let 'operand1 = UInt(src1);
    let 'operand2 = UInt(src2);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    let 'diff = DIV(Abs(operand2 - operand1), DIV(esize, 8));
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if diff == 0 | e < diff then {
            result = Elem_set(result, e, psize, ZeroExtend(0b1, psize))
        } else {
            result = Elem_set(result, e, psize, ZeroExtend(0b0, psize))
        }
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d, PL) = result
}

val decode_WHILERW_P_RR__ : (bits(2), bits(5), bits(5), bits(1), bits(4)) -> unit

function decode_WHILERW_P_RR__ (size, Rm, Rn, rw, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(Pd);
    match VL {
      128 => {
          execute_WHILERW_P_RR__(128, d, esize, m, n)
      },
      256 => {
          execute_WHILERW_P_RR__(256, d, esize, m, n)
      },
      512 => {
          execute_WHILERW_P_RR__(512, d, esize, m, n)
      },
      1024 => {
          execute_WHILERW_P_RR__(1024, d, esize, m, n)
      },
      2048 => {
          execute_WHILERW_P_RR__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1746) = {
    SEE = 1746;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Rn = Slice(__opcode, 5, 5);
    let rw = Slice(__opcode, 4, 1);
    let Pd = Slice(__opcode, 0, 4);
    decode_WHILERW_P_RR__(size, Rm, Rn, rw, Pd)
}

val execute_BDEP_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_BDEP_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let data : bits('VL) = Z_read(n, VL);
    let mask : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, BitDeposit(Elem_read(data, e, esize), Elem_read(mask, e, esize)))
    };
    Z_set(d, VL) = result
}

val decode_BDEP_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_BDEP_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2BitPerm()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BDEP_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_BDEP_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_BDEP_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_BDEP_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_BDEP_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1747) = {
    SEE = 1747;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BDEP_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_BEXT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_BEXT_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let data : bits('VL) = Z_read(n, VL);
    let mask : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, BitExtract(Elem_read(data, e, esize), Elem_read(mask, e, esize)))
    };
    Z_set(d, VL) = result
}

val decode_BEXT_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_BEXT_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2BitPerm()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BEXT_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_BEXT_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_BEXT_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_BEXT_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_BEXT_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1748) = {
    SEE = 1748;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BEXT_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_BGRP_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_BGRP_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let data : bits('VL) = Z_read(n, VL);
    let mask : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, esize, BitGroup(Elem_read(data, e, esize), Elem_read(mask, e, esize)))
    };
    Z_set(d, VL) = result
}

val decode_BGRP_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_BGRP_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2BitPerm()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_BGRP_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_BGRP_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_BGRP_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_BGRP_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_BGRP_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1749) = {
    SEE = 1749;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_BGRP_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_EORBT_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 1 & 'sel1 == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_EORBT_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, 2 * e + sel1, esize);
        let element2 : bits('esize) = Elem_read(operand2, 2 * e + sel2, esize);
        result = Elem_set(result, 2 * e + sel1, esize, EOR(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_EORBT_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_EORBT_Z_ZZ__ (size, Zm, tb, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 0;
    let 'sel2 = 1;
    match VL {
      128 => {
          execute_EORBT_Z_ZZ__(128, d, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_EORBT_Z_ZZ__(256, d, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_EORBT_Z_ZZ__(512, d, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_EORBT_Z_ZZ__(1024, d, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_EORBT_Z_ZZ__(2048, d, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1750) = {
    SEE = 1750;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let tb = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_EORBT_Z_ZZ__(size, Zm, tb, Zn, Zd)
}

val execute_EORTB_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'sel1 'sel2,
  ('sel2 == 0 & 'sel1 == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('sel1), int('sel2)) -> unit

function execute_EORTB_Z_ZZ__ (VL, d, esize, m, n, sel1, sel2) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 2 * esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, 2 * e + sel1, esize);
        let element2 : bits('esize) = Elem_read(operand2, 2 * e + sel2, esize);
        result = Elem_set(result, 2 * e + sel1, esize, EOR(element1, element2))
    };
    Z_set(d, VL) = result
}

val decode_EORTB_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_EORTB_Z_ZZ__ (size, Zm, tb, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'sel1 = 1;
    let 'sel2 = 0;
    match VL {
      128 => {
          execute_EORTB_Z_ZZ__(128, d, esize, m, n, sel1, sel2)
      },
      256 => {
          execute_EORTB_Z_ZZ__(256, d, esize, m, n, sel1, sel2)
      },
      512 => {
          execute_EORTB_Z_ZZ__(512, d, esize, m, n, sel1, sel2)
      },
      1024 => {
          execute_EORTB_Z_ZZ__(1024, d, esize, m, n, sel1, sel2)
      },
      2048 => {
          execute_EORTB_Z_ZZ__(2048, d, esize, m, n, sel1, sel2)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1751) = {
    SEE = 1751;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let tb = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_EORTB_Z_ZZ__(size, Zm, tb, Zn, Zd)
}

val execute_CDOT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n 'sel_a 'sel_b ('sub_i : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i)) -> unit

function execute_CDOT_Z_ZZZ__ (VL, da, esize, m, n, sel_a, sel_b, sub_i) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 1 by 1 in inc) {
            let 'elt1_r = SInt(Elem_read(operand1, 4 * e + 2 * i + 0, DIV(esize, 4)));
            let 'elt1_i = SInt(Elem_read(operand1, 4 * e + 2 * i + 1, DIV(esize, 4)));
            let 'elt2_a = SInt(Elem_read(operand2, 4 * e + 2 * i + sel_a, DIV(esize, 4)));
            let 'elt2_b = SInt(Elem_read(operand2, 4 * e + 2 * i + sel_b, DIV(esize, 4)));
            if sub_i then {
                res = res + elt1_r * elt2_a - elt1_i * elt2_b
            } else {
                res = res + elt1_r * elt2_a + elt1_i * elt2_b
            }
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_CDOT_Z_ZZZ__ : (bits(2), bits(5), bits(2), bits(5), bits(5)) -> unit

function decode_CDOT_Z_ZZZ__ (size, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if (match size {
      [bitzero, _] => true,
      _ => false
    }) : bool then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_i : bool = [rot[0]] == [rot[1]];
    match VL {
      128 => {
          execute_CDOT_Z_ZZZ__(128, da, esize, m, n, sel_a, sel_b, sub_i)
      },
      256 => {
          execute_CDOT_Z_ZZZ__(256, da, esize, m, n, sel_a, sel_b, sub_i)
      },
      512 => {
          execute_CDOT_Z_ZZZ__(512, da, esize, m, n, sel_a, sel_b, sub_i)
      },
      1024 => {
          execute_CDOT_Z_ZZZ__(1024, da, esize, m, n, sel_a, sel_b, sub_i)
      },
      2048 => {
          execute_CDOT_Z_ZZZ__(2048, da, esize, m, n, sel_a, sel_b, sub_i)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1752) = {
    SEE = 1752;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_CDOT_Z_ZZZ__(size, Zm, rot, Zn, Zda)
}

val execute_CDOT_Z_ZZZi_S : forall 'VL 'da 'esize 'index 'm 'n 'sel_a 'sel_b ('sub_i : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i)) -> unit

function execute_CDOT_Z_ZZZi_S (VL, da, esize, index, m, n, sel_a, sel_b, sub_i) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 1 by 1 in inc) {
            let 'elt1_r = SInt(Elem_read(operand1, 4 * e + 2 * i + 0, DIV(esize, 4)));
            let 'elt1_i = SInt(Elem_read(operand1, 4 * e + 2 * i + 1, DIV(esize, 4)));
            let 'elt2_a = SInt(Elem_read(operand2, 4 * s + 2 * i + sel_a, DIV(esize, 4)));
            let 'elt2_b = SInt(Elem_read(operand2, 4 * s + 2 * i + sel_b, DIV(esize, 4)));
            if sub_i then {
                res = res + elt1_r * elt2_a - elt1_i * elt2_b
            } else {
                res = res + elt1_r * elt2_a + elt1_i * elt2_b
            }
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_CDOT_Z_ZZZi_S : (bits(2), bits(2), bits(3), bits(2), bits(5), bits(5)) -> unit

function decode_CDOT_Z_ZZZi_S (size, i2, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_i : bool = [rot[0]] == [rot[1]];
    match VL {
      128 => {
          execute_CDOT_Z_ZZZi_S(128, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      256 => {
          execute_CDOT_Z_ZZZi_S(256, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      512 => {
          execute_CDOT_Z_ZZZi_S(512, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      1024 => {
          execute_CDOT_Z_ZZZi_S(1024, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      2048 => {
          execute_CDOT_Z_ZZZi_S(2048, da, esize, index, m, n, sel_a, sel_b, sub_i)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1753) = {
    SEE = 1753;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_CDOT_Z_ZZZi_S(size, i2, Zm, rot, Zn, Zda)
}

val execute_CDOT_Z_ZZZi_D : forall 'VL 'da 'esize 'index 'm 'n 'sel_a 'sel_b ('sub_i : Bool),
  ('sel_b in {0, 1} & 'sel_a in {0, 1} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('index), int('m), int('n), int('sel_a), int('sel_b), bool('sub_i)) -> unit

function execute_CDOT_Z_ZZZi_D (VL, da, esize, index, m, n, sel_a, sel_b, sub_i) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        res : bits('esize) = Elem_read(operand3, e, esize);
        foreach (i from 0 to 1 by 1 in inc) {
            let 'elt1_r = SInt(Elem_read(operand1, 4 * e + 2 * i + 0, DIV(esize, 4)));
            let 'elt1_i = SInt(Elem_read(operand1, 4 * e + 2 * i + 1, DIV(esize, 4)));
            let 'elt2_a = SInt(Elem_read(operand2, 4 * s + 2 * i + sel_a, DIV(esize, 4)));
            let 'elt2_b = SInt(Elem_read(operand2, 4 * s + 2 * i + sel_b, DIV(esize, 4)));
            if sub_i then {
                res = res + elt1_r * elt2_a - elt1_i * elt2_b
            } else {
                res = res + elt1_r * elt2_a + elt1_i * elt2_b
            }
        };
        result = Elem_set(result, e, esize, res)
    };
    Z_set(da, VL) = result
}

val decode_CDOT_Z_ZZZi_D : (bits(2), bits(1), bits(4), bits(2), bits(5), bits(5)) -> unit

function decode_CDOT_Z_ZZZi_D (size, i1, Zm, rot, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let 'sel_a = UInt([rot[0]]);
    let 'sel_b = UInt(not_vec([rot[0]]));
    let sub_i : bool = [rot[0]] == [rot[1]];
    match VL {
      128 => {
          execute_CDOT_Z_ZZZi_D(128, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      256 => {
          execute_CDOT_Z_ZZZi_D(256, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      512 => {
          execute_CDOT_Z_ZZZi_D(512, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      1024 => {
          execute_CDOT_Z_ZZZi_D(1024, da, esize, index, m, n, sel_a, sel_b, sub_i)
      },
      2048 => {
          execute_CDOT_Z_ZZZi_D(2048, da, esize, index, m, n, sel_a, sel_b, sub_i)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1754) = {
    SEE = 1754;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let rot = Slice(__opcode, 10, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_CDOT_Z_ZZZi_D(size, i1, Zm, rot, Zn, Zda)
}

val execute_SMMLA_Z_ZZZ__ : forall 'VL 'da 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned)) -> unit

function execute_SMMLA_Z_ZZZ__ (VL, da, m, n, op1_unsigned, op2_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = Zeros(VL);
    op1 : bits(128) = undefined;
    op2 : bits(128) = undefined;
    addend : bits(128) = undefined;
    res : bits(128) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        op1 = Elem_read(operand1, s, 128);
        op2 = Elem_read(operand2, s, 128);
        addend = Elem_read(operand3, s, 128);
        res = MatMulAdd(addend, op1, op2, op1_unsigned, op2_unsigned);
        result = Elem_set(result, s, 128, res)
    };
    Z_set(da, VL) = result
}

val decode_SMMLA_Z_ZZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_SMMLA_Z_ZZZ__ (uns, Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveInt8MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_unsigned : bool = false;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMMLA_Z_ZZZ__(128, da, m, n, op1_unsigned, op2_unsigned)
      },
      256 => {
          execute_SMMLA_Z_ZZZ__(256, da, m, n, op1_unsigned, op2_unsigned)
      },
      512 => {
          execute_SMMLA_Z_ZZZ__(512, da, m, n, op1_unsigned, op2_unsigned)
      },
      1024 => {
          execute_SMMLA_Z_ZZZ__(1024, da, m, n, op1_unsigned, op2_unsigned)
      },
      2048 => {
          execute_SMMLA_Z_ZZZ__(2048, da, m, n, op1_unsigned, op2_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1755) = {
    SEE = 1755;
    let uns = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SMMLA_Z_ZZZ__(uns, Zm, Zn, Zda)
}

val execute_UMMLA_Z_ZZZ__ : forall 'VL 'da 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned)) -> unit

function execute_UMMLA_Z_ZZZ__ (VL, da, m, n, op1_unsigned, op2_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = Zeros(VL);
    op1 : bits(128) = undefined;
    op2 : bits(128) = undefined;
    addend : bits(128) = undefined;
    res : bits(128) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        op1 = Elem_read(operand1, s, 128);
        op2 = Elem_read(operand2, s, 128);
        addend = Elem_read(operand3, s, 128);
        res = MatMulAdd(addend, op1, op2, op1_unsigned, op2_unsigned);
        result = Elem_set(result, s, 128, res)
    };
    Z_set(da, VL) = result
}

val decode_UMMLA_Z_ZZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_UMMLA_Z_ZZZ__ (uns, Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveInt8MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMMLA_Z_ZZZ__(128, da, m, n, op1_unsigned, op2_unsigned)
      },
      256 => {
          execute_UMMLA_Z_ZZZ__(256, da, m, n, op1_unsigned, op2_unsigned)
      },
      512 => {
          execute_UMMLA_Z_ZZZ__(512, da, m, n, op1_unsigned, op2_unsigned)
      },
      1024 => {
          execute_UMMLA_Z_ZZZ__(1024, da, m, n, op1_unsigned, op2_unsigned)
      },
      2048 => {
          execute_UMMLA_Z_ZZZ__(2048, da, m, n, op1_unsigned, op2_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1756) = {
    SEE = 1756;
    let uns = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_UMMLA_Z_ZZZ__(uns, Zm, Zn, Zda)
}

val execute_USMMLA_Z_ZZZ__ : forall 'VL 'da 'm 'n ('op1_unsigned : Bool) ('op2_unsigned : Bool),
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('m), int('n), bool('op1_unsigned), bool('op2_unsigned)) -> unit

function execute_USMMLA_Z_ZZZ__ (VL, da, m, n, op1_unsigned, op2_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = Zeros(VL);
    op1 : bits(128) = undefined;
    op2 : bits(128) = undefined;
    addend : bits(128) = undefined;
    res : bits(128) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        op1 = Elem_read(operand1, s, 128);
        op2 = Elem_read(operand2, s, 128);
        addend = Elem_read(operand3, s, 128);
        res = MatMulAdd(addend, op1, op2, op1_unsigned, op2_unsigned);
        result = Elem_set(result, s, 128, res)
    };
    Z_set(da, VL) = result
}

val decode_USMMLA_Z_ZZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_USMMLA_Z_ZZZ__ (uns, Zm, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveInt8MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    let op1_unsigned : bool = true;
    let op2_unsigned : bool = false;
    match VL {
      128 => {
          execute_USMMLA_Z_ZZZ__(128, da, m, n, op1_unsigned, op2_unsigned)
      },
      256 => {
          execute_USMMLA_Z_ZZZ__(256, da, m, n, op1_unsigned, op2_unsigned)
      },
      512 => {
          execute_USMMLA_Z_ZZZ__(512, da, m, n, op1_unsigned, op2_unsigned)
      },
      1024 => {
          execute_USMMLA_Z_ZZZ__(1024, da, m, n, op1_unsigned, op2_unsigned)
      },
      2048 => {
          execute_USMMLA_Z_ZZZ__(2048, da, m, n, op1_unsigned, op2_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1757) = {
    SEE = 1757;
    let uns = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_USMMLA_Z_ZZZ__(uns, Zm, Zn, Zda)
}

val execute_SQDMULH_Z_ZZi_H : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQDMULH_Z_ZZi_H (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat((res >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULH_Z_ZZi_H : (bits(1), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULH_Z_ZZi_H (i3h, i3l, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'index = UInt(i3h @ i3l);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQDMULH_Z_ZZi_H(128, d, esize, index, m, n)
      },
      256 => {
          execute_SQDMULH_Z_ZZi_H(256, d, esize, index, m, n)
      },
      512 => {
          execute_SQDMULH_Z_ZZi_H(512, d, esize, index, m, n)
      },
      1024 => {
          execute_SQDMULH_Z_ZZi_H(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_SQDMULH_Z_ZZi_H(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1758) = {
    SEE = 1758;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULH_Z_ZZi_H(i3h, i3l, Zm, R, Zn, Zd)
}

val execute_SQDMULH_Z_ZZi_S : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 'm in {0, 1, 2, 3, 4, 5, 6, 7} & 'index in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQDMULH_Z_ZZi_S (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat((res >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULH_Z_ZZi_S : (bits(2), bits(2), bits(3), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULH_Z_ZZi_S (size, i2, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'index = UInt(i2);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQDMULH_Z_ZZi_S(128, d, esize, index, m, n)
      },
      256 => {
          execute_SQDMULH_Z_ZZi_S(256, d, esize, index, m, n)
      },
      512 => {
          execute_SQDMULH_Z_ZZi_S(512, d, esize, index, m, n)
      },
      1024 => {
          execute_SQDMULH_Z_ZZi_S(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_SQDMULH_Z_ZZi_S(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1759) = {
    SEE = 1759;
    let size = Slice(__opcode, 22, 2);
    let i2 = Slice(__opcode, 19, 2);
    let Zm = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULH_Z_ZZi_S(size, i2, Zm, R, Zn, Zd)
}

val execute_SQDMULH_Z_ZZi_D : forall 'VL 'd 'esize 'index 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 15 & 'index in {0, 1} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('m), int('n)) -> unit

function execute_SQDMULH_Z_ZZi_D (VL, d, esize, index, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let 'eltspersegment = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'segmentbase = e - MOD(e, eltspersegment);
        let 's = segmentbase + index;
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, s, esize));
        let 'res = 2 * element1 * element2;
        result = Elem_set(result, e, esize, SignedSat((res >> esize), esize))
    };
    Z_set(d, VL) = result
}

val decode_SQDMULH_Z_ZZi_D : (bits(2), bits(1), bits(4), bits(1), bits(5), bits(5)) -> unit

function decode_SQDMULH_Z_ZZi_D (size, i1, Zm, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'index = UInt(i1);
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQDMULH_Z_ZZi_D(128, d, esize, index, m, n)
      },
      256 => {
          execute_SQDMULH_Z_ZZi_D(256, d, esize, index, m, n)
      },
      512 => {
          execute_SQDMULH_Z_ZZi_D(512, d, esize, index, m, n)
      },
      1024 => {
          execute_SQDMULH_Z_ZZi_D(1024, d, esize, index, m, n)
      },
      2048 => {
          execute_SQDMULH_Z_ZZi_D(2048, d, esize, index, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1760) = {
    SEE = 1760;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 20, 1);
    let Zm = Slice(__opcode, 16, 4);
    let R = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQDMULH_Z_ZZi_D(size, i1, Zm, R, Zn, Zd)
}

val execute_SRSRA_Z_ZI__ : forall 'VL 'da 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('n), int('shift)) -> unit

function execute_SRSRA_Z_ZI__ (VL, da, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = ((SInt(Elem_read(operand1, e, esize)) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, e, esize, Elem_read(operand2, e, esize) + element[esize - 1 .. 0])
    };
    Z_set(da, VL) = result
}

val decode_SRSRA_Z_ZI__ : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SRSRA_Z_ZI__ (tszh, tszl, imm3, R, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'da = UInt(Zda);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_SRSRA_Z_ZI__(128, da, 8, n, shift)
            },
            256 => {
                execute_SRSRA_Z_ZI__(256, da, 8, n, shift)
            },
            512 => {
                execute_SRSRA_Z_ZI__(512, da, 8, n, shift)
            },
            1024 => {
                execute_SRSRA_Z_ZI__(1024, da, 8, n, shift)
            },
            2048 => {
                execute_SRSRA_Z_ZI__(2048, da, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_SRSRA_Z_ZI__(128, da, 16, n, shift)
            },
            256 => {
                execute_SRSRA_Z_ZI__(256, da, 16, n, shift)
            },
            512 => {
                execute_SRSRA_Z_ZI__(512, da, 16, n, shift)
            },
            1024 => {
                execute_SRSRA_Z_ZI__(1024, da, 16, n, shift)
            },
            2048 => {
                execute_SRSRA_Z_ZI__(2048, da, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_SRSRA_Z_ZI__(128, da, 32, n, shift)
            },
            256 => {
                execute_SRSRA_Z_ZI__(256, da, 32, n, shift)
            },
            512 => {
                execute_SRSRA_Z_ZI__(512, da, 32, n, shift)
            },
            1024 => {
                execute_SRSRA_Z_ZI__(1024, da, 32, n, shift)
            },
            2048 => {
                execute_SRSRA_Z_ZI__(2048, da, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_SRSRA_Z_ZI__(128, da, 64, n, shift)
            },
            256 => {
                execute_SRSRA_Z_ZI__(256, da, 64, n, shift)
            },
            512 => {
                execute_SRSRA_Z_ZI__(512, da, 64, n, shift)
            },
            1024 => {
                execute_SRSRA_Z_ZI__(1024, da, 64, n, shift)
            },
            2048 => {
                execute_SRSRA_Z_ZI__(2048, da, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1761) = {
    SEE = 1761;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SRSRA_Z_ZI__(tszh, tszl, imm3, R, U, Zn, Zda)
}

val execute_SSRA_Z_ZI__ : forall 'VL 'da 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('n), int('shift)) -> unit

function execute_SSRA_Z_ZI__ (VL, da, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = (SInt(Elem_read(operand1, e, esize)) >> shift);
        result = Elem_set(result, e, esize, Elem_read(operand2, e, esize) + element[esize - 1 .. 0])
    };
    Z_set(da, VL) = result
}

val decode_SSRA_Z_ZI__ : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_SSRA_Z_ZI__ (tszh, tszl, imm3, R, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'da = UInt(Zda);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_SSRA_Z_ZI__(128, da, 8, n, shift)
            },
            256 => {
                execute_SSRA_Z_ZI__(256, da, 8, n, shift)
            },
            512 => {
                execute_SSRA_Z_ZI__(512, da, 8, n, shift)
            },
            1024 => {
                execute_SSRA_Z_ZI__(1024, da, 8, n, shift)
            },
            2048 => {
                execute_SSRA_Z_ZI__(2048, da, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_SSRA_Z_ZI__(128, da, 16, n, shift)
            },
            256 => {
                execute_SSRA_Z_ZI__(256, da, 16, n, shift)
            },
            512 => {
                execute_SSRA_Z_ZI__(512, da, 16, n, shift)
            },
            1024 => {
                execute_SSRA_Z_ZI__(1024, da, 16, n, shift)
            },
            2048 => {
                execute_SSRA_Z_ZI__(2048, da, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_SSRA_Z_ZI__(128, da, 32, n, shift)
            },
            256 => {
                execute_SSRA_Z_ZI__(256, da, 32, n, shift)
            },
            512 => {
                execute_SSRA_Z_ZI__(512, da, 32, n, shift)
            },
            1024 => {
                execute_SSRA_Z_ZI__(1024, da, 32, n, shift)
            },
            2048 => {
                execute_SSRA_Z_ZI__(2048, da, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_SSRA_Z_ZI__(128, da, 64, n, shift)
            },
            256 => {
                execute_SSRA_Z_ZI__(256, da, 64, n, shift)
            },
            512 => {
                execute_SSRA_Z_ZI__(512, da, 64, n, shift)
            },
            1024 => {
                execute_SSRA_Z_ZI__(1024, da, 64, n, shift)
            },
            2048 => {
                execute_SSRA_Z_ZI__(2048, da, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1762) = {
    SEE = 1762;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SSRA_Z_ZI__(tszh, tszl, imm3, R, U, Zn, Zda)
}

val execute_URSRA_Z_ZI__ : forall 'VL 'da 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('n), int('shift)) -> unit

function execute_URSRA_Z_ZI__ (VL, da, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = ((UInt(Elem_read(operand1, e, esize)) + (1 << (shift - 1))) >> shift);
        result = Elem_set(result, e, esize, Elem_read(operand2, e, esize) + element[esize - 1 .. 0])
    };
    Z_set(da, VL) = result
}

val decode_URSRA_Z_ZI__ : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_URSRA_Z_ZI__ (tszh, tszl, imm3, R, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'da = UInt(Zda);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_URSRA_Z_ZI__(128, da, 8, n, shift)
            },
            256 => {
                execute_URSRA_Z_ZI__(256, da, 8, n, shift)
            },
            512 => {
                execute_URSRA_Z_ZI__(512, da, 8, n, shift)
            },
            1024 => {
                execute_URSRA_Z_ZI__(1024, da, 8, n, shift)
            },
            2048 => {
                execute_URSRA_Z_ZI__(2048, da, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_URSRA_Z_ZI__(128, da, 16, n, shift)
            },
            256 => {
                execute_URSRA_Z_ZI__(256, da, 16, n, shift)
            },
            512 => {
                execute_URSRA_Z_ZI__(512, da, 16, n, shift)
            },
            1024 => {
                execute_URSRA_Z_ZI__(1024, da, 16, n, shift)
            },
            2048 => {
                execute_URSRA_Z_ZI__(2048, da, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_URSRA_Z_ZI__(128, da, 32, n, shift)
            },
            256 => {
                execute_URSRA_Z_ZI__(256, da, 32, n, shift)
            },
            512 => {
                execute_URSRA_Z_ZI__(512, da, 32, n, shift)
            },
            1024 => {
                execute_URSRA_Z_ZI__(1024, da, 32, n, shift)
            },
            2048 => {
                execute_URSRA_Z_ZI__(2048, da, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_URSRA_Z_ZI__(128, da, 64, n, shift)
            },
            256 => {
                execute_URSRA_Z_ZI__(256, da, 64, n, shift)
            },
            512 => {
                execute_URSRA_Z_ZI__(512, da, 64, n, shift)
            },
            1024 => {
                execute_URSRA_Z_ZI__(1024, da, 64, n, shift)
            },
            2048 => {
                execute_URSRA_Z_ZI__(2048, da, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1763) = {
    SEE = 1763;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_URSRA_Z_ZI__(tszh, tszl, imm3, R, U, Zn, Zda)
}

val execute_USRA_Z_ZI__ : forall 'VL 'da 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('n), int('shift)) -> unit

function execute_USRA_Z_ZI__ (VL, da, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(da, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element = (UInt(Elem_read(operand1, e, esize)) >> shift);
        result = Elem_set(result, e, esize, Elem_read(operand2, e, esize) + element[esize - 1 .. 0])
    };
    Z_set(da, VL) = result
}

val decode_USRA_Z_ZI__ : (bits(2), bits(2), bits(3), bits(1), bits(1), bits(5), bits(5)) -> unit

function decode_USRA_Z_ZI__ (tszh, tszl, imm3, R, U, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'da = UInt(Zda);
    let 'shift = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_USRA_Z_ZI__(128, da, 8, n, shift)
            },
            256 => {
                execute_USRA_Z_ZI__(256, da, 8, n, shift)
            },
            512 => {
                execute_USRA_Z_ZI__(512, da, 8, n, shift)
            },
            1024 => {
                execute_USRA_Z_ZI__(1024, da, 8, n, shift)
            },
            2048 => {
                execute_USRA_Z_ZI__(2048, da, 8, n, shift)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_USRA_Z_ZI__(128, da, 16, n, shift)
            },
            256 => {
                execute_USRA_Z_ZI__(256, da, 16, n, shift)
            },
            512 => {
                execute_USRA_Z_ZI__(512, da, 16, n, shift)
            },
            1024 => {
                execute_USRA_Z_ZI__(1024, da, 16, n, shift)
            },
            2048 => {
                execute_USRA_Z_ZI__(2048, da, 16, n, shift)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_USRA_Z_ZI__(128, da, 32, n, shift)
            },
            256 => {
                execute_USRA_Z_ZI__(256, da, 32, n, shift)
            },
            512 => {
                execute_USRA_Z_ZI__(512, da, 32, n, shift)
            },
            1024 => {
                execute_USRA_Z_ZI__(1024, da, 32, n, shift)
            },
            2048 => {
                execute_USRA_Z_ZI__(2048, da, 32, n, shift)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_USRA_Z_ZI__(128, da, 64, n, shift)
            },
            256 => {
                execute_USRA_Z_ZI__(256, da, 64, n, shift)
            },
            512 => {
                execute_USRA_Z_ZI__(512, da, 64, n, shift)
            },
            1024 => {
                execute_USRA_Z_ZI__(1024, da, 64, n, shift)
            },
            2048 => {
                execute_USRA_Z_ZI__(2048, da, 64, n, shift)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1764) = {
    SEE = 1764;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let R = Slice(__opcode, 11, 1);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_USRA_Z_ZI__(tszh, tszl, imm3, R, U, Zn, Zda)
}

val execute_AESD_Z_ZZ__ : forall 'VL 'dn 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m)) -> unit

function execute_AESD_Z_ZZ__ (VL, dn, m) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = EOR(operand1, operand2);
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        result = Elem_set(result, s, 128, AESInvSubBytes(AESInvShiftRows(Elem_read(result, s, 128))))
    };
    Z_set(dn, VL) = result
}

val decode_AESD_Z_ZZ__ : (bits(2), bits(5), bits(5)) -> unit

function decode_AESD_Z_ZZ__ (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2AES()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_AESD_Z_ZZ__(128, dn, m)
      },
      256 => {
          execute_AESD_Z_ZZ__(256, dn, m)
      },
      512 => {
          execute_AESD_Z_ZZ__(512, dn, m)
      },
      1024 => {
          execute_AESD_Z_ZZ__(1024, dn, m)
      },
      2048 => {
          execute_AESD_Z_ZZ__(2048, dn, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1765) = {
    SEE = 1765;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_AESD_Z_ZZ__(size, Zm, Zdn)
}

val execute_AESE_Z_ZZ__ : forall 'VL 'dn 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m)) -> unit

function execute_AESE_Z_ZZ__ (VL, dn, m) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = EOR(operand1, operand2);
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        result = Elem_set(result, s, 128, AESSubBytes(AESShiftRows(Elem_read(result, s, 128))))
    };
    Z_set(dn, VL) = result
}

val decode_AESE_Z_ZZ__ : (bits(2), bits(5), bits(5)) -> unit

function decode_AESE_Z_ZZ__ (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2AES()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_AESE_Z_ZZ__(128, dn, m)
      },
      256 => {
          execute_AESE_Z_ZZ__(256, dn, m)
      },
      512 => {
          execute_AESE_Z_ZZ__(512, dn, m)
      },
      1024 => {
          execute_AESE_Z_ZZ__(1024, dn, m)
      },
      2048 => {
          execute_AESE_Z_ZZ__(2048, dn, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1766) = {
    SEE = 1766;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_AESE_Z_ZZ__(size, Zm, Zdn)
}

val execute_AESIMC_Z_Z__ : forall 'VL 'dn,
  (0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn)) -> unit

function execute_AESIMC_Z_Z__ (VL, dn) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        result = Elem_set(result, s, 128, AESInvMixColumns(Elem_read(operand, s, 128)))
    };
    Z_set(dn, VL) = result
}

val decode_AESIMC_Z_Z__ : (bits(2), bits(5)) -> unit

function decode_AESIMC_Z_Z__ (size, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2AES()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_AESIMC_Z_Z__(128, dn)
      },
      256 => {
          execute_AESIMC_Z_Z__(256, dn)
      },
      512 => {
          execute_AESIMC_Z_Z__(512, dn)
      },
      1024 => {
          execute_AESIMC_Z_Z__(1024, dn)
      },
      2048 => {
          execute_AESIMC_Z_Z__(2048, dn)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1767) = {
    SEE = 1767;
    let size = Slice(__opcode, 22, 2);
    let Zdn = Slice(__opcode, 0, 5);
    decode_AESIMC_Z_Z__(size, Zdn)
}

val execute_AESMC_Z_Z__ : forall 'VL 'dn,
  (0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn)) -> unit

function execute_AESMC_Z_Z__ (VL, dn) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand : bits('VL) = Z_read(dn, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        result = Elem_set(result, s, 128, AESMixColumns(Elem_read(operand, s, 128)))
    };
    Z_set(dn, VL) = result
}

val decode_AESMC_Z_Z__ : (bits(2), bits(5)) -> unit

function decode_AESMC_Z_Z__ (size, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2AES()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_AESMC_Z_Z__(128, dn)
      },
      256 => {
          execute_AESMC_Z_Z__(256, dn)
      },
      512 => {
          execute_AESMC_Z_Z__(512, dn)
      },
      1024 => {
          execute_AESMC_Z_Z__(1024, dn)
      },
      2048 => {
          execute_AESMC_Z_Z__(2048, dn)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1768) = {
    SEE = 1768;
    let size = Slice(__opcode, 22, 2);
    let Zdn = Slice(__opcode, 0, 5);
    decode_AESMC_Z_Z__(size, Zdn)
}

val execute_RAX1_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_RAX1_Z_ZZ__ (VL, d, m, n) = {
    if HaveSME2p1() then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'elements = DIV(VL, 64);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits(64) = Elem_read(operand1, e, 64);
        let element2 : bits(64) = Elem_read(operand2, e, 64);
        result = Elem_set(result, e, 64, EOR(element1, ROL(element2, 1)))
    };
    Z_set(d, VL) = result
}

val decode_RAX1_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_RAX1_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2SHA3()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_RAX1_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_RAX1_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_RAX1_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_RAX1_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_RAX1_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1769) = {
    SEE = 1769;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_RAX1_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_SM4E_Z_ZZ__ : forall 'VL 'dn 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m)) -> unit

function execute_SM4E_Z_ZZ__ (VL, dn, m) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        let key : bits(128) = Elem_read(operand2, s, 128);
        intval : bits(32) = undefined;
        sboxout : bits(8) = undefined;
        roundresult : bits(128) = Elem_read(operand1, s, 128);
        roundkey : bits(32) = undefined;
        foreach (index from 0 to 3 by 1 in inc) {
            roundkey = Elem_read(key, index, 32);
            intval = EOR(EOR(EOR(roundresult[127 .. 96], roundresult[95 .. 64]), roundresult[63 .. 32]), roundkey);
            foreach (i from 0 to 3 by 1 in inc) {
                intval = Elem_set(intval, i, 8, Sbox(Elem_read(intval, i, 8)))
            };
            intval = EOR(EOR(EOR(EOR(intval, ROL(intval, 2)), ROL(intval, 10)), ROL(intval, 18)), ROL(intval, 24));
            intval = EOR(intval, roundresult[31 .. 0]);
            roundresult[31 .. 0] = roundresult[63 .. 32];
            roundresult[63 .. 32] = roundresult[95 .. 64];
            roundresult[95 .. 64] = roundresult[127 .. 96];
            roundresult[127 .. 96] = intval
        };
        result = Elem_set(result, s, 128, roundresult)
    };
    Z_set(dn, VL) = result
}

val decode_SM4E_Z_ZZ__ : (bits(2), bits(5), bits(5)) -> unit

function decode_SM4E_Z_ZZ__ (size, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2SM4()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_SM4E_Z_ZZ__(128, dn, m)
      },
      256 => {
          execute_SM4E_Z_ZZ__(256, dn, m)
      },
      512 => {
          execute_SM4E_Z_ZZ__(512, dn, m)
      },
      1024 => {
          execute_SM4E_Z_ZZ__(1024, dn, m)
      },
      2048 => {
          execute_SM4E_Z_ZZ__(2048, dn, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1770) = {
    SEE = 1770;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_SM4E_Z_ZZ__(size, Zm, Zdn)
}

val execute_SM4EKEY_Z_ZZ__ : forall 'VL 'd 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('m), int('n)) -> unit

function execute_SM4EKEY_Z_ZZ__ (VL, d, m, n) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        let source : bits(128) = Elem_read(operand2, s, 128);
        intval : bits(32) = undefined;
        sboxout : bits(8) = undefined;
        const : bits(32) = undefined;
        roundresult : bits(128) = Elem_read(operand1, s, 128);
        foreach (index from 0 to 3 by 1 in inc) {
            const = Elem_read(source, index, 32);
            intval = EOR(EOR(EOR(roundresult[127 .. 96], roundresult[95 .. 64]), roundresult[63 .. 32]), const);
            foreach (i from 0 to 3 by 1 in inc) {
                intval = Elem_set(intval, i, 8, Sbox(Elem_read(intval, i, 8)))
            };
            intval = EOR(EOR(intval, ROL(intval, 13)), ROL(intval, 23));
            intval = EOR(intval, roundresult[31 .. 0]);
            roundresult[31 .. 0] = roundresult[63 .. 32];
            roundresult[63 .. 32] = roundresult[95 .. 64];
            roundresult[95 .. 64] = roundresult[127 .. 96];
            roundresult[127 .. 96] = intval
        };
        result = Elem_set(result, s, 128, roundresult)
    };
    Z_set(d, VL) = result
}

val decode_SM4EKEY_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_SM4EKEY_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVE2SM4()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SM4EKEY_Z_ZZ__(128, d, m, n)
      },
      256 => {
          execute_SM4EKEY_Z_ZZ__(256, d, m, n)
      },
      512 => {
          execute_SM4EKEY_Z_ZZ__(512, d, m, n)
      },
      1024 => {
          execute_SM4EKEY_Z_ZZ__(1024, d, m, n)
      },
      2048 => {
          execute_SM4EKEY_Z_ZZ__(2048, d, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1771) = {
    SEE = 1771;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SM4EKEY_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_XAR_Z_ZZI__ : forall 'VL 'dn 'esize 'm 'rot,
  (0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('esize), int('m), int('rot)) -> unit

function execute_XAR_Z_ZZI__ (VL, dn, esize, m, rot) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(operand1, e, esize);
        let element2 : bits('esize) = Elem_read(operand2, e, esize);
        assert(constraint('rot >= 0));
        result = Elem_set(result, e, esize, ROR(EOR(element1, element2), rot))
    };
    Z_set(dn, VL) = result
}

val decode_XAR_Z_ZZI__ : (bits(2), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_XAR_Z_ZZI__ (tszh, tszl, imm3, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let tsize : bits(4) = tszh @ tszl;
    esize : {8, 16, 32, 64} = 8;
    match tsize {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b0001 => {
          esize = 8
      },
      [bitzero, bitzero, bitone, _] => {
          esize = 16
      },
      [bitzero, bitone, _, _] => {
          esize = 32
      },
      [bitone, _, _, _] => {
          esize = 64
      }
    };
    let 'esize = esize;
    let 'm = UInt(Zm);
    let 'dn = UInt(Zdn);
    let 'rot = 2 * esize - UInt(tsize @ imm3);
    match esize {
      8 => {
          match VL {
            128 => {
                execute_XAR_Z_ZZI__(128, dn, 8, m, rot)
            },
            256 => {
                execute_XAR_Z_ZZI__(256, dn, 8, m, rot)
            },
            512 => {
                execute_XAR_Z_ZZI__(512, dn, 8, m, rot)
            },
            1024 => {
                execute_XAR_Z_ZZI__(1024, dn, 8, m, rot)
            },
            2048 => {
                execute_XAR_Z_ZZI__(2048, dn, 8, m, rot)
            }
          }
      },
      16 => {
          match VL {
            128 => {
                execute_XAR_Z_ZZI__(128, dn, 16, m, rot)
            },
            256 => {
                execute_XAR_Z_ZZI__(256, dn, 16, m, rot)
            },
            512 => {
                execute_XAR_Z_ZZI__(512, dn, 16, m, rot)
            },
            1024 => {
                execute_XAR_Z_ZZI__(1024, dn, 16, m, rot)
            },
            2048 => {
                execute_XAR_Z_ZZI__(2048, dn, 16, m, rot)
            }
          }
      },
      32 => {
          match VL {
            128 => {
                execute_XAR_Z_ZZI__(128, dn, 32, m, rot)
            },
            256 => {
                execute_XAR_Z_ZZI__(256, dn, 32, m, rot)
            },
            512 => {
                execute_XAR_Z_ZZI__(512, dn, 32, m, rot)
            },
            1024 => {
                execute_XAR_Z_ZZI__(1024, dn, 32, m, rot)
            },
            2048 => {
                execute_XAR_Z_ZZI__(2048, dn, 32, m, rot)
            }
          }
      },
      64 => {
          match VL {
            128 => {
                execute_XAR_Z_ZZI__(128, dn, 64, m, rot)
            },
            256 => {
                execute_XAR_Z_ZZI__(256, dn, 64, m, rot)
            },
            512 => {
                execute_XAR_Z_ZZI__(512, dn, 64, m, rot)
            },
            1024 => {
                execute_XAR_Z_ZZI__(1024, dn, 64, m, rot)
            },
            2048 => {
                execute_XAR_Z_ZZI__(2048, dn, 64, m, rot)
            }
          }
      },
      _ => {
          assert(false)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1772) = {
    SEE = 1772;
    let tszh = Slice(__opcode, 22, 2);
    let tszl = Slice(__opcode, 19, 2);
    let imm3 = Slice(__opcode, 16, 3);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_XAR_Z_ZZI__(tszh, tszl, imm3, Zm, Zdn)
}

val execute_BCAX_Z_ZZZ__ : forall 'VL 'dn 'k 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'k & 'k <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('k), int('m)) -> unit

function execute_BCAX_Z_ZZZ__ (VL, dn, k, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(k, VL);
    Z_set(dn, VL) = EOR(operand1, operand2 & not_vec(operand3))
}

val decode_BCAX_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_BCAX_Z_ZZZ__ (Zm, Zk, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'k = UInt(Zk);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_BCAX_Z_ZZZ__(128, dn, k, m)
      },
      256 => {
          execute_BCAX_Z_ZZZ__(256, dn, k, m)
      },
      512 => {
          execute_BCAX_Z_ZZZ__(512, dn, k, m)
      },
      1024 => {
          execute_BCAX_Z_ZZZ__(1024, dn, k, m)
      },
      2048 => {
          execute_BCAX_Z_ZZZ__(2048, dn, k, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1773) = {
    SEE = 1773;
    let Zm = Slice(__opcode, 16, 5);
    let Zk = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BCAX_Z_ZZZ__(Zm, Zk, Zdn)
}

val execute_EOR3_Z_ZZZ__ : forall 'VL 'dn 'k 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'k & 'k <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('k), int('m)) -> unit

function execute_EOR3_Z_ZZZ__ (VL, dn, k, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(k, VL);
    Z_set(dn, VL) = EOR(EOR(operand1, operand2), operand3)
}

val decode_EOR3_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_EOR3_Z_ZZZ__ (Zm, Zk, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'k = UInt(Zk);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_EOR3_Z_ZZZ__(128, dn, k, m)
      },
      256 => {
          execute_EOR3_Z_ZZZ__(256, dn, k, m)
      },
      512 => {
          execute_EOR3_Z_ZZZ__(512, dn, k, m)
      },
      1024 => {
          execute_EOR3_Z_ZZZ__(1024, dn, k, m)
      },
      2048 => {
          execute_EOR3_Z_ZZZ__(2048, dn, k, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1774) = {
    SEE = 1774;
    let Zm = Slice(__opcode, 16, 5);
    let Zk = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_EOR3_Z_ZZZ__(Zm, Zk, Zdn)
}

val execute_BSL_Z_ZZZ__ : forall 'VL 'dn 'k 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'k & 'k <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('k), int('m)) -> unit

function execute_BSL_Z_ZZZ__ (VL, dn, k, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(k, VL);
    Z_set(dn, VL) = operand1 & operand3 | operand2 & not_vec(operand3)
}

val decode_BSL_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_BSL_Z_ZZZ__ (Zm, Zk, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'k = UInt(Zk);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_BSL_Z_ZZZ__(128, dn, k, m)
      },
      256 => {
          execute_BSL_Z_ZZZ__(256, dn, k, m)
      },
      512 => {
          execute_BSL_Z_ZZZ__(512, dn, k, m)
      },
      1024 => {
          execute_BSL_Z_ZZZ__(1024, dn, k, m)
      },
      2048 => {
          execute_BSL_Z_ZZZ__(2048, dn, k, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1775) = {
    SEE = 1775;
    let Zm = Slice(__opcode, 16, 5);
    let Zk = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BSL_Z_ZZZ__(Zm, Zk, Zdn)
}

val execute_BSL1N_Z_ZZZ__ : forall 'VL 'dn 'k 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'k & 'k <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('k), int('m)) -> unit

function execute_BSL1N_Z_ZZZ__ (VL, dn, k, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(k, VL);
    Z_set(dn, VL) = not_vec(operand1) & operand3 | operand2 & not_vec(operand3)
}

val decode_BSL1N_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_BSL1N_Z_ZZZ__ (Zm, Zk, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'k = UInt(Zk);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_BSL1N_Z_ZZZ__(128, dn, k, m)
      },
      256 => {
          execute_BSL1N_Z_ZZZ__(256, dn, k, m)
      },
      512 => {
          execute_BSL1N_Z_ZZZ__(512, dn, k, m)
      },
      1024 => {
          execute_BSL1N_Z_ZZZ__(1024, dn, k, m)
      },
      2048 => {
          execute_BSL1N_Z_ZZZ__(2048, dn, k, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1776) = {
    SEE = 1776;
    let Zm = Slice(__opcode, 16, 5);
    let Zk = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BSL1N_Z_ZZZ__(Zm, Zk, Zdn)
}

val execute_BSL2N_Z_ZZZ__ : forall 'VL 'dn 'k 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'k & 'k <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('k), int('m)) -> unit

function execute_BSL2N_Z_ZZZ__ (VL, dn, k, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(k, VL);
    Z_set(dn, VL) = operand1 & operand3 | not_vec(operand2) & not_vec(operand3)
}

val decode_BSL2N_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_BSL2N_Z_ZZZ__ (Zm, Zk, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'k = UInt(Zk);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_BSL2N_Z_ZZZ__(128, dn, k, m)
      },
      256 => {
          execute_BSL2N_Z_ZZZ__(256, dn, k, m)
      },
      512 => {
          execute_BSL2N_Z_ZZZ__(512, dn, k, m)
      },
      1024 => {
          execute_BSL2N_Z_ZZZ__(1024, dn, k, m)
      },
      2048 => {
          execute_BSL2N_Z_ZZZ__(2048, dn, k, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1777) = {
    SEE = 1777;
    let Zm = Slice(__opcode, 16, 5);
    let Zk = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_BSL2N_Z_ZZZ__(Zm, Zk, Zdn)
}

val execute_NBSL_Z_ZZZ__ : forall 'VL 'dn 'k 'm,
  (0 <= 'm & 'm <= 31 & 0 <= 'k & 'k <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('k), int('m)) -> unit

function execute_NBSL_Z_ZZZ__ (VL, dn, k, m) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(k, VL);
    Z_set(dn, VL) = not_vec(operand1 & operand3 | operand2 & not_vec(operand3))
}

val decode_NBSL_Z_ZZZ__ : (bits(5), bits(5), bits(5)) -> unit

function decode_NBSL_Z_ZZZ__ (Zm, Zk, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'm = UInt(Zm);
    let 'k = UInt(Zk);
    let 'dn = UInt(Zdn);
    match VL {
      128 => {
          execute_NBSL_Z_ZZZ__(128, dn, k, m)
      },
      256 => {
          execute_NBSL_Z_ZZZ__(256, dn, k, m)
      },
      512 => {
          execute_NBSL_Z_ZZZ__(512, dn, k, m)
      },
      1024 => {
          execute_NBSL_Z_ZZZ__(1024, dn, k, m)
      },
      2048 => {
          execute_NBSL_Z_ZZZ__(2048, dn, k, m)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1778) = {
    SEE = 1778;
    let Zm = Slice(__opcode, 16, 5);
    let Zk = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_NBSL_Z_ZZZ__(Zm, Zk, Zdn)
}

val execute_ADCLB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_ADCLB_Z_ZZZ__ (VL, da, esize, m, n) = {
    carry_out : bits(1) = undefined;
    nzcv : bits(4) = undefined;
    res : bits('esize) = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'pairs = DIV(VL, esize * 2);
    let operand : bits('VL) = Z_read(n, VL);
    let carries : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(result, 2 * p + 0, esize);
        let element2 : bits('esize) = Elem_read(operand, 2 * p + 0, esize);
        let carry_in : bits(1) = [Elem_read(carries, 2 * p + 1, esize)[0]];
        (res, nzcv) = AddWithCarry(element1, element2, carry_in);
        carry_out = [nzcv[1]];
        result = Elem_set(result, 2 * p + 0, esize, res);
        result = Elem_set(result, 2 * p + 1, esize, ZeroExtend(carry_out, esize))
    };
    Z_set(da, VL) = result
}

val decode_ADCLB_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ADCLB_Z_ZZZ__ (sz, Zm, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_ADCLB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_ADCLB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_ADCLB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_ADCLB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_ADCLB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1779) = {
    SEE = 1779;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_ADCLB_Z_ZZZ__(sz, Zm, T, Zn, Zda)
}

val execute_ADCLT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_ADCLT_Z_ZZZ__ (VL, da, esize, m, n) = {
    carry_out : bits(1) = undefined;
    nzcv : bits(4) = undefined;
    res : bits('esize) = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'pairs = DIV(VL, esize * 2);
    let operand : bits('VL) = Z_read(n, VL);
    let carries : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(result, 2 * p + 0, esize);
        let element2 : bits('esize) = Elem_read(operand, 2 * p + 1, esize);
        let carry_in : bits(1) = [Elem_read(carries, 2 * p + 1, esize)[0]];
        (res, nzcv) = AddWithCarry(element1, element2, carry_in);
        carry_out = [nzcv[1]];
        result = Elem_set(result, 2 * p + 0, esize, res);
        result = Elem_set(result, 2 * p + 1, esize, ZeroExtend(carry_out, esize))
    };
    Z_set(da, VL) = result
}

val decode_ADCLT_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ADCLT_Z_ZZZ__ (sz, Zm, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_ADCLT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_ADCLT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_ADCLT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_ADCLT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_ADCLT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1780) = {
    SEE = 1780;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_ADCLT_Z_ZZZ__(sz, Zm, T, Zn, Zda)
}

val execute_SBCLB_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SBCLB_Z_ZZZ__ (VL, da, esize, m, n) = {
    carry_out : bits(1) = undefined;
    nzcv : bits(4) = undefined;
    res : bits('esize) = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'pairs = DIV(VL, esize * 2);
    let operand : bits('VL) = Z_read(n, VL);
    let carries : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(result, 2 * p + 0, esize);
        let element2 : bits('esize) = Elem_read(operand, 2 * p + 0, esize);
        let carry_in : bits(1) = [Elem_read(carries, 2 * p + 1, esize)[0]];
        (res, nzcv) = AddWithCarry(element1, not_vec(element2), carry_in);
        carry_out = [nzcv[1]];
        result = Elem_set(result, 2 * p + 0, esize, res);
        result = Elem_set(result, 2 * p + 1, esize, ZeroExtend(carry_out, esize))
    };
    Z_set(da, VL) = result
}

val decode_SBCLB_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SBCLB_Z_ZZZ__ (sz, Zm, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SBCLB_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SBCLB_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SBCLB_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SBCLB_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SBCLB_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1781) = {
    SEE = 1781;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SBCLB_Z_ZZZ__(sz, Zm, T, Zn, Zda)
}

val execute_SBCLT_Z_ZZZ__ : forall 'VL 'da 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {32, 64} & 0 <= 'da & 'da <= 31 & is_VL('VL)).
  (int('VL), int('da), int('esize), int('m), int('n)) -> unit

function execute_SBCLT_Z_ZZZ__ (VL, da, esize, m, n) = {
    carry_out : bits(1) = undefined;
    nzcv : bits(4) = undefined;
    res : bits('esize) = undefined;
    CheckSVEEnabled();
    let 'VL = VL;
    let 'pairs = DIV(VL, esize * 2);
    let operand : bits('VL) = Z_read(n, VL);
    let carries : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(da, VL);
    foreach (p from 0 to (pairs - 1) by 1 in inc) {
        let element1 : bits('esize) = Elem_read(result, 2 * p + 0, esize);
        let element2 : bits('esize) = Elem_read(operand, 2 * p + 1, esize);
        let carry_in : bits(1) = [Elem_read(carries, 2 * p + 1, esize)[0]];
        (res, nzcv) = AddWithCarry(element1, not_vec(element2), carry_in);
        carry_out = [nzcv[1]];
        result = Elem_set(result, 2 * p + 0, esize, res);
        result = Elem_set(result, 2 * p + 1, esize, ZeroExtend(carry_out, esize))
    };
    Z_set(da, VL) = result
}

val decode_SBCLT_Z_ZZZ__ : (bits(1), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SBCLT_Z_ZZZ__ (sz, Zm, T, Zn, Zda) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (32 << UInt(sz));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'da = UInt(Zda);
    match VL {
      128 => {
          execute_SBCLT_Z_ZZZ__(128, da, esize, m, n)
      },
      256 => {
          execute_SBCLT_Z_ZZZ__(256, da, esize, m, n)
      },
      512 => {
          execute_SBCLT_Z_ZZZ__(512, da, esize, m, n)
      },
      1024 => {
          execute_SBCLT_Z_ZZZ__(1024, da, esize, m, n)
      },
      2048 => {
          execute_SBCLT_Z_ZZZ__(2048, da, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1782) = {
    SEE = 1782;
    let sz = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let T = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zda = Slice(__opcode, 0, 5);
    decode_SBCLT_Z_ZZZ__(sz, Zm, T, Zn, Zda)
}

val execute_SMULH_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_SMULH_Z_ZZ__ (VL, d, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let 'product = ((element1 * element2) >> esize);
        result = Elem_set(result, e, esize, product[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SMULH_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SMULH_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMULH_Z_ZZ__(128, d, esize, m, n, is_unsigned)
      },
      256 => {
          execute_SMULH_Z_ZZ__(256, d, esize, m, n, is_unsigned)
      },
      512 => {
          execute_SMULH_Z_ZZ__(512, d, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_SMULH_Z_ZZ__(1024, d, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_SMULH_Z_ZZ__(2048, d, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1783) = {
    SEE = 1783;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SMULH_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_UMULH_Z_ZZ__ : forall 'VL 'd 'esize ('is_unsigned : Bool) 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), bool('is_unsigned)) -> unit

function execute_UMULH_Z_ZZ__ (VL, d, esize, m, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = asl_Int(Elem_read(operand1, e, esize), is_unsigned);
        let 'element2 = asl_Int(Elem_read(operand2, e, esize), is_unsigned);
        let 'product = ((element1 * element2) >> esize);
        result = Elem_set(result, e, esize, product[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UMULH_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UMULH_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMULH_Z_ZZ__(128, d, esize, m, n, is_unsigned)
      },
      256 => {
          execute_UMULH_Z_ZZ__(256, d, esize, m, n, is_unsigned)
      },
      512 => {
          execute_UMULH_Z_ZZ__(512, d, esize, m, n, is_unsigned)
      },
      1024 => {
          execute_UMULH_Z_ZZ__(1024, d, esize, m, n, is_unsigned)
      },
      2048 => {
          execute_UMULH_Z_ZZ__(2048, d, esize, m, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1784) = {
    SEE = 1784;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UMULH_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_SCLAMP_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_SCLAMP_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(d, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = SInt(Elem_read(operand1, e, esize));
        let 'element2 = SInt(Elem_read(operand2, e, esize));
        let 'element3 = SInt(Elem_read(operand3, e, esize));
        let 'res = Min(Max(element1, element3), element2);
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_SCLAMP_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_SCLAMP_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SCLAMP_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_SCLAMP_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_SCLAMP_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_SCLAMP_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_SCLAMP_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1785) = {
    SEE = 1785;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_SCLAMP_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_UCLAMP_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_UCLAMP_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    let operand3 : bits('VL) = Z_read(d, VL);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'element1 = UInt(Elem_read(operand1, e, esize));
        let 'element2 = UInt(Elem_read(operand2, e, esize));
        let 'element3 = UInt(Elem_read(operand3, e, esize));
        let 'res = Min(Max(element1, element3), element2);
        result = Elem_set(result, e, esize, res[esize - 1 .. 0])
    };
    Z_set(d, VL) = result
}

val decode_UCLAMP_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UCLAMP_Z_ZZ__ (size, Zm, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UCLAMP_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_UCLAMP_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_UCLAMP_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_UCLAMP_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_UCLAMP_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1786) = {
    SEE = 1786;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UCLAMP_Z_ZZ__(size, Zm, U, Zn, Zd)
}

val execute_REVD_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n 'swsize,
  ('swsize == 64 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), int('swsize)) -> unit

function execute_REVD_Z_P_Z__ (VL, d, esize, g, n, swsize) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let element : bits('esize) = Elem_read(operand, e, esize);
            result = Elem_set(result, e, esize, Reverse(element, swsize))
        };
        ()
    };
    Z_set(d, VL) = result
}

val decode_REVD_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_REVD_Z_P_Z__ (size, Pg, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 128;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    let 'swsize = 64;
    match VL {
      128 => {
          execute_REVD_Z_P_Z__(128, d, esize, g, n, swsize)
      },
      256 => {
          execute_REVD_Z_P_Z__(256, d, esize, g, n, swsize)
      },
      512 => {
          execute_REVD_Z_P_Z__(512, d, esize, g, n, swsize)
      },
      1024 => {
          execute_REVD_Z_P_Z__(1024, d, esize, g, n, swsize)
      },
      2048 => {
          execute_REVD_Z_P_Z__(2048, d, esize, g, n, swsize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1787) = {
    SEE = 1787;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_REVD_Z_P_Z__(size, Pg, Zn, Zd)
}

val execute_PSEL_P_PPi__ : forall 'VL 'd 'esize 'imm 'm 'n 'v,
  (0 <= 'v & 'v <= 31 & 0 <= 'n & 'n <= 15 & 0 <= 'm & 'm <= 15 & 0 <= 'imm & 'imm <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('m), int('n), int('v)) -> unit

function execute_PSEL_P_PPi__ (VL, d, esize, imm, m, n, v) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand1 : bits('PL) = P_read(n, PL);
    let operand2 : bits('PL) = P_read(m, PL);
    let idx : bits(32) = X_read(v, 32);
    let 'element = MOD(UInt(idx) + imm, elements);
    result : bits('PL) = undefined;
    if ActivePredicateElement(operand2, element, esize) then {
        result = operand1
    } else {
        result = Zeros(PL)
    };
    P_set(d, PL) = result
}

val decode_PSEL_P_PPi__ : (bits(1), bits(1), bits(3), bits(2), bits(4), bits(1), bits(4), bits(4)) -> unit

function decode_PSEL_P_PPi__ (i1, tszh, tszl, Rv, Pn, S, Pm, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let imm5 : bits(5) = (i1 @ tszh) @ tszl;
    esize : {8, 16, 32, 64} = 8;
    imm : range(0, 15) = undefined;
    match tszh @ tszl {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b1000 => {
          esize = 64;
          imm = UInt([imm5[4]])
      },
      [_, bitone, bitzero, bitzero] => {
          esize = 32;
          imm = UInt(imm5[4 .. 3])
      },
      [_, _, bitone, bitzero] => {
          esize = 16;
          imm = UInt(imm5[4 .. 2])
      },
      [_, _, _, bitone] => {
          esize = 8;
          imm = UInt(imm5[4 .. 1])
      }
    };
    let 'imm = imm;
    let 'esize = esize;
    let 'n = UInt(Pn);
    let 'm = UInt(Pm);
    let 'd = UInt(Pd);
    let 'v = UInt(0b011 @ Rv);
    match VL {
      128 => {
          execute_PSEL_P_PPi__(128, d, esize, imm, m, n, v)
      },
      256 => {
          execute_PSEL_P_PPi__(256, d, esize, imm, m, n, v)
      },
      512 => {
          execute_PSEL_P_PPi__(512, d, esize, imm, m, n, v)
      },
      1024 => {
          execute_PSEL_P_PPi__(1024, d, esize, imm, m, n, v)
      },
      2048 => {
          execute_PSEL_P_PPi__(2048, d, esize, imm, m, n, v)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, _, _, _, bitzero, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1788) = {
    SEE = 1788;
    let i1 = Slice(__opcode, 23, 1);
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 18, 3);
    let Rv = Slice(__opcode, 16, 2);
    let Pn = Slice(__opcode, 10, 4);
    let S = Slice(__opcode, 9, 1);
    let Pm = Slice(__opcode, 5, 4);
    let Pd = Slice(__opcode, 0, 4);
    decode_PSEL_P_PPi__(i1, tszh, tszl, Rv, Pn, S, Pm, Pd)
}

val execute_WHILELO_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELO_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements * 2 - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELO_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILELO_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILELO_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_LT;
    match VL {
      128 => {
          execute_WHILELO_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELO_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELO_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELO_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELO_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, _, _, _, bitzero] as __opcode)) if SEE < 1789) = {
    SEE = 1789;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILELO_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_WHILELS_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELS_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements * 2 - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELS_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILELS_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILELS_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_LE;
    match VL {
      128 => {
          execute_WHILELS_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELS_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELS_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELS_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELS_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, _, _, _, bitone] as __opcode)) if SEE < 1790) = {
    SEE = 1790;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILELS_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_WHILELT_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELT_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements * 2 - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELT_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILELT_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILELT_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_LT;
    match VL {
      128 => {
          execute_WHILELT_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELT_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELT_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELT_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELT_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, _, _, _, bitzero] as __opcode)) if SEE < 1791) = {
    SEE = 1791;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILELT_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_WHILELE_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILELE_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements * 2 - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELE_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 + 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILELE_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILELE_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_LE;
    match VL {
      128 => {
          execute_WHILELE_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILELE_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILELE_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILELE_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILELE_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, _, _, _, bitone] as __opcode)) if SEE < 1792) = {
    SEE = 1792;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILELE_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_WHILEHI_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEHI_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements * 2 - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEHI_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILEHI_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILEHI_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_GT;
    match VL {
      128 => {
          execute_WHILEHI_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEHI_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEHI_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEHI_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEHI_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, _, _, _, bitone] as __opcode)) if SEE < 1793) = {
    SEE = 1793;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILEHI_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_WHILEHS_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEHS_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements * 2 - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEHS_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILEHS_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILEHS_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = true;
    let op : SVECmp = Cmp_GE;
    match VL {
      128 => {
          execute_WHILEHS_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEHS_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEHS_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEHS_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEHS_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, _, _, _, bitzero] as __opcode)) if SEE < 1794) = {
    SEE = 1794;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILEHS_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_WHILEGT_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEGT_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements * 2 - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEGT_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILEGT_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILEGT_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_GT;
    match VL {
      128 => {
          execute_WHILEGT_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEGT_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEGT_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEGT_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEGT_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, _, _, _, bitone] as __opcode)) if SEE < 1795) = {
    SEE = 1795;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILEGT_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_WHILEGE_PP_RR__ : forall 'VL 'd0 'd1 'esize ('is_unsigned : Bool) 'm 'n 'rsize,
  ('rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd1 & 'd1 <= 15 & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned)) -> unit

function execute_WHILEGE_PP_RR__ (VL, d0, d1, esize, m, n, op, rsize, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL * 2) = Ones(PL * 2);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    result : bits('PL * 2) = undefined;
    last : bool = true;
    let 'psize = DIV(esize, 8);
    foreach (e from (elements * 2 - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEGE_PP_RR__")
        };
        last = last & cond;
        let pbit : bits(1) = if last then 0b1 else 0b0;
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize));
        operand1 = operand1 - 1
    };
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredTest(mask, result, esize);
    P_set(d0, PL) = result[PL - 1 .. 0];
    P_set(d1, PL) = result[PL * 2 - 1 .. PL]
}

val decode_WHILEGE_PP_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(5), bits(3), bits(1)) -> unit

function decode_WHILEGE_PP_RR__ (size, Rm, U, lt, Rn, Pd, eq) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd0 = UInt(Pd @ 0b0);
    let 'd1 = UInt(Pd @ 0b1);
    let is_unsigned : bool = false;
    let op : SVECmp = Cmp_GE;
    match VL {
      128 => {
          execute_WHILEGE_PP_RR__(128, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      256 => {
          execute_WHILEGE_PP_RR__(256, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      512 => {
          execute_WHILEGE_PP_RR__(512, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      1024 => {
          execute_WHILEGE_PP_RR__(1024, d0, d1, esize, m, n, op, rsize, is_unsigned)
      },
      2048 => {
          execute_WHILEGE_PP_RR__(2048, d0, d1, esize, m, n, op, rsize, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, _, _, _, bitzero] as __opcode)) if SEE < 1796) = {
    SEE = 1796;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 1, 3);
    let eq = Slice(__opcode, 0, 1);
    decode_WHILEGE_PP_RR__(size, Rm, U, lt, Rn, Pd, eq)
}

val execute_SQRSHRN_Z_MZ2__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRN_Z_MZ2__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 1 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, 2 * e + i, esize, SignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRN_Z_MZ2__ : (bits(1), bits(1), bits(4), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQRSHRN_Z_MZ2__ (tszh, tszl, imm4, U, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    let 'shift = esize - UInt(imm4);
    match VL {
      128 => {
          execute_SQRSHRN_Z_MZ2__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRN_Z_MZ2__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRN_Z_MZ2__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRN_Z_MZ2__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRN_Z_MZ2__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1797) = {
    SEE = 1797;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRN_Z_MZ2__(tszh, tszl, imm4, U, R, Zn, Zd)
}

val execute_SQRSHRUN_Z_MZ2__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_SQRSHRUN_Z_MZ2__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 1 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
            let 'res = ((SInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, 2 * e + i, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQRSHRUN_Z_MZ2__ : (bits(1), bits(1), bits(4), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_SQRSHRUN_Z_MZ2__ (tszh, tszl, imm4, U, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    let 'shift = esize - UInt(imm4);
    match VL {
      128 => {
          execute_SQRSHRUN_Z_MZ2__(128, d, esize, n, shift)
      },
      256 => {
          execute_SQRSHRUN_Z_MZ2__(256, d, esize, n, shift)
      },
      512 => {
          execute_SQRSHRUN_Z_MZ2__(512, d, esize, n, shift)
      },
      1024 => {
          execute_SQRSHRUN_Z_MZ2__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_SQRSHRUN_Z_MZ2__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1798) = {
    SEE = 1798;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQRSHRUN_Z_MZ2__(tszh, tszl, imm4, U, R, Zn, Zd)
}

val execute_UQRSHRN_Z_MZ2__ : forall 'VL 'd 'esize 'n 'shift,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('shift)) -> unit

function execute_UQRSHRN_Z_MZ2__ (VL, d, esize, n, shift) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 1 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let element : bits(2 * 'esize) = Elem_read(operand, e, 2 * esize);
            let 'res = ((UInt(element) + (1 << (shift - 1))) >> shift);
            result = Elem_set(result, 2 * e + i, esize, UnsignedSat(res, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQRSHRN_Z_MZ2__ : (bits(1), bits(1), bits(4), bits(1), bits(1), bits(4), bits(5)) -> unit

function decode_UQRSHRN_Z_MZ2__ (tszh, tszl, imm4, U, R, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    let 'shift = esize - UInt(imm4);
    match VL {
      128 => {
          execute_UQRSHRN_Z_MZ2__(128, d, esize, n, shift)
      },
      256 => {
          execute_UQRSHRN_Z_MZ2__(256, d, esize, n, shift)
      },
      512 => {
          execute_UQRSHRN_Z_MZ2__(512, d, esize, n, shift)
      },
      1024 => {
          execute_UQRSHRN_Z_MZ2__(1024, d, esize, n, shift)
      },
      2048 => {
          execute_UQRSHRN_Z_MZ2__(2048, d, esize, n, shift)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1799) = {
    SEE = 1799;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 20, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let U = Slice(__opcode, 12, 1);
    let R = Slice(__opcode, 11, 1);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQRSHRN_Z_MZ2__(tszh, tszl, imm4, U, R, Zn, Zd)
}

val execute_SQCVTN_Z_MZ2__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVTN_Z_MZ2__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 1 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let 'element = SInt(Elem_read(operand, e, 2 * esize));
            result = Elem_set(result, 2 * e + i, esize, SignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVTN_Z_MZ2__ : (bits(1), bits(2), bits(1), bits(4), bits(5)) -> unit

function decode_SQCVTN_Z_MZ2__ (tszh, tszl, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQCVTN_Z_MZ2__(128, d, esize, n)
      },
      256 => {
          execute_SQCVTN_Z_MZ2__(256, d, esize, n)
      },
      512 => {
          execute_SQCVTN_Z_MZ2__(512, d, esize, n)
      },
      1024 => {
          execute_SQCVTN_Z_MZ2__(1024, d, esize, n)
      },
      2048 => {
          execute_SQCVTN_Z_MZ2__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1800) = {
    SEE = 1800;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let U = Slice(__opcode, 11, 1);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVTN_Z_MZ2__(tszh, tszl, U, Zn, Zd)
}

val execute_SQCVTUN_Z_MZ2__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_SQCVTUN_Z_MZ2__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 1 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let 'element = SInt(Elem_read(operand, e, 2 * esize));
            result = Elem_set(result, 2 * e + i, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_SQCVTUN_Z_MZ2__ : (bits(1), bits(2), bits(4), bits(5)) -> unit

function decode_SQCVTUN_Z_MZ2__ (tszh, tszl, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_SQCVTUN_Z_MZ2__(128, d, esize, n)
      },
      256 => {
          execute_SQCVTUN_Z_MZ2__(256, d, esize, n)
      },
      512 => {
          execute_SQCVTUN_Z_MZ2__(512, d, esize, n)
      },
      1024 => {
          execute_SQCVTUN_Z_MZ2__(1024, d, esize, n)
      },
      2048 => {
          execute_SQCVTUN_Z_MZ2__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1801) = {
    SEE = 1801;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_SQCVTUN_Z_MZ2__(tszh, tszl, Zn, Zd)
}

val execute_UQCVTN_Z_MZ2__ : forall 'VL 'd 'esize 'n,
  (0 <= 'n & 'n <= 31 & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n)) -> unit

function execute_UQCVTN_Z_MZ2__ (VL, d, esize, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 2 * esize);
    result : bits('VL) = undefined;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (i from 0 to 1 by 1 in inc) {
            let operand : bits('VL) = Z_read(n + i, VL);
            let 'element = UInt(Elem_read(operand, e, 2 * esize));
            result = Elem_set(result, 2 * e + i, esize, UnsignedSat(element, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UQCVTN_Z_MZ2__ : (bits(1), bits(2), bits(1), bits(4), bits(5)) -> unit

function decode_UQCVTN_Z_MZ2__ (tszh, tszl, U, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'n = UInt(Zn @ 0b0);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_UQCVTN_Z_MZ2__(128, d, esize, n)
      },
      256 => {
          execute_UQCVTN_Z_MZ2__(256, d, esize, n)
      },
      512 => {
          execute_UQCVTN_Z_MZ2__(512, d, esize, n)
      },
      1024 => {
          execute_UQCVTN_Z_MZ2__(1024, d, esize, n)
      },
      2048 => {
          execute_UQCVTN_Z_MZ2__(2048, d, esize, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, _, _, _, _, _] as __opcode)) if SEE < 1802) = {
    SEE = 1802;
    let tszh = Slice(__opcode, 22, 1);
    let tszl = Slice(__opcode, 19, 2);
    let U = Slice(__opcode, 11, 1);
    let Zn = Slice(__opcode, 6, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_UQCVTN_Z_MZ2__(tszh, tszl, U, Zn, Zd)
}

val execute_DUPQ_Z_Zi__ : forall 'VL 'd 'esize 'index 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'index & 'index <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('index), int('n)) -> unit

function execute_DUPQ_Z_Zi__ (VL, d, esize, index, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elements = DIV(128, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('VL) = undefined;
    element : bits('esize) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        element = Elem_read(operand, s * elements + index, esize);
        result = Elem_set(result, s, 128, Replicate(element, DIV(128, esize)))
    };
    Z_set(d, VL) = result
}

val decode_DUPQ_Z_Zi__ : (bits(1), bits(4), bits(5), bits(5)) -> unit

function decode_DUPQ_Z_Zi__ (i1, tsz, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let imm : bits(5) = i1 @ tsz;
    esize : {8, 16, 32, 64} = 8;
    index : range(0, 15) = undefined;
    match tsz {
      0b0000 => {
          throw(Error_Undefined())
      },
      0b1000 => {
          esize = 64;
          index = UInt(imm[4 .. 4])
      },
      [_, bitone, bitzero, bitzero] => {
          esize = 32;
          index = UInt(imm[4 .. 3])
      },
      [_, _, bitone, bitzero] => {
          esize = 16;
          index = UInt(imm[4 .. 2])
      },
      [_, _, _, bitone] => {
          esize = 8;
          index = UInt(imm[4 .. 1])
      }
    };
    let 'index = index;
    let 'esize = esize;
    let 'n = UInt(Zn);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_DUPQ_Z_Zi__(128, d, esize, index, n)
      },
      256 => {
          execute_DUPQ_Z_Zi__(256, d, esize, index, n)
      },
      512 => {
          execute_DUPQ_Z_Zi__(512, d, esize, index, n)
      },
      1024 => {
          execute_DUPQ_Z_Zi__(1024, d, esize, index, n)
      },
      2048 => {
          execute_DUPQ_Z_Zi__(2048, d, esize, index, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1803) = {
    SEE = 1803;
    let i1 = Slice(__opcode, 20, 1);
    let tsz = Slice(__opcode, 16, 4);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_DUPQ_Z_Zi__(i1, tsz, Zn, Zd)
}

val execute_EXTQ_Z_ZI_Des : forall 'VL 'dn 'm 'position,
  (0 <= 'm & 'm <= 31 & 0 <= 'dn & 'dn <= 31 & is_VL('VL)).
  (int('VL), int('dn), int('m), int('position)) -> unit

function execute_EXTQ_Z_ZI_Des (VL, dn, m, position) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let operand1 : bits('VL) = Z_read(dn, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        let concat : bits(256) = Elem_read(operand2, s, 128) @ Elem_read(operand1, s, 128);
        assert(constraint((0 <= 'position & 'position + 127 < 256)));
        result = Elem_set(result, s, 128, concat[position + 127 .. position])
    };
    Z_set(dn, VL) = result
}

val decode_EXTQ_Z_ZI_Des : (bits(4), bits(5), bits(5)) -> unit

function decode_EXTQ_Z_ZI_Des (imm4, Zm, Zdn) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'dn = UInt(Zdn);
    let 'm = UInt(Zm);
    let 'position = (UInt(imm4) << 3);
    match VL {
      128 => {
          execute_EXTQ_Z_ZI_Des(128, dn, m, position)
      },
      256 => {
          execute_EXTQ_Z_ZI_Des(256, dn, m, position)
      },
      512 => {
          execute_EXTQ_Z_ZI_Des(512, dn, m, position)
      },
      1024 => {
          execute_EXTQ_Z_ZI_Des(1024, dn, m, position)
      },
      2048 => {
          execute_EXTQ_Z_ZI_Des(2048, dn, m, position)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1804) = {
    SEE = 1804;
    let imm4 = Slice(__opcode, 16, 4);
    let Zm = Slice(__opcode, 5, 5);
    let Zdn = Slice(__opcode, 0, 5);
    decode_EXTQ_Z_ZI_Des(imm4, Zm, Zdn)
}

val execute_TBLQ_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_TBLQ_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elements = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'idx = UInt(Elem_read(operand2, s * elements + e, esize));
            if idx < elements then {
                result = Elem_set(result, s * elements + e, esize, Elem_read(operand1, s * elements + idx, esize))
            } else {
                result = Elem_set(result, s * elements + e, esize, Zeros(esize))
            }
        }
    };
    Z_set(d, VL) = result
}

val decode_TBLQ_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_TBLQ_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_TBLQ_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_TBLQ_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_TBLQ_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_TBLQ_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_TBLQ_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1805) = {
    SEE = 1805;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TBLQ_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_TBXQ_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n,
  (0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n)) -> unit

function execute_TBXQ_Z_ZZ__ (VL, d, esize, m, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elements = DIV(128, esize);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = Z_read(d, VL);
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            let 'idx = UInt(Elem_read(operand2, s * elements + e, esize));
            if idx < elements then {
                result = Elem_set(result, s * elements + e, esize, Elem_read(operand1, s * elements + idx, esize))
            };
            ()
        }
    };
    Z_set(d, VL) = result
}

val decode_TBXQ_Z_ZZ__ : (bits(2), bits(5), bits(5), bits(5)) -> unit

function decode_TBXQ_Z_ZZ__ (size, Zm, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    match VL {
      128 => {
          execute_TBXQ_Z_ZZ__(128, d, esize, m, n)
      },
      256 => {
          execute_TBXQ_Z_ZZ__(256, d, esize, m, n)
      },
      512 => {
          execute_TBXQ_Z_ZZ__(512, d, esize, m, n)
      },
      1024 => {
          execute_TBXQ_Z_ZZ__(1024, d, esize, m, n)
      },
      2048 => {
          execute_TBXQ_Z_ZZ__(2048, d, esize, m, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1806) = {
    SEE = 1806;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_TBXQ_Z_ZZ__(size, Zm, Zn, Zd)
}

val execute_UZPQ1_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZPQ1_Z_ZZ__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elements = DIV(128, esize);
    let 'pairs = DIV(elements, 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, s * elements + p, esize, Elem_read(operand1, s * elements + 2 * p + part, esize))
        };
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, s * elements + pairs + p, esize, Elem_read(operand2, s * elements + 2 * p + part, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UZPQ1_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UZPQ1_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_UZPQ1_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZPQ1_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZPQ1_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZPQ1_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZPQ1_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1807) = {
    SEE = 1807;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UZPQ1_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_UZPQ2_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_UZPQ2_Z_ZZ__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elements = DIV(128, esize);
    let 'pairs = DIV(elements, 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, s * elements + p, esize, Elem_read(operand1, s * elements + 2 * p + part, esize))
        };
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, s * elements + pairs + p, esize, Elem_read(operand2, s * elements + 2 * p + part, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_UZPQ2_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_UZPQ2_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_UZPQ2_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_UZPQ2_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_UZPQ2_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_UZPQ2_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_UZPQ2_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1808) = {
    SEE = 1808;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_UZPQ2_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_ZIPQ1_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIPQ1_Z_ZZ__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elements = DIV(128, esize);
    let 'pairs = DIV(elements, 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        let 'base = s * elements + part * pairs;
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, s * elements + 2 * p + 0, esize, Elem_read(operand1, base + p, esize));
            result = Elem_set(result, s * elements + 2 * p + 1, esize, Elem_read(operand2, base + p, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_ZIPQ1_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ZIPQ1_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 0;
    match VL {
      128 => {
          execute_ZIPQ1_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIPQ1_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIPQ1_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIPQ1_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIPQ1_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1809) = {
    SEE = 1809;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ZIPQ1_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_ZIPQ2_Z_ZZ__ : forall 'VL 'd 'esize 'm 'n 'part,
  ('part == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('m), int('n), int('part)) -> unit

function execute_ZIPQ2_Z_ZZ__ (VL, d, esize, m, n, part) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elements = DIV(128, esize);
    let 'pairs = DIV(elements, 2);
    let operand1 : bits('VL) = Z_read(n, VL);
    let operand2 : bits('VL) = Z_read(m, VL);
    result : bits('VL) = undefined;
    foreach (s from 0 to (segments - 1) by 1 in inc) {
        let 'base = s * elements + part * pairs;
        foreach (p from 0 to (pairs - 1) by 1 in inc) {
            result = Elem_set(result, s * elements + 2 * p + 0, esize, Elem_read(operand1, base + p, esize));
            result = Elem_set(result, s * elements + 2 * p + 1, esize, Elem_read(operand2, base + p, esize))
        }
    };
    Z_set(d, VL) = result
}

val decode_ZIPQ2_Z_ZZ__ : (bits(2), bits(5), bits(1), bits(5), bits(5)) -> unit

function decode_ZIPQ2_Z_ZZ__ (size, Zm, H, Zn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(Zn);
    let 'm = UInt(Zm);
    let 'd = UInt(Zd);
    let 'part = 1;
    match VL {
      128 => {
          execute_ZIPQ2_Z_ZZ__(128, d, esize, m, n, part)
      },
      256 => {
          execute_ZIPQ2_Z_ZZ__(256, d, esize, m, n, part)
      },
      512 => {
          execute_ZIPQ2_Z_ZZ__(512, d, esize, m, n, part)
      },
      1024 => {
          execute_ZIPQ2_Z_ZZ__(1024, d, esize, m, n, part)
      },
      2048 => {
          execute_ZIPQ2_Z_ZZ__(2048, d, esize, m, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, _, _, _, _, _, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1810) = {
    SEE = 1810;
    let size = Slice(__opcode, 22, 2);
    let Zm = Slice(__opcode, 16, 5);
    let H = Slice(__opcode, 10, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Zd = Slice(__opcode, 0, 5);
    decode_ZIPQ2_Z_ZZ__(size, Zm, H, Zn, Zd)
}

val execute_ANDQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_ANDQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : bits('esize) = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = Ones(esize);
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = dtmp & Elem_read(stmp, e, esize)
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_ANDQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_ANDQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_ANDQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_ANDQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_ANDQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_ANDQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_ANDQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1811) = {
    SEE = 1811;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_ANDQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_EORQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_EORQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : bits('esize) = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = Zeros(esize);
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = EOR(dtmp, Elem_read(stmp, e, esize))
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_EORQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_EORQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_EORQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_EORQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_EORQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_EORQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_EORQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1812) = {
    SEE = 1812;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_EORQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_ORQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_ORQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : bits('esize) = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = Zeros(esize);
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = dtmp | Elem_read(stmp, e, esize)
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_ORQV_Z_P_Z__ : (bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_ORQV_Z_P_Z__ (size, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    match VL {
      128 => {
          execute_ORQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_ORQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_ORQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_ORQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_ORQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1813) = {
    SEE = 1813;
    let size = Slice(__opcode, 22, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_ORQV_Z_P_Z__(size, Pg, Zn, Vd)
}

val execute_ADDQV_Z_P_Z__ : forall 'VL 'd 'esize 'g 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n)) -> unit

function execute_ADDQV_Z_P_Z__ (VL, d, esize, g, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : int = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = 0;
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = dtmp + UInt(Elem_read(stmp, e, esize))
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_ADDQV_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ADDQV_Z_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_ADDQV_Z_P_Z__(128, d, esize, g, n)
      },
      256 => {
          execute_ADDQV_Z_P_Z__(256, d, esize, g, n)
      },
      512 => {
          execute_ADDQV_Z_P_Z__(512, d, esize, g, n)
      },
      1024 => {
          execute_ADDQV_Z_P_Z__(1024, d, esize, g, n)
      },
      2048 => {
          execute_ADDQV_Z_P_Z__(2048, d, esize, g, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1814) = {
    SEE = 1814;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_ADDQV_Z_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_SMAXQV_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_SMAXQV_Z_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : int = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = if is_unsigned then 0 else negate(2 ^ (esize - 1));
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = Max(dtmp, SInt(Elem_read(stmp, e, esize)))
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_SMAXQV_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMAXQV_Z_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMAXQV_Z_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_SMAXQV_Z_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_SMAXQV_Z_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_SMAXQV_Z_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_SMAXQV_Z_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1815) = {
    SEE = 1815;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_SMAXQV_Z_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_UMAXQV_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_UMAXQV_Z_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : int = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = if is_unsigned then 0 else negate(2 ^ (esize - 1));
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = Max(dtmp, UInt(Elem_read(stmp, e, esize)))
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_UMAXQV_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMAXQV_Z_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMAXQV_Z_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_UMAXQV_Z_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_UMAXQV_Z_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_UMAXQV_Z_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_UMAXQV_Z_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1816) = {
    SEE = 1816;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_UMAXQV_Z_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_SMINQV_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_SMINQV_Z_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : int = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = if is_unsigned then pow2(esize) - 1 else pow2(esize - 1) - 1;
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = Min(dtmp, SInt(Elem_read(stmp, e, esize)))
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_SMINQV_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_SMINQV_Z_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_SMINQV_Z_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_SMINQV_Z_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_SMINQV_Z_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_SMINQV_Z_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_SMINQV_Z_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1817) = {
    SEE = 1817;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_SMINQV_Z_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_UMINQV_Z_P_Z__ : forall 'VL 'd 'esize 'g ('is_unsigned : Bool) 'n,
  (0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('g), int('n), bool('is_unsigned)) -> unit

function execute_UMINQV_Z_P_Z__ (VL, d, esize, g, n, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'segments = DIV(VL, 128);
    let 'elempersegment = DIV(128, esize);
    let mask : bits('PL) = P_read(g, PL);
    let operand : bits('VL) = if AnyActiveElement(mask, esize) then
      Z_read(n, VL)
    else
      Zeros(VL);
    result : bits(128) = Zeros(128);
    stmp : bits(128) = Zeros(128);
    dtmp : int = undefined;
    foreach (e from 0 to (elempersegment - 1) by 1 in inc) {
        dtmp = if is_unsigned then pow2(esize) - 1 else pow2(esize - 1) - 1;
        foreach (s from 0 to (segments - 1) by 1 in inc) {
            if ActivePredicateElement(mask, s * elempersegment + e, esize) then {
                stmp = Elem_read(operand, s, 128);
                dtmp = Min(dtmp, UInt(Elem_read(stmp, e, esize)))
            };
            ()
        };
        result = Elem_set(result, e, esize, dtmp[esize - 1 .. 0])
    };
    V_set(d, 128) = result
}

val decode_UMINQV_Z_P_Z__ : (bits(2), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_UMINQV_Z_P_Z__ (size, U, Pg, Zn, Vd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'd = UInt(Vd);
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_UMINQV_Z_P_Z__(128, d, esize, g, n, is_unsigned)
      },
      256 => {
          execute_UMINQV_Z_P_Z__(256, d, esize, g, n, is_unsigned)
      },
      512 => {
          execute_UMINQV_Z_P_Z__(512, d, esize, g, n, is_unsigned)
      },
      1024 => {
          execute_UMINQV_Z_P_Z__(1024, d, esize, g, n, is_unsigned)
      },
      2048 => {
          execute_UMINQV_Z_P_Z__(2048, d, esize, g, n, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1818) = {
    SEE = 1818;
    let size = Slice(__opcode, 22, 2);
    let U = Slice(__opcode, 16, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Vd = Slice(__opcode, 0, 5);
    decode_UMINQV_Z_P_Z__(size, U, Pg, Zn, Vd)
}

val execute_PMOV_Z_PI_B : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 15 & 'imm == 0 & 'esize == 8 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_Z_PI_B (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('PL) = P_read(n, PL);
    result : bits('VL) = undefined;
    if imm == 0 then {
        result = Zeros(VL)
    } else {
        result = Z_read(d, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result[elements * imm + e] = Bit(PredicateElement(operand, e, esize))
    };
    Z_set(d, VL) = result
}

val decode_PMOV_Z_PI_B : (bits(4), bits(5)) -> unit

function decode_PMOV_Z_PI_B (Pn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Pn);
    let 'd = UInt(Zd);
    let 'esize = 8;
    let 'imm = 0;
    match VL {
      128 => {
          execute_PMOV_Z_PI_B(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_Z_PI_B(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_Z_PI_B(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_Z_PI_B(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_Z_PI_B(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1819) = {
    SEE = 1819;
    let Pn = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMOV_Z_PI_B(Pn, Zd)
}

val execute_PMOV_Z_PI_H : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 15 & 'imm in {0, 1} & 'esize == 16 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_Z_PI_H (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('PL) = P_read(n, PL);
    result : bits('VL) = undefined;
    if imm == 0 then {
        result = Zeros(VL)
    } else {
        result = Z_read(d, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result[elements * imm + e] = Bit(PredicateElement(operand, e, esize))
    };
    Z_set(d, VL) = result
}

val decode_PMOV_Z_PI_H : (bits(1), bits(4), bits(5)) -> unit

function decode_PMOV_Z_PI_H (i1, Pn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Pn);
    let 'd = UInt(Zd);
    let 'esize = 16;
    let 'imm = UInt(i1);
    match VL {
      128 => {
          execute_PMOV_Z_PI_H(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_Z_PI_H(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_Z_PI_H(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_Z_PI_H(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_Z_PI_H(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1820) = {
    SEE = 1820;
    let i1 = Slice(__opcode, 17, 1);
    let Pn = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMOV_Z_PI_H(i1, Pn, Zd)
}

val execute_PMOV_Z_PI_S : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 15 & 'imm in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_Z_PI_S (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('PL) = P_read(n, PL);
    result : bits('VL) = undefined;
    if imm == 0 then {
        result = Zeros(VL)
    } else {
        result = Z_read(d, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result[elements * imm + e] = Bit(PredicateElement(operand, e, esize))
    };
    Z_set(d, VL) = result
}

val decode_PMOV_Z_PI_S : (bits(2), bits(4), bits(5)) -> unit

function decode_PMOV_Z_PI_S (i2, Pn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Pn);
    let 'd = UInt(Zd);
    let 'esize = 32;
    let 'imm = UInt(i2);
    match VL {
      128 => {
          execute_PMOV_Z_PI_S(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_Z_PI_S(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_Z_PI_S(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_Z_PI_S(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_Z_PI_S(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1821) = {
    SEE = 1821;
    let i2 = Slice(__opcode, 17, 2);
    let Pn = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMOV_Z_PI_S(i2, Pn, Zd)
}

val execute_PMOV_Z_PI_D : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 15 & 'imm in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_Z_PI_D (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('PL) = P_read(n, PL);
    result : bits('VL) = undefined;
    if imm == 0 then {
        result = Zeros(VL)
    } else {
        result = Z_read(d, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result[elements * imm + e] = Bit(PredicateElement(operand, e, esize))
    };
    Z_set(d, VL) = result
}

val decode_PMOV_Z_PI_D : (bits(1), bits(2), bits(4), bits(5)) -> unit

function decode_PMOV_Z_PI_D (i3h, i3l, Pn, Zd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Pn);
    let 'd = UInt(Zd);
    let 'esize = 64;
    let 'imm = UInt(i3h @ i3l);
    match VL {
      128 => {
          execute_PMOV_Z_PI_D(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_Z_PI_D(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_Z_PI_D(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_Z_PI_D(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_Z_PI_D(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1822) = {
    SEE = 1822;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 17, 2);
    let Pn = Slice(__opcode, 5, 4);
    let Zd = Slice(__opcode, 0, 5);
    decode_PMOV_Z_PI_D(i3h, i3l, Pn, Zd)
}

val execute_PMOV_P_ZI_B : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 31 & 'imm == 0 & 'esize == 8 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_P_ZI_B (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, psize, ZeroExtend([operand[elements * imm + e]], psize))
    };
    P_set(d, PL) = result
}

val decode_PMOV_P_ZI_B : (bits(5), bits(4)) -> unit

function decode_PMOV_P_ZI_B (Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let 'esize = 8;
    let 'imm = 0;
    match VL {
      128 => {
          execute_PMOV_P_ZI_B(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_P_ZI_B(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_P_ZI_B(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_P_ZI_B(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_P_ZI_B(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1823) = {
    SEE = 1823;
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_PMOV_P_ZI_B(Zn, Pd)
}

val execute_PMOV_P_ZI_H : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 31 & 'imm in {0, 1} & 'esize == 16 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_P_ZI_H (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, psize, ZeroExtend([operand[elements * imm + e]], psize))
    };
    P_set(d, PL) = result
}

val decode_PMOV_P_ZI_H : (bits(1), bits(5), bits(4)) -> unit

function decode_PMOV_P_ZI_H (i1, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let 'esize = 16;
    let 'imm = UInt(i1);
    match VL {
      128 => {
          execute_PMOV_P_ZI_H(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_P_ZI_H(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_P_ZI_H(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_P_ZI_H(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_P_ZI_H(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1824) = {
    SEE = 1824;
    let i1 = Slice(__opcode, 17, 1);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_PMOV_P_ZI_H(i1, Zn, Pd)
}

val execute_PMOV_P_ZI_S : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 31 & 'imm in {0, 1, 2, 3} & 'esize == 32 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_P_ZI_S (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, psize, ZeroExtend([operand[elements * imm + e]], psize))
    };
    P_set(d, PL) = result
}

val decode_PMOV_P_ZI_S : (bits(2), bits(5), bits(4)) -> unit

function decode_PMOV_P_ZI_S (i2, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let 'esize = 32;
    let 'imm = UInt(i2);
    match VL {
      128 => {
          execute_PMOV_P_ZI_S(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_P_ZI_S(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_P_ZI_S(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_P_ZI_S(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_P_ZI_S(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1825) = {
    SEE = 1825;
    let i2 = Slice(__opcode, 17, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_PMOV_P_ZI_S(i2, Zn, Pd)
}

val execute_PMOV_P_ZI_D : forall 'VL 'd 'esize 'imm 'n,
  (0 <= 'n & 'n <= 31 & 'imm in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('imm), int('n)) -> unit

function execute_PMOV_P_ZI_D (VL, d, esize, imm, n) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let operand : bits('VL) = Z_read(n, VL);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        result = Elem_set(result, e, psize, ZeroExtend([operand[elements * imm + e]], psize))
    };
    P_set(d, PL) = result
}

val decode_PMOV_P_ZI_D : (bits(1), bits(2), bits(5), bits(4)) -> unit

function decode_PMOV_P_ZI_D (i3h, i3l, Zn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Zn);
    let 'd = UInt(Pd);
    let 'esize = 64;
    let 'imm = UInt(i3h @ i3l);
    match VL {
      128 => {
          execute_PMOV_P_ZI_D(128, d, esize, imm, n)
      },
      256 => {
          execute_PMOV_P_ZI_D(256, d, esize, imm, n)
      },
      512 => {
          execute_PMOV_P_ZI_D(512, d, esize, imm, n)
      },
      1024 => {
          execute_PMOV_P_ZI_D(1024, d, esize, imm, n)
      },
      2048 => {
          execute_PMOV_P_ZI_D(2048, d, esize, imm, n)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitone, bitzero, bitone, _, _, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1826) = {
    SEE = 1826;
    let i3h = Slice(__opcode, 22, 1);
    let i3l = Slice(__opcode, 17, 2);
    let Zn = Slice(__opcode, 5, 5);
    let Pd = Slice(__opcode, 0, 4);
    decode_PMOV_P_ZI_D(i3h, i3l, Zn, Pd)
}

val execute_PEXT_PN_RR__ : forall 'VL 'd 'esize 'n 'part,
  ('part in {0, 1, 2, 3} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('part)) -> unit

function execute_PEXT_PN_RR__ (VL, d, esize, n, part) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let pred : bits('PL) = P_read(n, PL);
    let mask : bits('PL * 4) = CounterToPredicate(pred[15 .. 0], PL * 4);
    result : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let pbit : bits(1) = PredicateElement(mask, part * elements + e, esize);
        result = Elem_set(result, e, psize, ZeroExtend(pbit, psize))
    };
    P_set(d, PL) = result
}

val decode_PEXT_PN_RR__ : (bits(2), bits(2), bits(3), bits(4)) -> unit

function decode_PEXT_PN_RR__ (size, imm2, PNn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(0b1 @ PNn);
    let 'd = UInt(Pd);
    let 'part = UInt(imm2);
    match VL {
      128 => {
          execute_PEXT_PN_RR__(128, d, esize, n, part)
      },
      256 => {
          execute_PEXT_PN_RR__(256, d, esize, n, part)
      },
      512 => {
          execute_PEXT_PN_RR__(512, d, esize, n, part)
      },
      1024 => {
          execute_PEXT_PN_RR__(1024, d, esize, n, part)
      },
      2048 => {
          execute_PEXT_PN_RR__(2048, d, esize, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1827) = {
    SEE = 1827;
    let size = Slice(__opcode, 22, 2);
    let imm2 = Slice(__opcode, 8, 2);
    let PNn = Slice(__opcode, 5, 3);
    let Pd = Slice(__opcode, 0, 4);
    decode_PEXT_PN_RR__(size, imm2, PNn, Pd)
}

val execute_PEXT_PP_RR__ : forall 'VL 'd0 'd1 'esize 'n 'part,
  ('part in {0, 1} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd0 & 'd0 <= 15 & is_VL('VL)).
  (int('VL), int('d0), int('d1), int('esize), int('n), int('part)) -> unit

function execute_PEXT_PP_RR__ (VL, d0, d1, esize, n, part) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let pred : bits('PL) = P_read(n, PL);
    let mask : bits('PL * 4) = CounterToPredicate(pred[15 .. 0], PL * 4);
    result0 : bits('PL) = undefined;
    result1 : bits('PL) = undefined;
    let 'psize = DIV(esize, 8);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let pbit : bits(1) = PredicateElement(mask, part * 2 * elements + e, esize);
        result0 = Elem_set(result0, e, psize, ZeroExtend(pbit, psize))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let pbit : bits(1) = PredicateElement(mask, part * 2 * elements + elements + e, esize);
        result1 = Elem_set(result1, e, psize, ZeroExtend(pbit, psize))
    };
    P_set(d0, PL) = result0;
    P_set(d1, PL) = result1
}

val decode_PEXT_PP_RR__ : (bits(2), bits(1), bits(3), bits(4)) -> unit

function decode_PEXT_PP_RR__ (size, i1, PNn, Pd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(0b1 @ PNn);
    let 'd0 = UInt(Pd);
    let 'd1 = MOD(UInt(Pd) + 1, 16);
    let 'part = UInt(i1);
    match VL {
      128 => {
          execute_PEXT_PP_RR__(128, d0, d1, esize, n, part)
      },
      256 => {
          execute_PEXT_PP_RR__(256, d0, d1, esize, n, part)
      },
      512 => {
          execute_PEXT_PP_RR__(512, d0, d1, esize, n, part)
      },
      1024 => {
          execute_PEXT_PP_RR__(1024, d0, d1, esize, n, part)
      },
      2048 => {
          execute_PEXT_PP_RR__(2048, d0, d1, esize, n, part)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, _, _, _, _] as __opcode)) if SEE < 1828) = {
    SEE = 1828;
    let size = Slice(__opcode, 22, 2);
    let i1 = Slice(__opcode, 8, 1);
    let PNn = Slice(__opcode, 5, 3);
    let Pd = Slice(__opcode, 0, 4);
    decode_PEXT_PP_RR__(size, i1, PNn, Pd)
}

val execute_PTRUE_PN_I__ : forall 'VL 'd 'esize,
  ('esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize)) -> unit

function execute_PTRUE_PN_I__ (VL, d, esize) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let result : bits('PL) = EncodePredCount(esize, elements, elements, false, PL);
    P_set(d, PL) = result
}

val decode_PTRUE_PN_I__ : (bits(2), bits(3)) -> unit

function decode_PTRUE_PN_I__ (size, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'd = UInt(0b1 @ PNd);
    match VL {
      128 => {
          execute_PTRUE_PN_I__(128, d, esize)
      },
      256 => {
          execute_PTRUE_PN_I__(256, d, esize)
      },
      512 => {
          execute_PTRUE_PN_I__(512, d, esize)
      },
      1024 => {
          execute_PTRUE_PN_I__(1024, d, esize)
      },
      2048 => {
          execute_PTRUE_PN_I__(2048, d, esize)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitone, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _] as __opcode)) if SEE < 1829) = {
    SEE = 1829;
    let size = Slice(__opcode, 22, 2);
    let PNd = Slice(__opcode, 0, 3);
    decode_PTRUE_PN_I__(size, PNd)
}

val execute_CNTP_R_PN__ : forall 'VL 'd 'esize 'n 'width,
  ('width in {2, 4} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL('VL)).
  (int('VL), int('d), int('esize), int('n), int('width)) -> unit

function execute_CNTP_R_PN__ (VL, d, esize, n, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let pred : bits('PL) = P_read(n, PL);
    let mask : bits('PL * 4) = CounterToPredicate(pred[15 .. 0], PL * 4);
    sum : bits(64) = Zeros(64);
    let 'limit = elements * width;
    foreach (e from 0 to (limit - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            sum = sum + 1
        };
        ()
    };
    X_set(d, 64) = sum
}

val decode_CNTP_R_PN__ : (bits(2), bits(1), bits(4), bits(5)) -> unit

function decode_CNTP_R_PN__ (size, vl, PNn, Rd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'n = UInt(PNn);
    let 'd = UInt(Rd);
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL(128))));
          execute_CNTP_R_PN__(128, d, esize, n, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL(256))));
          execute_CNTP_R_PN__(256, d, esize, n, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL(512))));
          execute_CNTP_R_PN__(512, d, esize, n, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL(1024))));
          execute_CNTP_R_PN__(1024, d, esize, n, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 15 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 31 & is_VL(2048))));
          execute_CNTP_R_PN__(2048, d, esize, n, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1830) = {
    SEE = 1830;
    let size = Slice(__opcode, 22, 2);
    let vl = Slice(__opcode, 10, 1);
    let PNn = Slice(__opcode, 5, 4);
    let Rd = Slice(__opcode, 0, 5);
    decode_CNTP_R_PN__(size, vl, PNn, Rd)
}

val execute_WHILELO_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILELO_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELO_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 + 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILELO_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILELO_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = true;
    let invert : bool = false;
    let op : SVECmp = Cmp_LT;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILELO_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILELO_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILELO_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILELO_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILELO_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 1831) = {
    SEE = 1831;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILELO_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_WHILELS_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILELS_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELS_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 + 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILELS_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILELS_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = true;
    let invert : bool = false;
    let op : SVECmp = Cmp_LE;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILELS_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILELS_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILELS_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILELS_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILELS_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 1832) = {
    SEE = 1832;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILELS_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_WHILELT_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILELT_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELT_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 + 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILELT_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILELT_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = false;
    let invert : bool = false;
    let op : SVECmp = Cmp_LT;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILELT_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILELT_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILELT_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILELT_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILELT_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 1833) = {
    SEE = 1833;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILELT_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_WHILELE_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILELE_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        cond : bool = undefined;
        match op {
          Cmp_LT => {
              cond = asl_Int(operand1, is_unsigned) < asl_Int(operand2, is_unsigned)
          },
          Cmp_LE => {
              cond = asl_Int(operand1, is_unsigned) <= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILELE_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 + 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILELE_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILELE_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = false;
    let invert : bool = false;
    let op : SVECmp = Cmp_LE;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILELE_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILELE_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILELE_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILELE_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILELE_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 1834) = {
    SEE = 1834;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILELE_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_WHILEHI_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILEHI_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEHI_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 - 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILEHI_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILEHI_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = true;
    let invert : bool = true;
    let op : SVECmp = Cmp_GT;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILEHI_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILEHI_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILEHI_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILEHI_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILEHI_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 1835) = {
    SEE = 1835;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILEHI_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_WHILEHS_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILEHS_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEHS_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 - 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILEHS_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILEHS_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = true;
    let invert : bool = true;
    let op : SVECmp = Cmp_GE;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILEHS_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILEHS_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILEHS_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILEHS_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILEHS_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 1836) = {
    SEE = 1836;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILEHS_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_WHILEGT_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILEGT_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEGT_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 - 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILEGT_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILEGT_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = false;
    let invert : bool = true;
    let op : SVECmp = Cmp_GT;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILEGT_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILEGT_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILEGT_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILEGT_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILEGT_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, _, _, _] as __opcode)) if SEE < 1837) = {
    SEE = 1837;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILEGT_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_WHILEGE_PN_RR__ : forall 'VL 'd 'esize ('invert : Bool) ('is_unsigned : Bool) 'm 'n 'rsize 'width,
  ('width in {2, 4} & 'rsize == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL('VL)).
  (int('VL), int('d), int('esize), bool('invert), int('m), int('n), SVECmp, int('rsize), bool('is_unsigned), int('width)) -> unit

function execute_WHILEGE_PN_RR__ (VL, d, esize, invert, m, n, op, rsize, is_unsigned, width) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = width * DIV(VL, esize);
    operand1 : bits('rsize) = X_read(n, rsize);
    let operand2 : bits('rsize) = X_read(m, rsize);
    last : bool = true;
    count : int = 0;
    foreach (e from (elements - 1) to 0 by 1 in dec) {
        cond : bool = undefined;
        match op {
          Cmp_GT => {
              cond = asl_Int(operand1, is_unsigned) > asl_Int(operand2, is_unsigned)
          },
          Cmp_GE => {
              cond = asl_Int(operand1, is_unsigned) >= asl_Int(operand2, is_unsigned)
          },
          _ => PatternMatchFailure("execute_WHILEGE_PN_RR__")
        };
        last = last & cond;
        if last then {
            count = count + 1
        };
        operand1 = operand1 - 1
    };
    let 'count = count;
    let result : bits('PL) = EncodePredCount(esize, elements, count, invert, PL);
    (PSTATE.N @ PSTATE.Z @ PSTATE.C @ PSTATE.V) = PredCountTest(elements, count, invert);
    P_set(d, PL) = result
}

val decode_WHILEGE_PN_RR__ : (bits(2), bits(5), bits(1), bits(1), bits(1), bits(5), bits(1), bits(3)) -> unit

function decode_WHILEGE_PN_RR__ (size, Rm, vl, U, lt, Rn, eq, PNd) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'esize = (8 << UInt(size));
    let 'rsize = 64;
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'd = UInt(0b1 @ PNd);
    let is_unsigned : bool = false;
    let invert : bool = true;
    let op : SVECmp = Cmp_GE;
    let 'width = (2 << UInt(vl));
    match VL {
      128 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(128))));
          execute_WHILEGE_PN_RR__(128, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      256 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(256))));
          execute_WHILEGE_PN_RR__(256, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      512 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(512))));
          execute_WHILEGE_PN_RR__(512, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      1024 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(1024))));
          execute_WHILEGE_PN_RR__(1024, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      },
      2048 => {
          assert(constraint(('width in {2, 4} & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'esize in {8, 16, 32, 64} & 0 <= 'd & 'd <= 15 & is_VL(2048))));
          execute_WHILEGE_PN_RR__(2048, d, esize, invert, m, n, op, rsize, is_unsigned, width)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, bitone, _, _, _, _, _, bitzero, bitone, _, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, _, _, _] as __opcode)) if SEE < 1838) = {
    SEE = 1838;
    let size = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let vl = Slice(__opcode, 13, 1);
    let U = Slice(__opcode, 11, 1);
    let lt = Slice(__opcode, 10, 1);
    let Rn = Slice(__opcode, 5, 5);
    let eq = Slice(__opcode, 3, 1);
    let PNd = Slice(__opcode, 0, 3);
    decode_WHILEGE_PN_RR__(size, Rm, vl, U, lt, Rn, eq, PNd)
}

val execute_LD1B_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1B_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1839) = {
    SEE = 1839;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SB_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1840) = {
    SEE = 1840;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1B_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1B_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1841) = {
    SEE = 1841;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SB_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1842) = {
    SEE = 1842;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1H_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1843) = {
    SEE = 1843;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1844) = {
    SEE = 1844;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1845) = {
    SEE = 1845;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1846) = {
    SEE = 1846;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1W_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1847) = {
    SEE = 1847;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BZ_S_x32_unscaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BZ_S_x32_unscaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1848) = {
    SEE = 1848;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BZ_S_x32_unscaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_PRFB_I_P_BZ_S_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFB_I_P_BZ_S_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFB_I_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFB_I_P_BZ_S_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_PRFB_I_P_BZ_S_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFB_I_P_BZ_S_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFB_I_P_BZ_S_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFB_I_P_BZ_S_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFB_I_P_BZ_S_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1849) = {
    SEE = 1849;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFB_I_P_BZ_S_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_PRFH_I_P_BZ_S_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFH_I_P_BZ_S_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFH_I_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFH_I_P_BZ_S_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_PRFH_I_P_BZ_S_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFH_I_P_BZ_S_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFH_I_P_BZ_S_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFH_I_P_BZ_S_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFH_I_P_BZ_S_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1850) = {
    SEE = 1850;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFH_I_P_BZ_S_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_PRFW_I_P_BZ_S_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFW_I_P_BZ_S_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFW_I_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFW_I_P_BZ_S_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_PRFW_I_P_BZ_S_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFW_I_P_BZ_S_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFW_I_P_BZ_S_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFW_I_P_BZ_S_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFW_I_P_BZ_S_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1851) = {
    SEE = 1851;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFW_I_P_BZ_S_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_PRFD_I_P_BZ_S_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 3 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFD_I_P_BZ_S_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFD_I_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFD_I_P_BZ_S_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 3;
    match VL {
      128 => {
          execute_PRFD_I_P_BZ_S_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFD_I_P_BZ_S_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFD_I_P_BZ_S_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFD_I_P_BZ_S_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFD_I_P_BZ_S_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1852) = {
    SEE = 1852;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFD_I_P_BZ_S_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_LD1H_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BZ_S_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LD1H_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1853) = {
    SEE = 1853;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BZ_S_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BZ_S_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1854) = {
    SEE = 1854;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BZ_S_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BZ_S_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1855) = {
    SEE = 1855;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BZ_S_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BZ_S_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1856) = {
    SEE = 1856;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BZ_S_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BZ_S_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LD1W_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1857) = {
    SEE = 1857;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BZ_S_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BZ_S_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BZ_S_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1858) = {
    SEE = 1858;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BZ_S_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDR_P_BI__ : forall 'VL 'imm 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 31 & is_VL('VL)).
  (int('VL), int('imm), int('n), int('t)) -> unit

function execute_LDR_P_BI__ (VL, imm, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(PL, 8);
    base : bits(64) = undefined;
    offset : int = imm * elements;
    result : bits('PL) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let aligned : bool = IsAligned__1(base + offset, 2);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base + offset, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'offset = offset in
          {
              result = Elem_set(result, e, 8, AArch64_MemSingle_read(base + offset, 1, accdesc, aligned))
          };
        offset = offset + 1
    };
    P_set(t, PL) = result
}

val decode_LDR_P_BI__ : (bits(6), bits(3), bits(5), bits(4)) -> unit

function decode_LDR_P_BI__ (imm9h, imm9l, Rn, Pt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Pt);
    let 'n = UInt(Rn);
    let 'imm = SInt(imm9h @ imm9l);
    match VL {
      128 => {
          execute_LDR_P_BI__(128, imm, n, t)
      },
      256 => {
          execute_LDR_P_BI__(256, imm, n, t)
      },
      512 => {
          execute_LDR_P_BI__(512, imm, n, t)
      },
      1024 => {
          execute_LDR_P_BI__(1024, imm, n, t)
      },
      2048 => {
          execute_LDR_P_BI__(2048, imm, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1859) = {
    SEE = 1859;
    let imm9h = Slice(__opcode, 16, 6);
    let imm9l = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Pt = Slice(__opcode, 0, 4);
    decode_LDR_P_BI__(imm9h, imm9l, Rn, Pt)
}

val execute_LDR_Z_BI__ : forall 'VL 'imm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & is_VL('VL)).
  (int('VL), int('imm), int('n), int('t)) -> unit

function execute_LDR_Z_BI__ (VL, imm, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, 8);
    base : bits(64) = undefined;
    offset : int = imm * elements;
    result : bits('VL) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let aligned : bool = IsAligned__1(base + offset, 16);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base + offset, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'offset = offset in
          {
              result = Elem_set(result, e, 8, AArch64_MemSingle_read(base + offset, 1, accdesc, aligned))
          };
        offset = offset + 1
    };
    Z_set(t, VL) = result
}

val decode_LDR_Z_BI__ : (bits(6), bits(3), bits(5), bits(5)) -> unit

function decode_LDR_Z_BI__ (imm9h, imm9l, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'imm = SInt(imm9h @ imm9l);
    match VL {
      128 => {
          execute_LDR_Z_BI__(128, imm, n, t)
      },
      256 => {
          execute_LDR_Z_BI__(256, imm, n, t)
      },
      512 => {
          execute_LDR_Z_BI__(512, imm, n, t)
      },
      1024 => {
          execute_LDR_Z_BI__(1024, imm, n, t)
      },
      2048 => {
          execute_LDR_Z_BI__(2048, imm, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1860) = {
    SEE = 1860;
    let imm9h = Slice(__opcode, 16, 6);
    let imm9l = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDR_Z_BI__(imm9h, imm9l, Rn, Zt)
}

val execute_PRFB_I_P_BI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 0 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFB_I_P_BI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFB_I_P_BI_S : (bits(6), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFB_I_P_BI_S (imm6, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 0;
    let 'offset = SInt(imm6);
    match VL {
      128 => {
          execute_PRFB_I_P_BI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFB_I_P_BI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFB_I_P_BI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFB_I_P_BI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFB_I_P_BI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1861) = {
    SEE = 1861;
    let imm6 = Slice(__opcode, 16, 6);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFB_I_P_BI_S(imm6, msz, Pg, Rn, prfop)
}

val execute_PRFH_I_P_BI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 1 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFH_I_P_BI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFH_I_P_BI_S : (bits(6), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFH_I_P_BI_S (imm6, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 1;
    let 'offset = SInt(imm6);
    match VL {
      128 => {
          execute_PRFH_I_P_BI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFH_I_P_BI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFH_I_P_BI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFH_I_P_BI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFH_I_P_BI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1862) = {
    SEE = 1862;
    let imm6 = Slice(__opcode, 16, 6);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFH_I_P_BI_S(imm6, msz, Pg, Rn, prfop)
}

val execute_PRFW_I_P_BI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 2 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFW_I_P_BI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFW_I_P_BI_S : (bits(6), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFW_I_P_BI_S (imm6, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 2;
    let 'offset = SInt(imm6);
    match VL {
      128 => {
          execute_PRFW_I_P_BI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFW_I_P_BI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFW_I_P_BI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFW_I_P_BI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFW_I_P_BI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1863) = {
    SEE = 1863;
    let imm6 = Slice(__opcode, 16, 6);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFW_I_P_BI_S(imm6, msz, Pg, Rn, prfop)
}

val execute_PRFD_I_P_BI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 3 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFD_I_P_BI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFD_I_P_BI_S : (bits(6), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFD_I_P_BI_S (imm6, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 3;
    let 'offset = SInt(imm6);
    match VL {
      128 => {
          execute_PRFD_I_P_BI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFD_I_P_BI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFD_I_P_BI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFD_I_P_BI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFD_I_P_BI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1864) = {
    SEE = 1864;
    let imm6 = Slice(__opcode, 16, 6);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFD_I_P_BI_S(imm6, msz, Pg, Rn, prfop)
}

val execute_PRFB_I_P_BR_S : forall 'VL 'esize 'g 'level 'm 'n 'scale ('stream : Bool),
  ('scale == 0 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFB_I_P_BR_S (VL, esize, g, level, m, n, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFB_I_P_BR_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFB_I_P_BR_S (msz, Rm, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 'esize = 8;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 0;
    match VL {
      128 => {
          execute_PRFB_I_P_BR_S(128, esize, g, level, m, n, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFB_I_P_BR_S(256, esize, g, level, m, n, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFB_I_P_BR_S(512, esize, g, level, m, n, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFB_I_P_BR_S(1024, esize, g, level, m, n, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFB_I_P_BR_S(2048, esize, g, level, m, n, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1865) = {
    SEE = 1865;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFB_I_P_BR_S(msz, Rm, Pg, Rn, prfop)
}

val execute_PRFH_I_P_BR_S : forall 'VL 'esize 'g 'level 'm 'n 'scale ('stream : Bool),
  ('scale == 1 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFH_I_P_BR_S (VL, esize, g, level, m, n, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFH_I_P_BR_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFH_I_P_BR_S (msz, Rm, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 'esize = 16;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 1;
    match VL {
      128 => {
          execute_PRFH_I_P_BR_S(128, esize, g, level, m, n, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFH_I_P_BR_S(256, esize, g, level, m, n, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFH_I_P_BR_S(512, esize, g, level, m, n, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFH_I_P_BR_S(1024, esize, g, level, m, n, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFH_I_P_BR_S(2048, esize, g, level, m, n, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1866) = {
    SEE = 1866;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFH_I_P_BR_S(msz, Rm, Pg, Rn, prfop)
}

val execute_PRFW_I_P_BR_S : forall 'VL 'esize 'g 'level 'm 'n 'scale ('stream : Bool),
  ('scale == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFW_I_P_BR_S (VL, esize, g, level, m, n, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFW_I_P_BR_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFW_I_P_BR_S (msz, Rm, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 2;
    match VL {
      128 => {
          execute_PRFW_I_P_BR_S(128, esize, g, level, m, n, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFW_I_P_BR_S(256, esize, g, level, m, n, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFW_I_P_BR_S(512, esize, g, level, m, n, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFW_I_P_BR_S(1024, esize, g, level, m, n, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFW_I_P_BR_S(2048, esize, g, level, m, n, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1867) = {
    SEE = 1867;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFW_I_P_BR_S(msz, Rm, Pg, Rn, prfop)
}

val execute_PRFD_I_P_BR_S : forall 'VL 'esize 'g 'level 'm 'n 'scale ('stream : Bool),
  ('scale == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFD_I_P_BR_S (VL, esize, g, level, m, n, pref_hint, scale, stream) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + (eoff << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFD_I_P_BR_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFD_I_P_BR_S (msz, Rm, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 3;
    match VL {
      128 => {
          execute_PRFD_I_P_BR_S(128, esize, g, level, m, n, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFD_I_P_BR_S(256, esize, g, level, m, n, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFD_I_P_BR_S(512, esize, g, level, m, n, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFD_I_P_BR_S(1024, esize, g, level, m, n, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFD_I_P_BR_S(2048, esize, g, level, m, n, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1868) = {
    SEE = 1868;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFD_I_P_BR_S(msz, Rm, Pg, Rn, prfop)
}

val execute_PRFB_I_P_AI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 0 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFB_I_P_AI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFB_I_P_AI_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFB_I_P_AI_S (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 0;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFB_I_P_AI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFB_I_P_AI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFB_I_P_AI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFB_I_P_AI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFB_I_P_AI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1869) = {
    SEE = 1869;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFB_I_P_AI_S(msz, imm5, Pg, Zn, prfop)
}

val execute_PRFH_I_P_AI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 1 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFH_I_P_AI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFH_I_P_AI_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFH_I_P_AI_S (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 1;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFH_I_P_AI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFH_I_P_AI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFH_I_P_AI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFH_I_P_AI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFH_I_P_AI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1870) = {
    SEE = 1870;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFH_I_P_AI_S(msz, imm5, Pg, Zn, prfop)
}

val execute_PRFW_I_P_AI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 2 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFW_I_P_AI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFW_I_P_AI_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFW_I_P_AI_S (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 2;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFW_I_P_AI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFW_I_P_AI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFW_I_P_AI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFW_I_P_AI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFW_I_P_AI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1871) = {
    SEE = 1871;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFW_I_P_AI_S(msz, imm5, Pg, Zn, prfop)
}

val execute_PRFD_I_P_AI_S : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 3 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFD_I_P_AI_S (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFD_I_P_AI_S : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFD_I_P_AI_S (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 32;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 3;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFD_I_P_AI_S(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFD_I_P_AI_S(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFD_I_P_AI_S(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFD_I_P_AI_S(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFD_I_P_AI_S(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 1872) = {
    SEE = 1872;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFD_I_P_AI_S(msz, imm5, Pg, Zn, prfop)
}

val execute_LD1B_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1B_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1873) = {
    SEE = 1873;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1SB_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1SB_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1874) = {
    SEE = 1874;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1B_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1B_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1875) = {
    SEE = 1875;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1SB_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1876) = {
    SEE = 1876;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1H_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1H_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1877) = {
    SEE = 1877;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1SH_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1SH_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1878) = {
    SEE = 1878;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1H_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1H_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1879) = {
    SEE = 1879;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1SH_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1880) = {
    SEE = 1880;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1W_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1W_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1881) = {
    SEE = 1881;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1W_Z_P_AI_S : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_AI_S (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_AI_S : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_AI_S (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1W_Z_P_AI_S(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_AI_S(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_AI_S(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_AI_S(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_AI_S(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1882) = {
    SEE = 1882;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_AI_S(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1RB_Z_P_BI_U8 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RB_Z_P_BI_U8 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RB_Z_P_BI_U8 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RB_Z_P_BI_U8 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RB_Z_P_BI_U8(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RB_Z_P_BI_U8(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RB_Z_P_BI_U8(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RB_Z_P_BI_U8(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RB_Z_P_BI_U8(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1883) = {
    SEE = 1883;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RB_Z_P_BI_U8(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RB_Z_P_BI_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RB_Z_P_BI_U16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RB_Z_P_BI_U16 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RB_Z_P_BI_U16 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RB_Z_P_BI_U16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RB_Z_P_BI_U16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RB_Z_P_BI_U16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RB_Z_P_BI_U16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RB_Z_P_BI_U16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1884) = {
    SEE = 1884;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RB_Z_P_BI_U16(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RB_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RB_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RB_Z_P_BI_U32 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RB_Z_P_BI_U32 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RB_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RB_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RB_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RB_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RB_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1885) = {
    SEE = 1885;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RB_Z_P_BI_U32(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RB_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RB_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RB_Z_P_BI_U64 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RB_Z_P_BI_U64 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RB_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RB_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RB_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RB_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RB_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1886) = {
    SEE = 1886;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RB_Z_P_BI_U64(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RSW_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RSW_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RSW_Z_P_BI_S64 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RSW_Z_P_BI_S64 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RSW_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RSW_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RSW_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RSW_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RSW_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1887) = {
    SEE = 1887;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RSW_Z_P_BI_S64(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RH_Z_P_BI_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RH_Z_P_BI_U16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RH_Z_P_BI_U16 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RH_Z_P_BI_U16 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RH_Z_P_BI_U16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RH_Z_P_BI_U16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RH_Z_P_BI_U16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RH_Z_P_BI_U16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RH_Z_P_BI_U16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1888) = {
    SEE = 1888;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RH_Z_P_BI_U16(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RH_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RH_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RH_Z_P_BI_U32 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RH_Z_P_BI_U32 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RH_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RH_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RH_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RH_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RH_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1889) = {
    SEE = 1889;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RH_Z_P_BI_U32(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RH_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RH_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RH_Z_P_BI_U64 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RH_Z_P_BI_U64 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RH_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RH_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RH_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RH_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RH_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1890) = {
    SEE = 1890;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RH_Z_P_BI_U64(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RSH_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RSH_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RSH_Z_P_BI_S64 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RSH_Z_P_BI_S64 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RSH_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RSH_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RSH_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RSH_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RSH_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1891) = {
    SEE = 1891;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RSH_Z_P_BI_S64(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RSH_Z_P_BI_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RSH_Z_P_BI_S32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RSH_Z_P_BI_S32 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RSH_Z_P_BI_S32 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RSH_Z_P_BI_S32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RSH_Z_P_BI_S32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RSH_Z_P_BI_S32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RSH_Z_P_BI_S32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RSH_Z_P_BI_S32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1892) = {
    SEE = 1892;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RSH_Z_P_BI_S32(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RW_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RW_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RW_Z_P_BI_U32 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RW_Z_P_BI_U32 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RW_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RW_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RW_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RW_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RW_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1893) = {
    SEE = 1893;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RW_Z_P_BI_U32(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RW_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RW_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RW_Z_P_BI_U64 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RW_Z_P_BI_U64 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RW_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RW_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RW_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RW_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RW_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1894) = {
    SEE = 1894;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RW_Z_P_BI_U64(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RSB_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RSB_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RSB_Z_P_BI_S64 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RSB_Z_P_BI_S64 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RSB_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RSB_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RSB_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RSB_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RSB_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1895) = {
    SEE = 1895;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RSB_Z_P_BI_S64(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RSB_Z_P_BI_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RSB_Z_P_BI_S32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RSB_Z_P_BI_S32 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RSB_Z_P_BI_S32 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RSB_Z_P_BI_S32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RSB_Z_P_BI_S32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RSB_Z_P_BI_S32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RSB_Z_P_BI_S32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RSB_Z_P_BI_S32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1896) = {
    SEE = 1896;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RSB_Z_P_BI_S32(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RSB_Z_P_BI_S16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RSB_Z_P_BI_S16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RSB_Z_P_BI_S16 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RSB_Z_P_BI_S16 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RSB_Z_P_BI_S16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RSB_Z_P_BI_S16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RSB_Z_P_BI_S16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RSB_Z_P_BI_S16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RSB_Z_P_BI_S16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1897) = {
    SEE = 1897;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RSB_Z_P_BI_S16(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1RD_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 63 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1RD_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        let base : bits(64) = if n == 31 then SP_read() else X_read(n, 64);
        let addr : bits(64) = base + offset * mbytes;
        data = Mem_read(addr, mbytes, accdesc)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1RD_Z_P_BI_U64 : (bits(2), bits(6), bits(2), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RD_Z_P_BI_U64 (dtypeh, imm6, dtypel, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm6);
    match VL {
      128 => {
          execute_LD1RD_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1RD_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1RD_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1RD_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1RD_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1898) = {
    SEE = 1898;
    let dtypeh = Slice(__opcode, 23, 2);
    let imm6 = Slice(__opcode, 16, 6);
    let dtypel = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RD_Z_P_BI_U64(dtypeh, imm6, dtypel, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BR_U8 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BR_U8 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BR_U8 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BR_U8 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1B_Z_P_BR_U8(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BR_U8(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BR_U8(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BR_U8(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BR_U8(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1899) = {
    SEE = 1899;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BR_U8(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BR_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BR_U16 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BR_U16 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BR_U16 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1B_Z_P_BR_U16(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BR_U16(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BR_U16(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BR_U16(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BR_U16(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1900) = {
    SEE = 1900;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BR_U16(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BR_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BR_U32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BR_U32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BR_U32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1B_Z_P_BR_U32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BR_U32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BR_U32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BR_U32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BR_U32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1901) = {
    SEE = 1901;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BR_U32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1B_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1902) = {
    SEE = 1902;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1SW_Z_P_BR_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1SW_Z_P_BR_S64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SW_Z_P_BR_S64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SW_Z_P_BR_S64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LD1SW_Z_P_BR_S64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1SW_Z_P_BR_S64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1SW_Z_P_BR_S64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1SW_Z_P_BR_S64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1SW_Z_P_BR_S64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1903) = {
    SEE = 1903;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SW_Z_P_BR_S64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BR_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BR_U16 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BR_U16 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BR_U16 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1H_Z_P_BR_U16(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BR_U16(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BR_U16(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BR_U16(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BR_U16(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1904) = {
    SEE = 1904;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BR_U16(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BR_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BR_U32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BR_U32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BR_U32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1H_Z_P_BR_U32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BR_U32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BR_U32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BR_U32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BR_U32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1905) = {
    SEE = 1905;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BR_U32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1H_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1906) = {
    SEE = 1906;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BR_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BR_S64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BR_S64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BR_S64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BR_S64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BR_S64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BR_S64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BR_S64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BR_S64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1907) = {
    SEE = 1907;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BR_S64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BR_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BR_S32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BR_S32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BR_S32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BR_S32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BR_S32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BR_S32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BR_S32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BR_S32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1908) = {
    SEE = 1908;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BR_S32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BR_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BR_U32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BR_U32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BR_U32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1W_Z_P_BR_U32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BR_U32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BR_U32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BR_U32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BR_U32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1909) = {
    SEE = 1909;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BR_U32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1W_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1910) = {
    SEE = 1910;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BR_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BR_S64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BR_S64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BR_S64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LD1SB_Z_P_BR_S64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BR_S64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BR_S64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BR_S64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BR_S64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1911) = {
    SEE = 1911;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BR_S64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BR_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BR_S32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BR_S32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BR_S32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LD1SB_Z_P_BR_S32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BR_S32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BR_S32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BR_S32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BR_S32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1912) = {
    SEE = 1912;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BR_S32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BR_S16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BR_S16 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BR_S16 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BR_S16 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LD1SB_Z_P_BR_S16(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BR_S16(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BR_S16(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BR_S16(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BR_S16(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1913) = {
    SEE = 1913;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BR_S16(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1D_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1914) = {
    SEE = 1914;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BR_U128 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BR_U128 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BR_U128 : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BR_U128 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 32;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1W_Z_P_BR_U128(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BR_U128(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BR_U128(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BR_U128(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BR_U128(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1915) = {
    SEE = 1915;
    let dtype = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BR_U128(dtype, Rm, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BR_U128 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BR_U128 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BR_U128 : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BR_U128 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 64;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LD1D_Z_P_BR_U128(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BR_U128(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BR_U128(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BR_U128(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BR_U128(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1916) = {
    SEE = 1916;
    let dtype = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BR_U128(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1B_Z_P_BR_U8 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_BR_U8 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_BR_U8 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_BR_U8 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1B_Z_P_BR_U8(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_BR_U8(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_BR_U8(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_BR_U8(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_BR_U8(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1917) = {
    SEE = 1917;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_BR_U8(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1B_Z_P_BR_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_BR_U16 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_BR_U16 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_BR_U16 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1B_Z_P_BR_U16(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_BR_U16(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_BR_U16(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_BR_U16(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_BR_U16(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1918) = {
    SEE = 1918;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_BR_U16(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1B_Z_P_BR_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_BR_U32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_BR_U32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_BR_U32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1B_Z_P_BR_U32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_BR_U32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_BR_U32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_BR_U32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_BR_U32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1919) = {
    SEE = 1919;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_BR_U32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1B_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1B_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1920) = {
    SEE = 1920;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1SW_Z_P_BR_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SW_Z_P_BR_S64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SW_Z_P_BR_S64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SW_Z_P_BR_S64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDFF1SW_Z_P_BR_S64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SW_Z_P_BR_S64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SW_Z_P_BR_S64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SW_Z_P_BR_S64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SW_Z_P_BR_S64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1921) = {
    SEE = 1921;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SW_Z_P_BR_S64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BR_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BR_U16 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BR_U16 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BR_U16 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BR_U16(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BR_U16(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BR_U16(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BR_U16(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BR_U16(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1922) = {
    SEE = 1922;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BR_U16(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BR_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BR_U32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BR_U32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BR_U32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BR_U32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BR_U32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BR_U32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BR_U32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BR_U32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1923) = {
    SEE = 1923;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BR_U32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1924) = {
    SEE = 1924;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BR_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BR_S64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BR_S64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BR_S64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BR_S64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BR_S64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BR_S64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BR_S64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BR_S64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1925) = {
    SEE = 1925;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BR_S64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BR_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BR_S32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BR_S32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BR_S32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BR_S32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BR_S32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BR_S32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BR_S32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BR_S32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1926) = {
    SEE = 1926;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BR_S32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BR_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BR_U32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BR_U32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BR_U32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BR_U32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BR_U32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BR_U32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BR_U32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BR_U32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1927) = {
    SEE = 1927;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BR_U32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1928) = {
    SEE = 1928;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1SB_Z_P_BR_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_BR_S64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_BR_S64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_BR_S64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_BR_S64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_BR_S64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_BR_S64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_BR_S64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_BR_S64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1929) = {
    SEE = 1929;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_BR_S64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1SB_Z_P_BR_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_BR_S32 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_BR_S32 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_BR_S32 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_BR_S32(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_BR_S32(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_BR_S32(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_BR_S32(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_BR_S32(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1930) = {
    SEE = 1930;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_BR_S32(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1SB_Z_P_BR_S16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_BR_S16 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_BR_S16 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_BR_S16 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_BR_S16(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_BR_S16(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_BR_S16(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_BR_S16(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_BR_S16(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1931) = {
    SEE = 1931;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_BR_S16(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDFF1D_Z_P_BR_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1D_Z_P_BR_U64 (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    offset : bits(64) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1D_Z_P_BR_U64 : (bits(4), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1D_Z_P_BR_U64 (dtype, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDFF1D_Z_P_BR_U64(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDFF1D_Z_P_BR_U64(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDFF1D_Z_P_BR_U64(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1D_Z_P_BR_U64(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1D_Z_P_BR_U64(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1932) = {
    SEE = 1932;
    let dtype = Slice(__opcode, 21, 4);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1D_Z_P_BR_U64(dtype, Rm, Pg, Rn, Zt)
}

val execute_LDNT1B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LDNT1B_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LDNT1B_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LDNT1B_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LDNT1B_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LDNT1B_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LDNT1B_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1933) = {
    SEE = 1933;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LDNT1H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LDNT1H_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LDNT1H_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LDNT1H_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LDNT1H_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LDNT1H_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LDNT1H_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1934) = {
    SEE = 1934;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LDNT1W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LDNT1W_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LDNT1W_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LDNT1W_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LDNT1W_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LDNT1W_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LDNT1W_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1935) = {
    SEE = 1935;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LDNT1D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LDNT1D_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LDNT1D_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LDNT1D_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LDNT1D_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LDNT1D_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LDNT1D_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1936) = {
    SEE = 1936;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD2B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD2B_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD2B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2B_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD2B_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD2B_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD2B_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD2B_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1937) = {
    SEE = 1937;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD2H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD2H_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD2H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2H_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD2H_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD2H_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD2H_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD2H_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1938) = {
    SEE = 1938;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD2W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD2W_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD2W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2W_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD2W_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD2W_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD2W_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD2W_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1939) = {
    SEE = 1939;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD2D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD2D_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD2D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2D_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD2D_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD2D_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD2D_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD2D_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1940) = {
    SEE = 1940;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD3B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD3B_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD3B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3B_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD3B_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD3B_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD3B_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD3B_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1941) = {
    SEE = 1941;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD3H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD3H_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD3H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3H_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD3H_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD3H_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD3H_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD3H_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1942) = {
    SEE = 1942;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD3W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD3W_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD3W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3W_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD3W_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD3W_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD3W_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD3W_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1943) = {
    SEE = 1943;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD3D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD3D_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD3D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3D_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD3D_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD3D_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD3D_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD3D_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1944) = {
    SEE = 1944;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD4B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD4B_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD4B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4B_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD4B_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD4B_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD4B_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD4B_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1945) = {
    SEE = 1945;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD4H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD4H_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD4H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4H_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD4H_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD4H_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD4H_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD4H_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1946) = {
    SEE = 1946;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD4W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD4W_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD4W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4W_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD4W_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD4W_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD4W_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD4W_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1947) = {
    SEE = 1947;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD4D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD4D_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD4D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4D_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD4D_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD4D_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD4D_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD4D_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1948) = {
    SEE = 1948;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_LD2Q_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD2Q_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2Q_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD2Q_Z_P_BR_Contiguous (num, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2Q_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD2Q_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD2Q_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD2Q_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD2Q_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1949) = {
    SEE = 1949;
    let num = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2Q_Z_P_BR_Contiguous(num, Rm, Pg, Rn, Zt)
}

val execute_LD3Q_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD3Q_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3Q_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD3Q_Z_P_BR_Contiguous (num, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3Q_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD3Q_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD3Q_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD3Q_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD3Q_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1950) = {
    SEE = 1950;
    let num = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3Q_Z_P_BR_Contiguous(num, Rm, Pg, Rn, Zt)
}

val execute_LD4Q_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD4Q_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4Q_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD4Q_Z_P_BR_Contiguous (num, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4Q_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD4Q_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD4Q_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD4Q_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD4Q_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1951) = {
    SEE = 1951;
    let num = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4Q_Z_P_BR_Contiguous(num, Rm, Pg, Rn, Zt)
}

val execute_LD1RQB_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1RQB_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQB_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQB_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LD1RQB_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1RQB_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1RQB_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1RQB_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1RQB_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1952) = {
    SEE = 1952;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQB_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1RQH_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1RQH_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQH_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQH_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LD1RQH_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1RQH_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1RQH_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1RQH_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1RQH_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1953) = {
    SEE = 1953;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQH_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1RQW_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1RQW_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQW_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQW_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LD1RQW_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1RQW_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1RQW_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1RQW_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1RQW_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1954) = {
    SEE = 1954;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQW_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1RQD_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1RQD_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQD_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQD_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LD1RQD_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1RQD_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1RQD_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1RQD_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1RQD_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1955) = {
    SEE = 1955;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQD_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1ROB_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1ROB_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROB_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROB_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LD1ROB_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1ROB_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1ROB_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1ROB_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1ROB_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1956) = {
    SEE = 1956;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROB_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1ROH_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1ROH_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROH_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROH_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LD1ROH_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1ROH_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1ROH_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1ROH_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1ROH_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1957) = {
    SEE = 1957;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROH_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1ROW_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1ROW_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROW_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROW_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LD1ROW_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1ROW_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1ROW_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1ROW_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1ROW_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1958) = {
    SEE = 1958;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROW_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1ROD_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1ROD_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = UInt(offset) + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROD_Z_P_BR_Contiguous : (bits(2), bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROD_Z_P_BR_Contiguous (msz, ssz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LD1ROD_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_LD1ROD_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_LD1ROD_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_LD1ROD_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_LD1ROD_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1959) = {
    SEE = 1959;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROD_Z_P_BR_Contiguous(msz, ssz, Rm, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BI_U8 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BI_U8 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BI_U8 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BI_U8 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_Z_P_BI_U8(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BI_U8(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BI_U8(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BI_U8(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BI_U8(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1960) = {
    SEE = 1960;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BI_U8(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BI_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BI_U16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BI_U16 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BI_U16 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_Z_P_BI_U16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BI_U16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BI_U16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BI_U16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BI_U16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1961) = {
    SEE = 1961;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BI_U16(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BI_U32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BI_U32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1962) = {
    SEE = 1962;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BI_U32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1963) = {
    SEE = 1963;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1SW_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SW_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SW_Z_P_BI_S64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SW_Z_P_BI_S64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1SW_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SW_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SW_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SW_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SW_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1964) = {
    SEE = 1964;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SW_Z_P_BI_S64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BI_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BI_U16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BI_U16 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BI_U16 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1H_Z_P_BI_U16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BI_U16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BI_U16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BI_U16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BI_U16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1965) = {
    SEE = 1965;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BI_U16(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BI_U32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BI_U32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1H_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1966) = {
    SEE = 1966;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BI_U32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1H_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1967) = {
    SEE = 1967;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BI_S64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BI_S64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1SH_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1968) = {
    SEE = 1968;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BI_S64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BI_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BI_S32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BI_S32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BI_S32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1SH_Z_P_BI_S32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BI_S32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BI_S32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BI_S32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BI_S32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1969) = {
    SEE = 1969;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BI_S32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BI_U32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BI_U32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1W_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1970) = {
    SEE = 1970;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BI_U32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1W_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1971) = {
    SEE = 1971;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BI_S64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BI_S64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1SB_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1972) = {
    SEE = 1972;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BI_S64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BI_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BI_S32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BI_S32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BI_S32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1SB_Z_P_BI_S32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BI_S32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BI_S32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BI_S32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BI_S32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1973) = {
    SEE = 1973;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BI_S32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BI_S16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BI_S16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BI_S16 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BI_S16 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1SB_Z_P_BI_S16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BI_S16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BI_S16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BI_S16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BI_S16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1974) = {
    SEE = 1974;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BI_S16(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1D_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1975) = {
    SEE = 1975;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1B_Z_P_BI_U8 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1B_Z_P_BI_U8 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1B_Z_P_BI_U8 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1B_Z_P_BI_U8 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1B_Z_P_BI_U8(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1B_Z_P_BI_U8(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1B_Z_P_BI_U8(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1B_Z_P_BI_U8(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1B_Z_P_BI_U8(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1976) = {
    SEE = 1976;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1B_Z_P_BI_U8(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1B_Z_P_BI_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1B_Z_P_BI_U16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1B_Z_P_BI_U16 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1B_Z_P_BI_U16 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1B_Z_P_BI_U16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1B_Z_P_BI_U16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1B_Z_P_BI_U16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1B_Z_P_BI_U16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1B_Z_P_BI_U16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1977) = {
    SEE = 1977;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1B_Z_P_BI_U16(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1B_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1B_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1B_Z_P_BI_U32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1B_Z_P_BI_U32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1B_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1B_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1B_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1B_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1B_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1978) = {
    SEE = 1978;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1B_Z_P_BI_U32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1B_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1B_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1B_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1B_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1B_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1B_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1B_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1B_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1B_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1979) = {
    SEE = 1979;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1B_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1SW_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1SW_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1SW_Z_P_BI_S64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1SW_Z_P_BI_S64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1SW_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1SW_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1SW_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1SW_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1SW_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1980) = {
    SEE = 1980;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1SW_Z_P_BI_S64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1H_Z_P_BI_U16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1H_Z_P_BI_U16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1H_Z_P_BI_U16 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1H_Z_P_BI_U16 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1H_Z_P_BI_U16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1H_Z_P_BI_U16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1H_Z_P_BI_U16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1H_Z_P_BI_U16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1H_Z_P_BI_U16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1981) = {
    SEE = 1981;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1H_Z_P_BI_U16(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1H_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1H_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1H_Z_P_BI_U32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1H_Z_P_BI_U32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1H_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1H_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1H_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1H_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1H_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1982) = {
    SEE = 1982;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1H_Z_P_BI_U32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1H_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1H_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1H_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1H_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1H_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1H_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1H_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1H_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1H_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1983) = {
    SEE = 1983;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1H_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1SH_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1SH_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1SH_Z_P_BI_S64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1SH_Z_P_BI_S64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1SH_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1SH_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1SH_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1SH_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1SH_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1984) = {
    SEE = 1984;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1SH_Z_P_BI_S64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1SH_Z_P_BI_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1SH_Z_P_BI_S32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1SH_Z_P_BI_S32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1SH_Z_P_BI_S32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1SH_Z_P_BI_S32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1SH_Z_P_BI_S32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1SH_Z_P_BI_S32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1SH_Z_P_BI_S32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1SH_Z_P_BI_S32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1985) = {
    SEE = 1985;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1SH_Z_P_BI_S32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1W_Z_P_BI_U32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1W_Z_P_BI_U32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1W_Z_P_BI_U32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1W_Z_P_BI_U32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1W_Z_P_BI_U32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1W_Z_P_BI_U32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1W_Z_P_BI_U32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1W_Z_P_BI_U32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1W_Z_P_BI_U32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1986) = {
    SEE = 1986;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1W_Z_P_BI_U32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1W_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1W_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1W_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1W_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1W_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1W_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1W_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1W_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1W_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1987) = {
    SEE = 1987;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1W_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1SB_Z_P_BI_S64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1SB_Z_P_BI_S64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1SB_Z_P_BI_S64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1SB_Z_P_BI_S64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1SB_Z_P_BI_S64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1SB_Z_P_BI_S64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1SB_Z_P_BI_S64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1SB_Z_P_BI_S64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1SB_Z_P_BI_S64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1988) = {
    SEE = 1988;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1SB_Z_P_BI_S64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1SB_Z_P_BI_S32 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1SB_Z_P_BI_S32 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1SB_Z_P_BI_S32 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1SB_Z_P_BI_S32 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1SB_Z_P_BI_S32(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1SB_Z_P_BI_S32(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1SB_Z_P_BI_S32(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1SB_Z_P_BI_S32(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1SB_Z_P_BI_S32(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1989) = {
    SEE = 1989;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1SB_Z_P_BI_S32(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1SB_Z_P_BI_S16 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1SB_Z_P_BI_S16 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1SB_Z_P_BI_S16 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1SB_Z_P_BI_S16 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1SB_Z_P_BI_S16(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1SB_Z_P_BI_S16(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1SB_Z_P_BI_S16(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1SB_Z_P_BI_S16(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1SB_Z_P_BI_S16(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1990) = {
    SEE = 1990;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1SB_Z_P_BI_S16(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNF1D_Z_P_BI_U64 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDNF1D_Z_P_BI_U64 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVENF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            (data, fault) = MemNF_read(addr, mbytes, accdesc)
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNF1D_Z_P_BI_U64 : (bits(4), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNF1D_Z_P_BI_U64 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNF1D_Z_P_BI_U64(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDNF1D_Z_P_BI_U64(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDNF1D_Z_P_BI_U64(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDNF1D_Z_P_BI_U64(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDNF1D_Z_P_BI_U64(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1991) = {
    SEE = 1991;
    let dtype = Slice(__opcode, 21, 4);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNF1D_Z_P_BI_U64(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BI_U128 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BI_U128 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BI_U128 : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BI_U128 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1W_Z_P_BI_U128(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BI_U128(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BI_U128(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BI_U128(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BI_U128(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1992) = {
    SEE = 1992;
    let dtype = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BI_U128(dtype, imm4, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BI_U128 : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BI_U128 (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BI_U128 : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BI_U128 (dtype, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 64;
    let is_unsigned : bool = true;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1D_Z_P_BI_U128(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BI_U128(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BI_U128(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BI_U128(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BI_U128(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1993) = {
    SEE = 1993;
    let dtype = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BI_U128(dtype, imm4, Pg, Rn, Zt)
}

val execute_LDNT1B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LDNT1B_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1B_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LDNT1B_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LDNT1B_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LDNT1B_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LDNT1B_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1994) = {
    SEE = 1994;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LDNT1H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LDNT1H_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1H_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LDNT1H_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LDNT1H_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LDNT1H_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LDNT1H_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1995) = {
    SEE = 1995;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LDNT1W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LDNT1W_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1W_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LDNT1W_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LDNT1W_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LDNT1W_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LDNT1W_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1996) = {
    SEE = 1996;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LDNT1D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LDNT1D_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits('VL) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1D_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LDNT1D_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LDNT1D_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LDNT1D_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LDNT1D_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1997) = {
    SEE = 1997;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD2B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD2B_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD2B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2B_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD2B_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD2B_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD2B_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD2B_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1998) = {
    SEE = 1998;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD2H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD2H_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD2H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2H_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD2H_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD2H_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD2H_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD2H_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 1999) = {
    SEE = 1999;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD2W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD2W_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD2W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2W_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD2W_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD2W_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD2W_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD2W_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2000) = {
    SEE = 2000;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD2D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD2D_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD2D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2D_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD2D_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD2D_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD2D_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD2D_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2001) = {
    SEE = 2001;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD3B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD3B_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD3B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3B_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD3B_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD3B_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD3B_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD3B_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2002) = {
    SEE = 2002;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD3H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD3H_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD3H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3H_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD3H_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD3H_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD3H_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD3H_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2003) = {
    SEE = 2003;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD3W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD3W_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD3W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3W_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD3W_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD3W_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD3W_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD3W_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2004) = {
    SEE = 2004;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD3D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD3D_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD3D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3D_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD3D_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD3D_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD3D_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD3D_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2005) = {
    SEE = 2005;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD4B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD4B_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD4B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4B_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD4B_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD4B_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD4B_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD4B_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2006) = {
    SEE = 2006;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD4H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD4H_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD4H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4H_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD4H_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD4H_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD4H_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD4H_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2007) = {
    SEE = 2007;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD4W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD4W_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD4W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4W_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD4W_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD4W_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD4W_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD4W_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2008) = {
    SEE = 2008;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD4D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD4D_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD4D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4D_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD4D_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD4D_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD4D_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD4D_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2009) = {
    SEE = 2009;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_LD2Q_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD2Q_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD2Q_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD2Q_Z_P_BI_Contiguous (num, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_LD2Q_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD2Q_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD2Q_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD2Q_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD2Q_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2010) = {
    SEE = 2010;
    let num = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD2Q_Z_P_BI_Contiguous(num, imm4, Pg, Rn, Zt)
}

val execute_LD3Q_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD3Q_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD3Q_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD3Q_Z_P_BI_Contiguous (num, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_LD3Q_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD3Q_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD3Q_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD3Q_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD3Q_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2011) = {
    SEE = 2011;
    let num = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD3Q_Z_P_BI_Contiguous(num, imm4, Pg, Rn, Zt)
}

val execute_LD4Q_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD4Q_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(MOD(t + r, 32), VL) = values_name[r]
    }
}

val decode_LD4Q_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD4Q_Z_P_BI_Contiguous (num, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_LD4Q_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD4Q_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD4Q_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD4Q_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD4Q_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2012) = {
    SEE = 2012;
    let num = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD4Q_Z_P_BI_Contiguous(num, imm4, Pg, Rn, Zt)
}

val execute_LD1RQB_Z_P_BI_U8 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1RQB_Z_P_BI_U8 (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + offset * 16 + e * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQB_Z_P_BI_U8 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQB_Z_P_BI_U8 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1RQB_Z_P_BI_U8(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1RQB_Z_P_BI_U8(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1RQB_Z_P_BI_U8(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1RQB_Z_P_BI_U8(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1RQB_Z_P_BI_U8(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2013) = {
    SEE = 2013;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQB_Z_P_BI_U8(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1RQH_Z_P_BI_U16 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1RQH_Z_P_BI_U16 (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + offset * 16 + e * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQH_Z_P_BI_U16 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQH_Z_P_BI_U16 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1RQH_Z_P_BI_U16(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1RQH_Z_P_BI_U16(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1RQH_Z_P_BI_U16(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1RQH_Z_P_BI_U16(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1RQH_Z_P_BI_U16(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2014) = {
    SEE = 2014;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQH_Z_P_BI_U16(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1RQW_Z_P_BI_U32 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1RQW_Z_P_BI_U32 (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + offset * 16 + e * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQW_Z_P_BI_U32 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQW_Z_P_BI_U32 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1RQW_Z_P_BI_U32(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1RQW_Z_P_BI_U32(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1RQW_Z_P_BI_U32(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1RQW_Z_P_BI_U32(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1RQW_Z_P_BI_U32(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2015) = {
    SEE = 2015;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQW_Z_P_BI_U32(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1RQD_Z_P_BI_U64 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1RQD_Z_P_BI_U64 (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(128, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(128) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + offset * 16 + e * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = Replicate(result, DIV(VL, 128))
}

val decode_LD1RQD_Z_P_BI_U64 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1RQD_Z_P_BI_U64 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1RQD_Z_P_BI_U64(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1RQD_Z_P_BI_U64(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1RQD_Z_P_BI_U64(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1RQD_Z_P_BI_U64(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1RQD_Z_P_BI_U64(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2016) = {
    SEE = 2016;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1RQD_Z_P_BI_U64(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1ROB_Z_P_BI_U8 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1ROB_Z_P_BI_U8 (VL, esize, g, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROB_Z_P_BI_U8 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROB_Z_P_BI_U8 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1ROB_Z_P_BI_U8(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1ROB_Z_P_BI_U8(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1ROB_Z_P_BI_U8(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1ROB_Z_P_BI_U8(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1ROB_Z_P_BI_U8(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2017) = {
    SEE = 2017;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROB_Z_P_BI_U8(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1ROH_Z_P_BI_U16 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1ROH_Z_P_BI_U16 (VL, esize, g, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROH_Z_P_BI_U16 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROH_Z_P_BI_U16 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1ROH_Z_P_BI_U16(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1ROH_Z_P_BI_U16(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1ROH_Z_P_BI_U16(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1ROH_Z_P_BI_U16(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1ROH_Z_P_BI_U16(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2018) = {
    SEE = 2018;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROH_Z_P_BI_U16(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1ROW_Z_P_BI_U32 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1ROW_Z_P_BI_U32 (VL, esize, g, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROW_Z_P_BI_U32 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROW_Z_P_BI_U32 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1ROW_Z_P_BI_U32(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1ROW_Z_P_BI_U32(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1ROW_Z_P_BI_U32(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1ROW_Z_P_BI_U32(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1ROW_Z_P_BI_U32(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2019) = {
    SEE = 2019;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROW_Z_P_BI_U32(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1ROD_Z_P_BI_U64 : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_LD1ROD_Z_P_BI_U64 (VL, esize, g, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    if VL < 256 then {
        throw(Error_Undefined())
    };
    let 'elements = DIV(256, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    result : bits(256) = undefined;
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            result = Elem_set(result, e, esize, Mem_read(addr, mbytes, accdesc))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = ZeroExtend(Replicate(result, DIV(VL, 256)), VL)
}

val decode_LD1ROD_Z_P_BI_U64 : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_LD1ROD_Z_P_BI_U64 (msz, ssz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) | not_bool(HaveSVEFP64MatMulExt()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1ROD_Z_P_BI_U64(128, esize, g, n, offset, t)
      },
      256 => {
          execute_LD1ROD_Z_P_BI_U64(256, esize, g, n, offset, t)
      },
      512 => {
          execute_LD1ROD_Z_P_BI_U64(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_LD1ROD_Z_P_BI_U64(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_LD1ROD_Z_P_BI_U64(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2020) = {
    SEE = 2020;
    let msz = Slice(__opcode, 23, 2);
    let ssz = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1ROD_Z_P_BI_U64(msz, ssz, imm4, Pg, Rn, Zt)
}

val execute_LD1B_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1B_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2021) = {
    SEE = 2021;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SB_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2022) = {
    SEE = 2022;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1B_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1B_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2023) = {
    SEE = 2023;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SB_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2024) = {
    SEE = 2024;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1H_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2025) = {
    SEE = 2025;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2026) = {
    SEE = 2026;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2027) = {
    SEE = 2027;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2028) = {
    SEE = 2028;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1W_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2029) = {
    SEE = 2029;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SW_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SW_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SW_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SW_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SW_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SW_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SW_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SW_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SW_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2030) = {
    SEE = 2030;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SW_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2031) = {
    SEE = 2031;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SW_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SW_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SW_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SW_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2032) = {
    SEE = 2032;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SW_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1D_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2033) = {
    SEE = 2033;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1D_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1D_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1D_Z_P_BZ_D_x32_unscaled : (bits(2), bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1D_Z_P_BZ_D_x32_unscaled (msz, xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1D_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1D_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1D_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1D_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1D_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2034) = {
    SEE = 2034;
    let msz = Slice(__opcode, 23, 2);
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1D_Z_P_BZ_D_x32_unscaled(msz, xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_PRFB_I_P_BZ_D_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFB_I_P_BZ_D_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFB_I_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFB_I_P_BZ_D_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_PRFB_I_P_BZ_D_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFB_I_P_BZ_D_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFB_I_P_BZ_D_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFB_I_P_BZ_D_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFB_I_P_BZ_D_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2035) = {
    SEE = 2035;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFB_I_P_BZ_D_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_PRFH_I_P_BZ_D_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFH_I_P_BZ_D_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFH_I_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFH_I_P_BZ_D_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_PRFH_I_P_BZ_D_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFH_I_P_BZ_D_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFH_I_P_BZ_D_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFH_I_P_BZ_D_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFH_I_P_BZ_D_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2036) = {
    SEE = 2036;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFH_I_P_BZ_D_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_PRFW_I_P_BZ_D_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFW_I_P_BZ_D_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFW_I_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFW_I_P_BZ_D_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_PRFW_I_P_BZ_D_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFW_I_P_BZ_D_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFW_I_P_BZ_D_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFW_I_P_BZ_D_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFW_I_P_BZ_D_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2037) = {
    SEE = 2037;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFW_I_P_BZ_D_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_PRFD_I_P_BZ_D_x32_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 3 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFD_I_P_BZ_D_x32_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFD_I_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFD_I_P_BZ_D_x32_scaled (xs, Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 3;
    match VL {
      128 => {
          execute_PRFD_I_P_BZ_D_x32_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFD_I_P_BZ_D_x32_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFD_I_P_BZ_D_x32_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFD_I_P_BZ_D_x32_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFD_I_P_BZ_D_x32_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2038) = {
    SEE = 2038;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFD_I_P_BZ_D_x32_scaled(xs, Zm, msz, Pg, Rn, prfop)
}

val execute_LD1H_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LD1H_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2039) = {
    SEE = 2039;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2040) = {
    SEE = 2040;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2041) = {
    SEE = 2041;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2042) = {
    SEE = 2042;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LD1W_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2043) = {
    SEE = 2043;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SW_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SW_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SW_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SW_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LD1SW_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SW_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SW_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SW_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SW_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2044) = {
    SEE = 2044;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SW_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2045) = {
    SEE = 2045;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SW_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SW_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SW_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SW_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SW_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, _, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2046) = {
    SEE = 2046;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SW_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 3 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 3;
    match VL {
      128 => {
          execute_LD1D_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2047) = {
    SEE = 2047;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1D_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 3 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1D_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1D_Z_P_BZ_D_x32_scaled : (bits(1), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1D_Z_P_BZ_D_x32_scaled (xs, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 32;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 3;
    match VL {
      128 => {
          execute_LDFF1D_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1D_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1D_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1D_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1D_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2048) = {
    SEE = 2048;
    let xs = Slice(__opcode, 22, 1);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1D_Z_P_BZ_D_x32_scaled(xs, Zm, U, ff, Pg, Rn, Zt)
}

val execute_PRFB_I_P_AI_D : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 0 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFB_I_P_AI_D (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFB_I_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFB_I_P_AI_D (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 0;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFB_I_P_AI_D(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFB_I_P_AI_D(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFB_I_P_AI_D(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFB_I_P_AI_D(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFB_I_P_AI_D(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2049) = {
    SEE = 2049;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFB_I_P_AI_D(msz, imm5, Pg, Zn, prfop)
}

val execute_PRFH_I_P_AI_D : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 1 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFH_I_P_AI_D (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFH_I_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFH_I_P_AI_D (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 1;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFH_I_P_AI_D(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFH_I_P_AI_D(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFH_I_P_AI_D(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFH_I_P_AI_D(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFH_I_P_AI_D(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2050) = {
    SEE = 2050;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFH_I_P_AI_D(msz, imm5, Pg, Zn, prfop)
}

val execute_PRFW_I_P_AI_D : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 2 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFW_I_P_AI_D (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFW_I_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFW_I_P_AI_D (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 2;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFW_I_P_AI_D(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFW_I_P_AI_D(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFW_I_P_AI_D(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFW_I_P_AI_D(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFW_I_P_AI_D(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2051) = {
    SEE = 2051;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFW_I_P_AI_D(msz, imm5, Pg, Zn, prfop)
}

val execute_PRFD_I_P_AI_D : forall 'VL 'esize 'g 'level 'n 'offset 'scale ('stream : Bool),
  ('scale == 3 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('n), int('offset), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFD_I_P_AI_D (VL, esize, g, level, n, offset, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + (offset << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFD_I_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(4)) -> unit

function decode_PRFD_I_P_AI_D (msz, imm5, Pg, Zn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Zn);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'scale = 3;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_PRFD_I_P_AI_D(128, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFD_I_P_AI_D(256, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFD_I_P_AI_D(512, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFD_I_P_AI_D(1024, esize, g, level, n, offset, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFD_I_P_AI_D(2048, esize, g, level, n, offset, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2052) = {
    SEE = 2052;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFD_I_P_AI_D(msz, imm5, Pg, Zn, prfop)
}

val execute_LD1B_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1B_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2053) = {
    SEE = 2053;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1SB_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1SB_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2054) = {
    SEE = 2054;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1B_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1B_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2055) = {
    SEE = 2055;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1SB_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2056) = {
    SEE = 2056;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1H_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1H_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2057) = {
    SEE = 2057;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1SH_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1SH_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2058) = {
    SEE = 2058;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1H_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1H_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2059) = {
    SEE = 2059;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1SH_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2060) = {
    SEE = 2060;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1W_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1W_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2061) = {
    SEE = 2061;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1SW_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1SW_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SW_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SW_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1SW_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1SW_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1SW_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1SW_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1SW_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2062) = {
    SEE = 2062;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SW_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1W_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1W_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2063) = {
    SEE = 2063;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1SW_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SW_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SW_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SW_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1SW_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SW_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SW_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SW_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SW_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2064) = {
    SEE = 2064;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SW_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1D_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LD1D_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2065) = {
    SEE = 2065;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LDFF1D_Z_P_AI_D : forall 'VL 'esize 'g ('is_unsigned : Bool) 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1D_Z_P_AI_D (VL, esize, g, msize, n, offset, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL)
    };
    let base = base;
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1D_Z_P_AI_D : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1D_Z_P_AI_D (msz, imm5, U, ff, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_LDFF1D_Z_P_AI_D(128, esize, g, msize, n, offset, t, is_unsigned)
      },
      256 => {
          execute_LDFF1D_Z_P_AI_D(256, esize, g, msize, n, offset, t, is_unsigned)
      },
      512 => {
          execute_LDFF1D_Z_P_AI_D(512, esize, g, msize, n, offset, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1D_Z_P_AI_D(1024, esize, g, msize, n, offset, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1D_Z_P_AI_D(2048, esize, g, msize, n, offset, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2066) = {
    SEE = 2066;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1D_Z_P_AI_D(msz, imm5, U, ff, Pg, Zn, Zt)
}

val execute_LD1B_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1B_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1B_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1B_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1B_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1B_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1B_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1B_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1B_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2067) = {
    SEE = 2067;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1B_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SB_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SB_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SB_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SB_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SB_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SB_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SB_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SB_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SB_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2068) = {
    SEE = 2068;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SB_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1B_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1B_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1B_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1B_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1B_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1B_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1B_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1B_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1B_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2069) = {
    SEE = 2069;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1B_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SB_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SB_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SB_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SB_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SB_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SB_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SB_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SB_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SB_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2070) = {
    SEE = 2070;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SB_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1H_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1H_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2071) = {
    SEE = 2071;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2072) = {
    SEE = 2072;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2073) = {
    SEE = 2073;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2074) = {
    SEE = 2074;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1W_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2075) = {
    SEE = 2075;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SW_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SW_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SW_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SW_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1SW_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SW_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SW_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SW_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SW_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2076) = {
    SEE = 2076;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SW_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2077) = {
    SEE = 2077;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SW_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SW_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SW_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SW_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1SW_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SW_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SW_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SW_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SW_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2078) = {
    SEE = 2078;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SW_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LD1D_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2079) = {
    SEE = 2079;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1D_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1D_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1D_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1D_Z_P_BZ_D_64_unscaled (msz, Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_LDFF1D_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1D_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1D_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1D_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1D_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2080) = {
    SEE = 2080;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1D_Z_P_BZ_D_64_unscaled(msz, Zm, U, ff, Pg, Rn, Zt)
}

val execute_PRFB_I_P_BZ_D_64_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFB_I_P_BZ_D_64_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFB_I_P_BZ_D_64_scaled : (bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFB_I_P_BZ_D_64_scaled (Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_PRFB_I_P_BZ_D_64_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFB_I_P_BZ_D_64_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFB_I_P_BZ_D_64_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFB_I_P_BZ_D_64_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFB_I_P_BZ_D_64_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2081) = {
    SEE = 2081;
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFB_I_P_BZ_D_64_scaled(Zm, msz, Pg, Rn, prfop)
}

val execute_PRFH_I_P_BZ_D_64_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 1 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFH_I_P_BZ_D_64_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFH_I_P_BZ_D_64_scaled : (bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFH_I_P_BZ_D_64_scaled (Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 1;
    match VL {
      128 => {
          execute_PRFH_I_P_BZ_D_64_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFH_I_P_BZ_D_64_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFH_I_P_BZ_D_64_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFH_I_P_BZ_D_64_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFH_I_P_BZ_D_64_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2082) = {
    SEE = 2082;
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFH_I_P_BZ_D_64_scaled(Zm, msz, Pg, Rn, prfop)
}

val execute_PRFW_I_P_BZ_D_64_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 2 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFW_I_P_BZ_D_64_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFW_I_P_BZ_D_64_scaled : (bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFW_I_P_BZ_D_64_scaled (Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 2;
    match VL {
      128 => {
          execute_PRFW_I_P_BZ_D_64_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFW_I_P_BZ_D_64_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFW_I_P_BZ_D_64_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFW_I_P_BZ_D_64_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFW_I_P_BZ_D_64_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2083) = {
    SEE = 2083;
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFW_I_P_BZ_D_64_scaled(Zm, msz, Pg, Rn, prfop)
}

val execute_PRFD_I_P_BZ_D_64_scaled : forall 'VL 'esize 'g 'level 'm 'n 'offs_size ('offs_unsigned : Bool) 'scale ('stream : Bool),
  ('scale == 3 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'level in {0, 1, 2, 3} & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('level), int('m), int('n), int('offs_size), bool('offs_unsigned), PrefetchHint, int('scale), bool('stream)) -> unit

function execute_PRFD_I_P_BZ_D_64_scaled (VL, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    if AnyActiveElement(mask, esize) then {
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Hint_Prefetch(addr, pref_hint, level, stream)
        };
        ()
    }
}

val decode_PRFD_I_P_BZ_D_64_scaled : (bits(5), bits(2), bits(3), bits(5), bits(4)) -> unit

function decode_PRFD_I_P_BZ_D_64_scaled (Zm, msz, Pg, Rn, prfop) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 'esize = 64;
    let 'g = UInt(Pg);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'level = UInt(prfop[2 .. 1]);
    let stream : bool = [prfop[0]] == 0b1;
    let pref_hint : PrefetchHint = if [prfop[3]] == 0b0 then Prefetch_READ else
      Prefetch_WRITE;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 3;
    match VL {
      128 => {
          execute_PRFD_I_P_BZ_D_64_scaled(128, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      256 => {
          execute_PRFD_I_P_BZ_D_64_scaled(256, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      512 => {
          execute_PRFD_I_P_BZ_D_64_scaled(512, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      1024 => {
          execute_PRFD_I_P_BZ_D_64_scaled(1024, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      },
      2048 => {
          execute_PRFD_I_P_BZ_D_64_scaled(2048, esize, g, level, m, n, offs_size, offs_unsigned, pref_hint, scale, stream)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2084) = {
    SEE = 2084;
    let Zm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let prfop = Slice(__opcode, 0, 4);
    decode_PRFD_I_P_BZ_D_64_scaled(Zm, msz, Pg, Rn, prfop)
}

val execute_LD1H_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1H_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1H_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1H_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LD1H_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1H_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1H_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1H_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1H_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2085) = {
    SEE = 2085;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1H_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SH_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SH_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SH_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SH_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LD1SH_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SH_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SH_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SH_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SH_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2086) = {
    SEE = 2086;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SH_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1H_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1H_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1H_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1H_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LDFF1H_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1H_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1H_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1H_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1H_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2087) = {
    SEE = 2087;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1H_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SH_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SH_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SH_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SH_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 1;
    match VL {
      128 => {
          execute_LDFF1SH_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SH_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SH_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SH_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SH_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2088) = {
    SEE = 2088;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SH_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1W_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1W_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1W_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1W_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LD1W_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1W_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1W_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1W_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1W_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2089) = {
    SEE = 2089;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1W_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1SW_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1SW_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1SW_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1SW_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LD1SW_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1SW_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1SW_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1SW_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1SW_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2090) = {
    SEE = 2090;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1SW_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1W_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1W_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1W_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1W_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LDFF1W_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1W_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1W_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1W_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1W_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2091) = {
    SEE = 2091;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1W_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1SW_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1SW_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1SW_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1SW_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let is_unsigned : bool = false;
    let offs_unsigned : bool = true;
    let 'scale = 2;
    match VL {
      128 => {
          execute_LDFF1SW_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1SW_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1SW_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1SW_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1SW_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2092) = {
    SEE = 2092;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1SW_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LD1D_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 3 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LD1D_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1D_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LD1D_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 3;
    match VL {
      128 => {
          execute_LD1D_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LD1D_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LD1D_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LD1D_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LD1D_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2093) = {
    SEE = 2093;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1D_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_LDFF1D_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 3 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t), bool('is_unsigned)) -> unit

function execute_LDFF1D_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits(64) = undefined;
    offset : bits('VL) = undefined;
    result : bits('VL) = undefined;
    let orig : bits('VL) = Z_read(t, VL);
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    fault : bool = false;
    faulted : bool = false;
    unknown : bool = false;
    let contiguous : bool = false;
    let tagchecked : bool = true;
    accdesc : AccessDescriptor = CreateAccDescSVEFF(contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL)
    };
    assert(accdesc.first);
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            if accdesc.first then {
                data = Mem_read(addr, mbytes, accdesc);
                accdesc.first = false
            } else {
                (data, fault) = MemNF_read(addr, mbytes, accdesc)
            }
        } else {
            (data, fault) = (Zeros(msize), false)
        };
        faulted = faulted | fault;
        if faulted then {
            ElemFFR_set(e, esize) = 0b0
        };
        unknown = unknown | ElemFFR_read(e, esize) == 0b0;
        if unknown then {
            if not_bool(fault) & ConstrainUnpredictableBool(Unpredictable_SVELDNFDATA) then {
                result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
            } else if ConstrainUnpredictableBool(Unpredictable_SVELDNFZERO) then {
                result = Elem_set(result, e, esize, Zeros(esize))
            } else {
                result = Elem_set(result, e, esize, Elem_read(orig, e, esize))
            }
        } else {
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDFF1D_Z_P_BZ_D_64_scaled : (bits(5), bits(1), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDFF1D_Z_P_BZ_D_64_scaled (Zm, U, ff, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 64;
    let is_unsigned : bool = true;
    let offs_unsigned : bool = true;
    let 'scale = 3;
    match VL {
      128 => {
          execute_LDFF1D_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      256 => {
          execute_LDFF1D_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      512 => {
          execute_LDFF1D_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      1024 => {
          execute_LDFF1D_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      },
      2048 => {
          execute_LDFF1D_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2094) = {
    SEE = 2094;
    let Zm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let ff = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDFF1D_Z_P_BZ_D_64_scaled(Zm, U, ff, Pg, Rn, Zt)
}

val execute_ST1B_Z_P_BR__ : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_ST1B_Z_P_BR__ (VL, esize, g, m, msize, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1B_Z_P_BR__ : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1B_Z_P_BR__ (size, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = (8 << UInt(size));
    let 'msize = 8;
    match VL {
      128 => {
          execute_ST1B_Z_P_BR__(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_ST1B_Z_P_BR__(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_ST1B_Z_P_BR__(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_ST1B_Z_P_BR__(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_ST1B_Z_P_BR__(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2095) = {
    SEE = 2095;
    let size = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1B_Z_P_BR__(size, Rm, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BR__ : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_ST1H_Z_P_BR__ (VL, esize, g, m, msize, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            assert(constraint((0 <= 'msize - 1 & 'msize - 1 < 'esize)));
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BR__ : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BR__ (size, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = (8 << UInt(size));
    let 'msize = 16;
    match VL {
      128 => {
          execute_ST1H_Z_P_BR__(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_ST1H_Z_P_BR__(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_ST1H_Z_P_BR__(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_ST1H_Z_P_BR__(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_ST1H_Z_P_BR__(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2096) = {
    SEE = 2096;
    let size = Slice(__opcode, 21, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BR__(size, Rm, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BR__ : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_ST1W_Z_P_BR__ (VL, esize, g, m, msize, n, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BR__ : (bits(1), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BR__ (sz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = (32 << UInt(sz));
    let 'msize = 32;
    match VL {
      128 => {
          execute_ST1W_Z_P_BR__(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_ST1W_Z_P_BR__(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_ST1W_Z_P_BR__(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_ST1W_Z_P_BR__(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_ST1W_Z_P_BR__(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2097) = {
    SEE = 2097;
    let sz = Slice(__opcode, 21, 1);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BR__(sz, Rm, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BR__ : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_ST1D_Z_P_BR__ (VL, esize, g, m, msize, n, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BR__ : (bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BR__ (Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    match VL {
      128 => {
          execute_ST1D_Z_P_BR__(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_ST1D_Z_P_BR__(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_ST1D_Z_P_BR__(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_ST1D_Z_P_BR__(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_ST1D_Z_P_BR__(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2098) = {
    SEE = 2098;
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BR__(Rm, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BR_U128 : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_ST1W_Z_P_BR_U128 (VL, esize, g, m, msize, n, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BR_U128 : (bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BR_U128 (Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 32;
    match VL {
      128 => {
          execute_ST1W_Z_P_BR_U128(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_ST1W_Z_P_BR_U128(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_ST1W_Z_P_BR_U128(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_ST1W_Z_P_BR_U128(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_ST1W_Z_P_BR_U128(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2099) = {
    SEE = 2099;
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BR_U128(Rm, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BR_U128 : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_ST1D_Z_P_BR_U128 (VL, esize, g, m, msize, n, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BR_U128 : (bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BR_U128 (Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 64;
    match VL {
      128 => {
          execute_ST1D_Z_P_BR_U128(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_ST1D_Z_P_BR_U128(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_ST1D_Z_P_BR_U128(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_ST1D_Z_P_BR_U128(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_ST1D_Z_P_BR_U128(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2100) = {
    SEE = 2100;
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BR_U128(Rm, Pg, Rn, Zt)
}

val execute_STR_P_BI__ : forall 'VL 'imm 'n 't,
  (0 <= 't & 't <= 15 & 0 <= 'n & 'n <= 31 & is_VL('VL)).
  (int('VL), int('imm), int('n), int('t)) -> unit

function execute_STR_P_BI__ (VL, imm, n, t) = {
    CheckSVEEnabled();
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(PL, 8);
    base : bits(64) = undefined;
    offset : int = imm * elements;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('PL) = P_read(t, PL);
    let aligned : bool = IsAligned__1(base + offset, 2);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base + offset, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'offset = offset in
          {
              AArch64_MemSingle_set(base + offset, 1, accdesc, aligned) = Elem_read(src, e, 8)
          };
        offset = offset + 1
    }
}

val decode_STR_P_BI__ : (bits(6), bits(3), bits(5), bits(4)) -> unit

function decode_STR_P_BI__ (imm9h, imm9l, Rn, Pt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Pt);
    let 'n = UInt(Rn);
    let 'imm = SInt(imm9h @ imm9l);
    match VL {
      128 => {
          execute_STR_P_BI__(128, imm, n, t)
      },
      256 => {
          execute_STR_P_BI__(256, imm, n, t)
      },
      512 => {
          execute_STR_P_BI__(512, imm, n, t)
      },
      1024 => {
          execute_STR_P_BI__(1024, imm, n, t)
      },
      2048 => {
          execute_STR_P_BI__(2048, imm, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, bitzero, _, _, _, _] as __opcode)) if SEE < 2101) = {
    SEE = 2101;
    let imm9h = Slice(__opcode, 16, 6);
    let imm9l = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Pt = Slice(__opcode, 0, 4);
    decode_STR_P_BI__(imm9h, imm9l, Rn, Pt)
}

val execute_STR_Z_BI__ : forall 'VL 'imm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & is_VL('VL)).
  (int('VL), int('imm), int('n), int('t)) -> unit

function execute_STR_Z_BI__ (VL, imm, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'elements = DIV(VL, 8);
    base : bits(64) = undefined;
    offset : int = imm * elements;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if n == 31 then {
        CheckSPAlignment();
        base = SP_read()
    } else {
        base = X_read(n, 64)
    };
    let src : bits('VL) = Z_read(t, VL);
    let aligned : bool = IsAligned__1(base + offset, 16);
    if not_bool(aligned) & AlignmentEnforced() then {
        AArch64_Abort(base + offset, AlignmentFault(accdesc))
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        let 'offset = offset in
          {
              AArch64_MemSingle_set(base + offset, 1, accdesc, aligned) = Elem_read(src, e, 8)
          };
        offset = offset + 1
    }
}

val decode_STR_Z_BI__ : (bits(6), bits(3), bits(5), bits(5)) -> unit

function decode_STR_Z_BI__ (imm9h, imm9l, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'imm = SInt(imm9h @ imm9l);
    match VL {
      128 => {
          execute_STR_Z_BI__(128, imm, n, t)
      },
      256 => {
          execute_STR_Z_BI__(256, imm, n, t)
      },
      512 => {
          execute_STR_Z_BI__(512, imm, n, t)
      },
      1024 => {
          execute_STR_Z_BI__(1024, imm, n, t)
      },
      2048 => {
          execute_STR_Z_BI__(2048, imm, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, _, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2102) = {
    SEE = 2102;
    let imm9h = Slice(__opcode, 16, 6);
    let imm9l = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STR_Z_BI__(imm9h, imm9l, Rn, Zt)
}

val execute_STNT1B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_STNT1B_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    match VL {
      128 => {
          execute_STNT1B_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_STNT1B_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_STNT1B_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_STNT1B_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_STNT1B_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2103) = {
    SEE = 2103;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_STNT1H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_STNT1H_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    match VL {
      128 => {
          execute_STNT1H_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_STNT1H_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_STNT1H_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_STNT1H_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_STNT1H_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2104) = {
    SEE = 2104;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_STNT1W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_STNT1W_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    match VL {
      128 => {
          execute_STNT1W_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_STNT1W_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_STNT1W_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_STNT1W_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_STNT1W_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2105) = {
    SEE = 2105;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_STNT1D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('t)) -> unit

function execute_STNT1D_Z_P_BR_Contiguous (VL, esize, g, m, n, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = base + (UInt(offset) + e) * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    match VL {
      128 => {
          execute_STNT1D_Z_P_BR_Contiguous(128, esize, g, m, n, t)
      },
      256 => {
          execute_STNT1D_Z_P_BR_Contiguous(256, esize, g, m, n, t)
      },
      512 => {
          execute_STNT1D_Z_P_BR_Contiguous(512, esize, g, m, n, t)
      },
      1024 => {
          execute_STNT1D_Z_P_BR_Contiguous(1024, esize, g, m, n, t)
      },
      2048 => {
          execute_STNT1D_Z_P_BR_Contiguous(2048, esize, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2106) = {
    SEE = 2106;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST2B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST2B_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST2B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2B_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST2B_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST2B_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST2B_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST2B_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2107) = {
    SEE = 2107;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST2H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST2H_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST2H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2H_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST2H_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST2H_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST2H_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST2H_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2108) = {
    SEE = 2108;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST2W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST2W_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST2W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2W_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST2W_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST2W_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST2W_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST2W_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2109) = {
    SEE = 2109;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST2D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST2D_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST2D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2D_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST2D_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST2D_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST2D_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST2D_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2110) = {
    SEE = 2110;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST3B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST3B_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST3B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3B_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST3B_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST3B_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST3B_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST3B_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2111) = {
    SEE = 2111;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST3H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST3H_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST3H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3H_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST3H_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST3H_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST3H_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST3H_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2112) = {
    SEE = 2112;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST3W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST3W_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST3W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3W_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST3W_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST3W_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST3W_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST3W_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2113) = {
    SEE = 2113;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST3D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST3D_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST3D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3D_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST3D_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST3D_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST3D_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST3D_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2114) = {
    SEE = 2114;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST4B_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST4B_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4B_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST4B_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4B_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST4B_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST4B_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST4B_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST4B_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2115) = {
    SEE = 2115;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4B_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST4H_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST4H_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4H_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST4H_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4H_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST4H_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST4H_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST4H_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST4H_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2116) = {
    SEE = 2116;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4H_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST4W_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST4W_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4W_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST4W_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4W_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST4W_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST4W_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST4W_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST4W_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2117) = {
    SEE = 2117;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4W_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST4D_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST4D_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4D_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST4D_Z_P_BR_Contiguous (msz, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4D_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST4D_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST4D_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST4D_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST4D_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2118) = {
    SEE = 2118;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4D_Z_P_BR_Contiguous(msz, Rm, Pg, Rn, Zt)
}

val execute_ST2Q_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST2Q_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2Q_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST2Q_Z_P_BR_Contiguous (num, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2Q_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST2Q_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST2Q_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST2Q_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST2Q_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2119) = {
    SEE = 2119;
    let num = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2Q_Z_P_BR_Contiguous(num, Rm, Pg, Rn, Zt)
}

val execute_ST3Q_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST3Q_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3Q_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST3Q_Z_P_BR_Contiguous (num, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3Q_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST3Q_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST3Q_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST3Q_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST3Q_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2120) = {
    SEE = 2120;
    let num = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3Q_Z_P_BR_Contiguous(num, Rm, Pg, Rn, Zt)
}

val execute_ST4Q_Z_P_BR_Contiguous : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST4Q_Z_P_BR_Contiguous (VL, esize, g, m, n, nreg, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = UInt(offset) + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4Q_Z_P_BR_Contiguous : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST4Q_Z_P_BR_Contiguous (num, Rm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    if Rm == 0b11111 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4Q_Z_P_BR_Contiguous(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST4Q_Z_P_BR_Contiguous(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST4Q_Z_P_BR_Contiguous(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST4Q_Z_P_BR_Contiguous(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST4Q_Z_P_BR_Contiguous(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2121) = {
    SEE = 2121;
    let num = Slice(__opcode, 22, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4Q_Z_P_BR_Contiguous(num, Rm, Pg, Rn, Zt)
}

val execute_ST1B_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1B_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1B_Z_P_BZ_D_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1B_Z_P_BZ_D_x32_unscaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1B_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1B_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1B_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1B_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1B_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2122) = {
    SEE = 2122;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1B_Z_P_BZ_D_x32_unscaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1H_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BZ_D_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BZ_D_x32_unscaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1H_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1H_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1H_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1H_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1H_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2123) = {
    SEE = 2123;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BZ_D_x32_unscaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1W_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BZ_D_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BZ_D_x32_unscaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1W_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1W_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1W_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1W_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1W_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2124) = {
    SEE = 2124;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BZ_D_x32_unscaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BZ_D_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1D_Z_P_BZ_D_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BZ_D_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BZ_D_x32_unscaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1D_Z_P_BZ_D_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1D_Z_P_BZ_D_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1D_Z_P_BZ_D_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1D_Z_P_BZ_D_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1D_Z_P_BZ_D_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2125) = {
    SEE = 2125;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BZ_D_x32_unscaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1B_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1B_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1B_Z_P_BZ_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1B_Z_P_BZ_S_x32_unscaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1B_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1B_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1B_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1B_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1B_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2126) = {
    SEE = 2126;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1B_Z_P_BZ_S_x32_unscaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1H_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BZ_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BZ_S_x32_unscaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1H_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1H_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1H_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1H_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1H_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2127) = {
    SEE = 2127;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BZ_S_x32_unscaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BZ_S_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1W_Z_P_BZ_S_x32_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BZ_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BZ_S_x32_unscaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1W_Z_P_BZ_S_x32_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1W_Z_P_BZ_S_x32_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1W_Z_P_BZ_S_x32_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1W_Z_P_BZ_S_x32_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1W_Z_P_BZ_S_x32_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2128) = {
    SEE = 2128;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BZ_S_x32_unscaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1H_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BZ_D_x32_scaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BZ_D_x32_scaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_ST1H_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1H_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1H_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1H_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1H_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2129) = {
    SEE = 2129;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BZ_D_x32_scaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1W_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BZ_D_x32_scaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BZ_D_x32_scaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_ST1W_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1W_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1W_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1W_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1W_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2130) = {
    SEE = 2130;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BZ_D_x32_scaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BZ_D_x32_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 3 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1D_Z_P_BZ_D_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BZ_D_x32_scaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BZ_D_x32_scaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 3;
    match VL {
      128 => {
          execute_ST1D_Z_P_BZ_D_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1D_Z_P_BZ_D_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1D_Z_P_BZ_D_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1D_Z_P_BZ_D_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1D_Z_P_BZ_D_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2131) = {
    SEE = 2131;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BZ_D_x32_scaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1H_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BZ_S_x32_scaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BZ_S_x32_scaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 1;
    match VL {
      128 => {
          execute_ST1H_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1H_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1H_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1H_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1H_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2132) = {
    SEE = 2132;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BZ_S_x32_scaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BZ_S_x32_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 32 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1W_Z_P_BZ_S_x32_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BZ_S_x32_scaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BZ_S_x32_scaled (msz, Zm, xs, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let 'offs_size = 32;
    let offs_unsigned : bool = xs == 0b0;
    let 'scale = 2;
    match VL {
      128 => {
          execute_ST1W_Z_P_BZ_S_x32_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1W_Z_P_BZ_S_x32_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1W_Z_P_BZ_S_x32_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1W_Z_P_BZ_S_x32_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1W_Z_P_BZ_S_x32_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitone, _, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2133) = {
    SEE = 2133;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let xs = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BZ_S_x32_scaled(msz, Zm, xs, Pg, Rn, Zt)
}

val execute_ST1B_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1B_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1B_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1B_Z_P_BZ_D_64_unscaled (msz, Zm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1B_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1B_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1B_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1B_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1B_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2134) = {
    SEE = 2134;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1B_Z_P_BZ_D_64_unscaled(msz, Zm, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1H_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BZ_D_64_unscaled (msz, Zm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1H_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1H_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1H_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1H_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1H_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2135) = {
    SEE = 2135;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BZ_D_64_unscaled(msz, Zm, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1W_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BZ_D_64_unscaled (msz, Zm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1W_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1W_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1W_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1W_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1W_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2136) = {
    SEE = 2136;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BZ_D_64_unscaled(msz, Zm, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BZ_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 0 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1D_Z_P_BZ_D_64_unscaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BZ_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BZ_D_64_unscaled (msz, Zm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 0;
    match VL {
      128 => {
          execute_ST1D_Z_P_BZ_D_64_unscaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1D_Z_P_BZ_D_64_unscaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1D_Z_P_BZ_D_64_unscaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1D_Z_P_BZ_D_64_unscaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1D_Z_P_BZ_D_64_unscaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2137) = {
    SEE = 2137;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BZ_D_64_unscaled(msz, Zm, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 1 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1H_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BZ_D_64_scaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BZ_D_64_scaled (msz, Zm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 1;
    match VL {
      128 => {
          execute_ST1H_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1H_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1H_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1H_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1H_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2138) = {
    SEE = 2138;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BZ_D_64_scaled(msz, Zm, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 2 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1W_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BZ_D_64_scaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BZ_D_64_scaled (msz, Zm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 2;
    match VL {
      128 => {
          execute_ST1W_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1W_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1W_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1W_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1W_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2139) = {
    SEE = 2139;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BZ_D_64_scaled(msz, Zm, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BZ_D_64_scaled : forall 'VL 'esize 'g 'm 'msize 'n 'offs_size ('offs_unsigned : Bool) 'scale 't,
  (0 <= 't & 't <= 31 & 'scale == 3 & 'offs_size == 64 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('offs_size), bool('offs_unsigned), int('scale), int('t)) -> unit

function execute_ST1D_Z_P_BZ_D_64_scaled (VL, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    offset : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = Z_read(m, VL);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'off = asl_Int(Elem_read(offset, e, esize)[offs_size - 1 .. 0], offs_unsigned);
            let addr : bits(64) = base + (off << scale);
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BZ_D_64_scaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BZ_D_64_scaled (msz, Zm, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'm = UInt(Zm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offs_size = 64;
    let offs_unsigned : bool = true;
    let 'scale = 3;
    match VL {
      128 => {
          execute_ST1D_Z_P_BZ_D_64_scaled(128, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      256 => {
          execute_ST1D_Z_P_BZ_D_64_scaled(256, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      512 => {
          execute_ST1D_Z_P_BZ_D_64_scaled(512, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      1024 => {
          execute_ST1D_Z_P_BZ_D_64_scaled(1024, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      },
      2048 => {
          execute_ST1D_Z_P_BZ_D_64_scaled(2048, esize, g, m, msize, n, offs_size, offs_unsigned, scale, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2140) = {
    SEE = 2140;
    let msz = Slice(__opcode, 23, 2);
    let Zm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BZ_D_64_scaled(msz, Zm, Pg, Rn, Zt)
}

val execute_ST1B_Z_P_AI_D : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1B_Z_P_AI_D (VL, esize, g, msize, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        src = Z_read(t, VL)
    };
    let src = src;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1B_Z_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1B_Z_P_AI_D (msz, imm5, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_ST1B_Z_P_AI_D(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1B_Z_P_AI_D(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1B_Z_P_AI_D(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1B_Z_P_AI_D(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1B_Z_P_AI_D(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2141) = {
    SEE = 2141;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1B_Z_P_AI_D(msz, imm5, Pg, Zn, Zt)
}

val execute_ST1H_Z_P_AI_D : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1H_Z_P_AI_D (VL, esize, g, msize, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        src = Z_read(t, VL)
    };
    let src = src;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_AI_D (msz, imm5, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_ST1H_Z_P_AI_D(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1H_Z_P_AI_D(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1H_Z_P_AI_D(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1H_Z_P_AI_D(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1H_Z_P_AI_D(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2142) = {
    SEE = 2142;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_AI_D(msz, imm5, Pg, Zn, Zt)
}

val execute_ST1W_Z_P_AI_D : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1W_Z_P_AI_D (VL, esize, g, msize, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        src = Z_read(t, VL)
    };
    let src = src;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_AI_D (msz, imm5, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_ST1W_Z_P_AI_D(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1W_Z_P_AI_D(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1W_Z_P_AI_D(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1W_Z_P_AI_D(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1W_Z_P_AI_D(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2143) = {
    SEE = 2143;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_AI_D(msz, imm5, Pg, Zn, Zt)
}

val execute_ST1D_Z_P_AI_D : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1D_Z_P_AI_D (VL, esize, g, msize, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        src = Z_read(t, VL)
    };
    let src = src;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_AI_D : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_AI_D (msz, imm5, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_ST1D_Z_P_AI_D(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1D_Z_P_AI_D(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1D_Z_P_AI_D(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1D_Z_P_AI_D(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1D_Z_P_AI_D(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2144) = {
    SEE = 2144;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_AI_D(msz, imm5, Pg, Zn, Zt)
}

val execute_ST1B_Z_P_AI_S : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1B_Z_P_AI_S (VL, esize, g, msize, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        src = Z_read(t, VL)
    };
    let src = src;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1B_Z_P_AI_S : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1B_Z_P_AI_S (msz, imm5, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_ST1B_Z_P_AI_S(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1B_Z_P_AI_S(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1B_Z_P_AI_S(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1B_Z_P_AI_S(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1B_Z_P_AI_S(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2145) = {
    SEE = 2145;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1B_Z_P_AI_S(msz, imm5, Pg, Zn, Zt)
}

val execute_ST1H_Z_P_AI_S : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1H_Z_P_AI_S (VL, esize, g, msize, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        src = Z_read(t, VL)
    };
    let src = src;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_AI_S : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_AI_S (msz, imm5, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_ST1H_Z_P_AI_S(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1H_Z_P_AI_S(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1H_Z_P_AI_S(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1H_Z_P_AI_S(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1H_Z_P_AI_S(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2146) = {
    SEE = 2146;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_AI_S(msz, imm5, Pg, Zn, Zt)
}

val execute_ST1W_Z_P_AI_S : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'offset & 'offset <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1W_Z_P_AI_S (VL, esize, g, msize, n, offset, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        src = Z_read(t, VL)
    };
    let src = src;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_AI_S : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_AI_S (msz, imm5, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let 'offset = UInt(imm5);
    match VL {
      128 => {
          execute_ST1W_Z_P_AI_S(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1W_Z_P_AI_S(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1W_Z_P_AI_S(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1W_Z_P_AI_S(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1W_Z_P_AI_S(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2147) = {
    SEE = 2147;
    let msz = Slice(__opcode, 23, 2);
    let imm5 = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_AI_S(msz, imm5, Pg, Zn, Zt)
}

val execute_ST1B_Z_P_BI__ : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1B_Z_P_BI__ (VL, esize, g, msize, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1B_Z_P_BI__ : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST1B_Z_P_BI__ (msz, size, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = (8 << UInt(size));
    let 'msize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1B_Z_P_BI__(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1B_Z_P_BI__(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1B_Z_P_BI__(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1B_Z_P_BI__(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1B_Z_P_BI__(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2148) = {
    SEE = 2148;
    let msz = Slice(__opcode, 23, 2);
    let size = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1B_Z_P_BI__(msz, size, imm4, Pg, Rn, Zt)
}

val execute_ST1H_Z_P_BI__ : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {8, 16, 32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1H_Z_P_BI__ (VL, esize, g, msize, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            assert(constraint((0 <= 'msize - 1 & 'msize - 1 < 'esize)));
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1H_Z_P_BI__ : (bits(2), bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST1H_Z_P_BI__ (msz, size, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    if size == 0b00 then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = (8 << UInt(size));
    let 'msize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1H_Z_P_BI__(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1H_Z_P_BI__(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1H_Z_P_BI__(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1H_Z_P_BI__(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1H_Z_P_BI__(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2149) = {
    SEE = 2149;
    let msz = Slice(__opcode, 23, 2);
    let size = Slice(__opcode, 21, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1H_Z_P_BI__(msz, size, imm4, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BI__ : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize in {32, 64} & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1W_Z_P_BI__ (VL, esize, g, msize, n, offset, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BI__ : (bits(2), bits(1), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BI__ (msz, sz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = (32 << UInt(sz));
    let 'msize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1W_Z_P_BI__(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1W_Z_P_BI__(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1W_Z_P_BI__(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1W_Z_P_BI__(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1W_Z_P_BI__(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2150) = {
    SEE = 2150;
    let msz = Slice(__opcode, 23, 2);
    let sz = Slice(__opcode, 21, 1);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BI__(msz, sz, imm4, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BI__ : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1D_Z_P_BI__ (VL, esize, g, msize, n, offset, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BI__ : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BI__ (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1D_Z_P_BI__(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1D_Z_P_BI__(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1D_Z_P_BI__(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1D_Z_P_BI__(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1D_Z_P_BI__(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2151) = {
    SEE = 2151;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BI__(msz, imm4, Pg, Rn, Zt)
}

val execute_ST1W_Z_P_BI_U128 : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1W_Z_P_BI_U128 (VL, esize, g, msize, n, offset, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1W_Z_P_BI_U128 : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST1W_Z_P_BI_U128 (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1W_Z_P_BI_U128(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1W_Z_P_BI_U128(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1W_Z_P_BI_U128(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1W_Z_P_BI_U128(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1W_Z_P_BI_U128(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2152) = {
    SEE = 2152;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1W_Z_P_BI_U128(msz, imm4, Pg, Rn, Zt)
}

val execute_ST1D_Z_P_BI_U128 : forall 'VL 'esize 'g 'msize 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('msize), int('n), int('offset), int('t)) -> unit

function execute_ST1D_Z_P_BI_U128 (VL, esize, g, msize, n, offset, t) = {
    if esize < 128 then {
        CheckSVEEnabled()
    } else {
        CheckNonStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_ST1D_Z_P_BI_U128 : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST1D_Z_P_BI_U128 (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'msize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1D_Z_P_BI_U128(128, esize, g, msize, n, offset, t)
      },
      256 => {
          execute_ST1D_Z_P_BI_U128(256, esize, g, msize, n, offset, t)
      },
      512 => {
          execute_ST1D_Z_P_BI_U128(512, esize, g, msize, n, offset, t)
      },
      1024 => {
          execute_ST1D_Z_P_BI_U128(1024, esize, g, msize, n, offset, t)
      },
      2048 => {
          execute_ST1D_Z_P_BI_U128(2048, esize, g, msize, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2153) = {
    SEE = 2153;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1D_Z_P_BI_U128(msz, imm4, Pg, Rn, Zt)
}

val execute_STNT1B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_STNT1B_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1B_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_STNT1B_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_STNT1B_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_STNT1B_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_STNT1B_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2154) = {
    SEE = 2154;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_STNT1H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_STNT1H_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1H_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_STNT1H_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_STNT1H_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_STNT1H_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_STNT1H_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2155) = {
    SEE = 2155;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_STNT1W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_STNT1W_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1W_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_STNT1W_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_STNT1W_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_STNT1W_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_STNT1W_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2156) = {
    SEE = 2156;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_STNT1D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'offset 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('offset), int('t)) -> unit

function execute_STNT1D_Z_P_BI_Contiguous (VL, esize, g, n, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let 'mbytes = DIV(esize, 8);
    src : bits('VL) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        src = Z_read(t, VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let 'eoff = offset * elements + e;
            let addr : bits(64) = base + eoff * mbytes;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
        };
        ()
    }
}

val decode_STNT1D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1D_Z_P_BI_Contiguous(128, esize, g, n, offset, t)
      },
      256 => {
          execute_STNT1D_Z_P_BI_Contiguous(256, esize, g, n, offset, t)
      },
      512 => {
          execute_STNT1D_Z_P_BI_Contiguous(512, esize, g, n, offset, t)
      },
      1024 => {
          execute_STNT1D_Z_P_BI_Contiguous(1024, esize, g, n, offset, t)
      },
      2048 => {
          execute_STNT1D_Z_P_BI_Contiguous(2048, esize, g, n, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2157) = {
    SEE = 2157;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST2B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST2B_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST2B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2B_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST2B_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST2B_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST2B_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST2B_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2158) = {
    SEE = 2158;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST2H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST2H_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST2H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2H_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST2H_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST2H_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST2H_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST2H_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2159) = {
    SEE = 2159;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST2W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST2W_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST2W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2W_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST2W_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST2W_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST2W_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST2W_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2160) = {
    SEE = 2160;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST2D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST2D_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST2D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2D_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST2D_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST2D_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST2D_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST2D_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2161) = {
    SEE = 2161;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST3B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST3B_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST3B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3B_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST3B_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST3B_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST3B_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST3B_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2162) = {
    SEE = 2162;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST3H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST3H_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST3H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3H_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST3H_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST3H_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST3H_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST3H_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2163) = {
    SEE = 2163;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST3W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST3W_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST3W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3W_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST3W_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST3W_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST3W_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST3W_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2164) = {
    SEE = 2164;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST3D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST3D_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST3D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3D_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST3D_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST3D_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST3D_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST3D_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitzero, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2165) = {
    SEE = 2165;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST4B_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST4B_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4B_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST4B_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4B_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST4B_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST4B_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST4B_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST4B_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2166) = {
    SEE = 2166;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4B_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST4H_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST4H_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4H_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST4H_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4H_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST4H_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST4H_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST4H_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST4H_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2167) = {
    SEE = 2167;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4H_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST4W_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST4W_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4W_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST4W_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4W_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST4W_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST4W_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST4W_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST4W_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2168) = {
    SEE = 2168;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4W_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST4D_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST4D_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4D_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST4D_Z_P_BI_Contiguous (msz, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE()) & not_bool(HaveSME()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4D_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST4D_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST4D_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST4D_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST4D_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitone, bitone, bitone, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2169) = {
    SEE = 2169;
    let msz = Slice(__opcode, 23, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4D_Z_P_BI_Contiguous(msz, imm4, Pg, Rn, Zt)
}

val execute_ST2Q_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST2Q_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(2, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST2Q_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST2Q_Z_P_BI_Contiguous (num, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'offset = SInt(imm4);
    let 'nreg = 2;
    match VL {
      128 => {
          execute_ST2Q_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST2Q_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST2Q_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST2Q_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST2Q_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2170) = {
    SEE = 2170;
    let num = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST2Q_Z_P_BI_Contiguous(num, imm4, Pg, Rn, Zt)
}

val execute_ST3Q_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 3 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST3Q_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(3, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST3Q_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST3Q_Z_P_BI_Contiguous (num, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'offset = SInt(imm4);
    let 'nreg = 3;
    match VL {
      128 => {
          execute_ST3Q_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST3Q_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST3Q_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST3Q_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST3Q_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2171) = {
    SEE = 2171;
    let num = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST3Q_Z_P_BI_Contiguous(num, imm4, Pg, Rn, Zt)
}

val execute_ST4Q_Z_P_BI_Contiguous : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 128 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST4Q_Z_P_BI_Contiguous (VL, esize, g, n, nreg, offset, t) = {
    CheckSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    base : bits(64) = undefined;
    let mask : bits('PL) = P_read(g, PL);
    let 'mbytes = DIV(esize, 8);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        values_name[r] = Z_read(MOD(t + r, 32), VL)
    };
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        foreach (r from 0 to (nreg - 1) by 1 in inc) {
            if ActivePredicateElement(mask, e, esize) then {
                let 'eoff = offset * elements * nreg + e * nreg + r;
                let addr : bits(64) = base + eoff * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(values_name[r], e, esize)
            };
            ()
        }
    }
}

val decode_ST4Q_Z_P_BI_Contiguous : (bits(2), bits(4), bits(3), bits(5), bits(5)) -> unit

function decode_ST4Q_Z_P_BI_Contiguous (num, imm4, Pg, Rn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) & not_bool(HaveSME2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Rn);
    let 'g = UInt(Pg);
    let 'esize = 128;
    let 'offset = SInt(imm4);
    let 'nreg = 4;
    match VL {
      128 => {
          execute_ST4Q_Z_P_BI_Contiguous(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST4Q_Z_P_BI_Contiguous(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST4Q_Z_P_BI_Contiguous(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST4Q_Z_P_BI_Contiguous(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST4Q_Z_P_BI_Contiguous(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2172) = {
    SEE = 2172;
    let num = Slice(__opcode, 22, 2);
    let imm4 = Slice(__opcode, 16, 4);
    let Pg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST4Q_Z_P_BI_Contiguous(num, imm4, Pg, Rn, Zt)
}

val execute_LDNT1B_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1B_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1B_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1B_Z_P_AR_S_x32_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDNT1B_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1B_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1B_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1B_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1B_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2173) = {
    SEE = 2173;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1B_Z_P_AR_S_x32_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1H_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1H_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1H_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1H_Z_P_AR_S_x32_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDNT1H_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1H_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1H_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1H_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1H_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2174) = {
    SEE = 2174;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1H_Z_P_AR_S_x32_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1W_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1W_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1W_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1W_Z_P_AR_S_x32_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDNT1W_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1W_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1W_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1W_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1W_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2175) = {
    SEE = 2175;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1W_Z_P_AR_S_x32_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1SB_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1SB_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1SB_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1SB_Z_P_AR_S_x32_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDNT1SB_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1SB_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1SB_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1SB_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1SB_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2176) = {
    SEE = 2176;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1SB_Z_P_AR_S_x32_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1SH_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1SH_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1SH_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1SH_Z_P_AR_S_x32_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDNT1SH_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1SH_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1SH_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1SH_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1SH_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2177) = {
    SEE = 2177;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 13, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1SH_Z_P_AR_S_x32_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1B_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1B_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1B_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1B_Z_P_AR_D_64_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDNT1B_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1B_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1B_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1B_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1B_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2178) = {
    SEE = 2178;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1B_Z_P_AR_D_64_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1H_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1H_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1H_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1H_Z_P_AR_D_64_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDNT1H_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1H_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1H_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1H_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1H_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2179) = {
    SEE = 2179;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1H_Z_P_AR_D_64_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1W_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1W_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1W_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1W_Z_P_AR_D_64_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDNT1W_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1W_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1W_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1W_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1W_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2180) = {
    SEE = 2180;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1W_Z_P_AR_D_64_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1D_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1D_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1D_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1D_Z_P_AR_D_64_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    let is_unsigned : bool = true;
    match VL {
      128 => {
          execute_LDNT1D_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1D_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1D_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1D_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1D_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2181) = {
    SEE = 2181;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1D_Z_P_AR_D_64_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1SB_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1SB_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1SB_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1SB_Z_P_AR_D_64_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDNT1SB_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1SB_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1SB_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1SB_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1SB_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2182) = {
    SEE = 2182;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1SB_Z_P_AR_D_64_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1SH_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1SH_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1SH_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1SH_Z_P_AR_D_64_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDNT1SH_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1SH_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1SH_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1SH_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1SH_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2183) = {
    SEE = 2183;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1SH_Z_P_AR_D_64_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_LDNT1SW_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g ('is_unsigned : Bool) 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t), bool('is_unsigned)) -> unit

function execute_LDNT1SW_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t, is_unsigned) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    data : bits('msize) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            data = Mem_read(addr, mbytes, accdesc);
            result = Elem_set(result, e, esize, Extend(data, esize, is_unsigned))
        } else {
            result = Elem_set(result, e, esize, Zeros(esize))
        }
    };
    Z_set(t, VL) = result
}

val decode_LDNT1SW_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(1), bits(3), bits(5), bits(5)) -> unit

function decode_LDNT1SW_Z_P_AR_D_64_unscaled (msz, Rm, U, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    let is_unsigned : bool = false;
    match VL {
      128 => {
          execute_LDNT1SW_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t, is_unsigned)
      },
      256 => {
          execute_LDNT1SW_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t, is_unsigned)
      },
      512 => {
          execute_LDNT1SW_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t, is_unsigned)
      },
      1024 => {
          execute_LDNT1SW_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t, is_unsigned)
      },
      2048 => {
          execute_LDNT1SW_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t, is_unsigned)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2184) = {
    SEE = 2184;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let U = Slice(__opcode, 14, 1);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LDNT1SW_Z_P_AR_D_64_unscaled(msz, Rm, U, Pg, Zn, Zt)
}

val execute_STNT1B_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_STNT1B_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_STNT1B_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1B_Z_P_AR_S_x32_unscaled (msz, Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 8;
    match VL {
      128 => {
          execute_STNT1B_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_STNT1B_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_STNT1B_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_STNT1B_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_STNT1B_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2185) = {
    SEE = 2185;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1B_Z_P_AR_S_x32_unscaled(msz, Rm, Pg, Zn, Zt)
}

val execute_STNT1H_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_STNT1H_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_STNT1H_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1H_Z_P_AR_S_x32_unscaled (msz, Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 16;
    match VL {
      128 => {
          execute_STNT1H_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_STNT1H_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_STNT1H_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_STNT1H_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_STNT1H_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2186) = {
    SEE = 2186;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1H_Z_P_AR_S_x32_unscaled(msz, Rm, Pg, Zn, Zt)
}

val execute_STNT1W_Z_P_AR_S_x32_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_STNT1W_Z_P_AR_S_x32_unscaled (VL, esize, g, m, msize, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_STNT1W_Z_P_AR_S_x32_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1W_Z_P_AR_S_x32_unscaled (msz, Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 32;
    let 'msize = 32;
    match VL {
      128 => {
          execute_STNT1W_Z_P_AR_S_x32_unscaled(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_STNT1W_Z_P_AR_S_x32_unscaled(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_STNT1W_Z_P_AR_S_x32_unscaled(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_STNT1W_Z_P_AR_S_x32_unscaled(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_STNT1W_Z_P_AR_S_x32_unscaled(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitone, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2187) = {
    SEE = 2187;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1W_Z_P_AR_S_x32_unscaled(msz, Rm, Pg, Zn, Zt)
}

val execute_STNT1B_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 8 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_STNT1B_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_STNT1B_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1B_Z_P_AR_D_64_unscaled (msz, Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 8;
    match VL {
      128 => {
          execute_STNT1B_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_STNT1B_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_STNT1B_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_STNT1B_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_STNT1B_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2188) = {
    SEE = 2188;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1B_Z_P_AR_D_64_unscaled(msz, Rm, Pg, Zn, Zt)
}

val execute_STNT1H_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 16 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_STNT1H_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_STNT1H_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1H_Z_P_AR_D_64_unscaled (msz, Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 16;
    match VL {
      128 => {
          execute_STNT1H_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_STNT1H_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_STNT1H_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_STNT1H_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_STNT1H_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2189) = {
    SEE = 2189;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1H_Z_P_AR_D_64_unscaled(msz, Rm, Pg, Zn, Zt)
}

val execute_STNT1W_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 32 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_STNT1W_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_STNT1W_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1W_Z_P_AR_D_64_unscaled (msz, Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 32;
    match VL {
      128 => {
          execute_STNT1W_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_STNT1W_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_STNT1W_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_STNT1W_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_STNT1W_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2190) = {
    SEE = 2190;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1W_Z_P_AR_D_64_unscaled(msz, Rm, Pg, Zn, Zt)
}

val execute_STNT1D_Z_P_AR_D_64_unscaled : forall 'VL 'esize 'g 'm 'msize 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 'msize == 64 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('msize), int('n), int('t)) -> unit

function execute_STNT1D_Z_P_AR_D_64_unscaled (VL, esize, g, m, msize, n, t) = {
    CheckNonStreamingSVEEnabled();
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let 'mbytes = DIV(msize, 8);
    let contiguous : bool = false;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, esize) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, esize) then {
            let addr : bits(64) = ZeroExtend(Elem_read(base, e, esize), 64) + offset;
            Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)[msize - 1 .. 0]
        };
        ()
    }
}

val decode_STNT1D_Z_P_AR_D_64_unscaled : (bits(2), bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_STNT1D_Z_P_AR_D_64_unscaled (msz, Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    let 'esize = 64;
    let 'msize = 64;
    match VL {
      128 => {
          execute_STNT1D_Z_P_AR_D_64_unscaled(128, esize, g, m, msize, n, t)
      },
      256 => {
          execute_STNT1D_Z_P_AR_D_64_unscaled(256, esize, g, m, msize, n, t)
      },
      512 => {
          execute_STNT1D_Z_P_AR_D_64_unscaled(512, esize, g, m, msize, n, t)
      },
      1024 => {
          execute_STNT1D_Z_P_AR_D_64_unscaled(1024, esize, g, m, msize, n, t)
      },
      2048 => {
          execute_STNT1D_Z_P_AR_D_64_unscaled(2048, esize, g, m, msize, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitone, bitone, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2191) = {
    SEE = 2191;
    let msz = Slice(__opcode, 23, 2);
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_STNT1D_Z_P_AR_D_64_unscaled(msz, Rm, Pg, Zn, Zt)
}

val execute_LD1Q_Z_P_AR_D_64_unscaled : forall 'VL 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('g), int('m), int('n), int('t)) -> unit

function execute_LD1Q_Z_P_AR_D_64_unscaled (VL, g, m, n, t) = {
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    CheckNonStreamingSVEEnabled();
    let 'elements = DIV(VL, 128);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    result : bits('VL) = undefined;
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, 128) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64)
    };
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 128) then {
            let addr : bits(64) = Elem_read(base, 2 * e, 64) + offset;
            result = Elem_set(result, e, 128, Mem_read(addr, 16, accdesc))
        } else {
            result = Elem_set(result, e, 128, Zeros(128))
        }
    };
    Z_set(t, VL) = result
}

val decode_LD1Q_Z_P_AR_D_64_unscaled : (bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_LD1Q_Z_P_AR_D_64_unscaled (Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    match VL {
      128 => {
          execute_LD1Q_Z_P_AR_D_64_unscaled(128, g, m, n, t)
      },
      256 => {
          execute_LD1Q_Z_P_AR_D_64_unscaled(256, g, m, n, t)
      },
      512 => {
          execute_LD1Q_Z_P_AR_D_64_unscaled(512, g, m, n, t)
      },
      1024 => {
          execute_LD1Q_Z_P_AR_D_64_unscaled(1024, g, m, n, t)
      },
      2048 => {
          execute_LD1Q_Z_P_AR_D_64_unscaled(2048, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2192) = {
    SEE = 2192;
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_LD1Q_Z_P_AR_D_64_unscaled(Rm, Pg, Zn, Zt)
}

val execute_ST1Q_Z_P_AR_D_64_unscaled : forall 'VL 'g 'm 'n 't,
  (0 <= 't & 't <= 31 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 'g in {0, 1, 2, 3, 4, 5, 6, 7} & is_VL('VL)).
  (int('VL), int('g), int('m), int('n), int('t)) -> unit

function execute_ST1Q_Z_P_AR_D_64_unscaled (VL, g, m, n, t) = {
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    CheckNonStreamingSVEEnabled();
    let 'elements = DIV(VL, 128);
    let mask : bits('PL) = P_read(g, PL);
    base : bits('VL) = undefined;
    offset : bits(64) = undefined;
    src : bits('VL) = undefined;
    let contiguous : bool = false;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if AnyActiveElement(mask, 128) then {
        base = Z_read(n, VL);
        offset = X_read(m, 64);
        src = Z_read(t, VL)
    };
    let src = src;
    let offset = offset;
    let base = base;
    foreach (e from 0 to (elements - 1) by 1 in inc) {
        if ActivePredicateElement(mask, e, 128) then {
            let addr : bits(64) = Elem_read(base, 2 * e, 64) + offset;
            Mem_set(addr, 16, accdesc) = Elem_read(src, e, 128)
        };
        ()
    }
}

val decode_ST1Q_Z_P_AR_D_64_unscaled : (bits(5), bits(3), bits(5), bits(5)) -> unit

function decode_ST1Q_Z_P_AR_D_64_unscaled (Rm, Pg, Zn, Zt) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 't = UInt(Zt);
    let 'n = UInt(Zn);
    let 'm = UInt(Rm);
    let 'g = UInt(Pg);
    match VL {
      128 => {
          execute_ST1Q_Z_P_AR_D_64_unscaled(128, g, m, n, t)
      },
      256 => {
          execute_ST1Q_Z_P_AR_D_64_unscaled(256, g, m, n, t)
      },
      512 => {
          execute_ST1Q_Z_P_AR_D_64_unscaled(512, g, m, n, t)
      },
      1024 => {
          execute_ST1Q_Z_P_AR_D_64_unscaled(1024, g, m, n, t)
      },
      2048 => {
          execute_ST1Q_Z_P_AR_D_64_unscaled(2048, g, m, n, t)
      }
    }
}

function clause __DecodeA64_SVE ((pc, ([bitone, bitone, bitone, bitzero, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, _] as __opcode)) if SEE < 2193) = {
    SEE = 2193;
    let Rm = Slice(__opcode, 16, 5);
    let Pg = Slice(__opcode, 10, 3);
    let Zn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 0, 5);
    decode_ST1Q_Z_P_AR_D_64_unscaled(Rm, Pg, Zn, Zt)
}

val execute_LD1B_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1B_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1B_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1B_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LD1B_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1B_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1B_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1B_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1B_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2194) = {
    SEE = 2194;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1B_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1H_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1H_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1H_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1H_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LD1H_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1H_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1H_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1H_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1H_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2195) = {
    SEE = 2195;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1H_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1W_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1W_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1W_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1W_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LD1W_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1W_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1W_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1W_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1W_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2196) = {
    SEE = 2196;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1W_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1D_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1D_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1D_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1D_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LD1D_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1D_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1D_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1D_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1D_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2197) = {
    SEE = 2197;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1D_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1B_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1B_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1B_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1B_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LD1B_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1B_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1B_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1B_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1B_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2198) = {
    SEE = 2198;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1B_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1H_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1H_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1H_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1H_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LD1H_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1H_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1H_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1H_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1H_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2199) = {
    SEE = 2199;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1H_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1W_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1W_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1W_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1W_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LD1W_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1W_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1W_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1W_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1W_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2200) = {
    SEE = 2200;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1W_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1D_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LD1D_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1D_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1D_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LD1D_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LD1D_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LD1D_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LD1D_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LD1D_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2201) = {
    SEE = 2201;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1D_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1B_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1B_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1B_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1B_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LDNT1B_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1B_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1B_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1B_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1B_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2202) = {
    SEE = 2202;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1B_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1H_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1H_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1H_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1H_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LDNT1H_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1H_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1H_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1H_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1H_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2203) = {
    SEE = 2203;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1H_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1W_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1W_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1W_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1W_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LDNT1W_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1W_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1W_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1W_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1W_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2204) = {
    SEE = 2204;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1W_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1D_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1D_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1D_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1D_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LDNT1D_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1D_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1D_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1D_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1D_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2205) = {
    SEE = 2205;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1D_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1B_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1B_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1B_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1B_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    match VL {
      128 => {
          execute_LDNT1B_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1B_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1B_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1B_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1B_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2206) = {
    SEE = 2206;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1B_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1H_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1H_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1H_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1H_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    match VL {
      128 => {
          execute_LDNT1H_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1H_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1H_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1H_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1H_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2207) = {
    SEE = 2207;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1H_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1W_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1W_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1W_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1W_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    match VL {
      128 => {
          execute_LDNT1W_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1W_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1W_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1W_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1W_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2208) = {
    SEE = 2208;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1W_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1D_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_LDNT1D_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1D_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1D_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    match VL {
      128 => {
          execute_LDNT1D_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_LDNT1D_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_LDNT1D_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_LDNT1D_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_LDNT1D_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2209) = {
    SEE = 2209;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1D_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1B_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1B_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1B_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1B_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    match VL {
      128 => {
          execute_ST1B_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1B_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1B_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1B_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1B_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2210) = {
    SEE = 2210;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1B_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1H_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1H_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1H_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1H_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    match VL {
      128 => {
          execute_ST1H_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1H_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1H_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1H_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1H_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2211) = {
    SEE = 2211;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1H_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1W_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1W_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1W_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1W_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    match VL {
      128 => {
          execute_ST1W_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1W_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1W_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1W_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1W_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2212) = {
    SEE = 2212;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1W_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1D_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1D_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1D_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1D_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    match VL {
      128 => {
          execute_ST1D_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1D_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1D_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1D_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1D_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2213) = {
    SEE = 2213;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1D_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1B_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1B_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1B_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1B_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    match VL {
      128 => {
          execute_ST1B_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1B_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1B_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1B_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1B_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2214) = {
    SEE = 2214;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1B_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1H_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1H_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1H_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1H_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    match VL {
      128 => {
          execute_ST1H_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1H_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1H_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1H_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1H_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2215) = {
    SEE = 2215;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1H_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1W_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1W_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1W_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1W_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    match VL {
      128 => {
          execute_ST1W_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1W_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1W_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1W_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1W_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2216) = {
    SEE = 2216;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1W_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_ST1D_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_ST1D_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1D_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1D_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    match VL {
      128 => {
          execute_ST1D_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_ST1D_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_ST1D_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_ST1D_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_ST1D_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2217) = {
    SEE = 2217;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1D_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1B_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1B_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1B_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1B_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    match VL {
      128 => {
          execute_STNT1B_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1B_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1B_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1B_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1B_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2218) = {
    SEE = 2218;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1B_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1H_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1H_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1H_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1H_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    match VL {
      128 => {
          execute_STNT1H_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1H_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1H_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1H_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1H_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2219) = {
    SEE = 2219;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1H_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1W_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1W_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1W_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1W_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    match VL {
      128 => {
          execute_STNT1W_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1W_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1W_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1W_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1W_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2220) = {
    SEE = 2220;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1W_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1D_MZ_P_BR_2 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1D_MZ_P_BR_2 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1D_MZ_P_BR_2 : (bits(5), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1D_MZ_P_BR_2 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    match VL {
      128 => {
          execute_STNT1D_MZ_P_BR_2(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1D_MZ_P_BR_2(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1D_MZ_P_BR_2(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1D_MZ_P_BR_2(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1D_MZ_P_BR_2(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2221) = {
    SEE = 2221;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1D_MZ_P_BR_2(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1B_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1B_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1B_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1B_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    match VL {
      128 => {
          execute_STNT1B_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1B_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1B_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1B_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1B_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2222) = {
    SEE = 2222;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1B_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1H_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1H_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1H_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1H_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    match VL {
      128 => {
          execute_STNT1H_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1H_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1H_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1H_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1H_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2223) = {
    SEE = 2223;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1H_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1W_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1W_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1W_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1W_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    match VL {
      128 => {
          execute_STNT1W_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1W_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1W_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1W_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1W_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2224) = {
    SEE = 2224;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1W_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_STNT1D_MZ_P_BR_4 : forall 'VL 'esize 'g 'm 'n 'nreg 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'm & 'm <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('m), int('n), int('nreg), int('t)) -> unit

function execute_STNT1D_MZ_P_BR_4 (VL, esize, g, m, n, nreg, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    offset : bits(64) = undefined;
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = true;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64);
        offset = X_read(m, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (UInt(offset) + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1D_MZ_P_BR_4 : (bits(5), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1D_MZ_P_BR_4 (Rm, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'm = UInt(Rm);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    match VL {
      128 => {
          execute_STNT1D_MZ_P_BR_4(128, esize, g, m, n, nreg, t)
      },
      256 => {
          execute_STNT1D_MZ_P_BR_4(256, esize, g, m, n, nreg, t)
      },
      512 => {
          execute_STNT1D_MZ_P_BR_4(512, esize, g, m, n, nreg, t)
      },
      1024 => {
          execute_STNT1D_MZ_P_BR_4(1024, esize, g, m, n, nreg, t)
      },
      2048 => {
          execute_STNT1D_MZ_P_BR_4(2048, esize, g, m, n, nreg, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, _, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2225) = {
    SEE = 2225;
    let Rm = Slice(__opcode, 16, 5);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1D_MZ_P_BR_4(Rm, msz, PNg, Rn, Zt, N)
}

val execute_LD1B_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1B_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1B_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1B_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1B_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1B_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1B_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1B_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2226) = {
    SEE = 2226;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1B_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LD1H_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1H_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1H_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1H_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1H_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1H_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1H_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1H_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1H_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2227) = {
    SEE = 2227;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1H_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LD1W_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1W_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1W_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1W_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1W_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1W_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1W_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1W_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1W_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2228) = {
    SEE = 2228;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1W_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LD1D_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1D_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1D_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LD1D_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1D_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1D_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1D_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1D_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1D_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2229) = {
    SEE = 2229;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LD1D_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LD1B_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1B_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1B_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1B_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1B_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1B_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1B_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1B_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1B_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2230) = {
    SEE = 2230;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1B_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LD1H_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1H_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1H_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1H_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1H_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1H_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1H_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1H_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1H_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2231) = {
    SEE = 2231;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1H_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LD1W_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1W_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1W_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1W_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1W_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1W_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1W_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1W_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1W_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2232) = {
    SEE = 2232;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1W_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LD1D_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LD1D_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LD1D_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LD1D_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LD1D_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LD1D_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LD1D_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LD1D_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LD1D_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2233) = {
    SEE = 2233;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LD1D_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1B_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1B_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1B_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1B_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1B_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1B_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1B_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1B_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1B_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2234) = {
    SEE = 2234;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1B_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1H_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1H_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1H_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1H_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1H_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1H_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1H_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1H_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1H_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2235) = {
    SEE = 2235;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1H_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1W_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1W_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1W_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1W_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1W_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1W_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1W_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1W_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1W_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2236) = {
    SEE = 2236;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1W_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1D_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1D_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1D_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_LDNT1D_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1D_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1D_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1D_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1D_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1D_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2237) = {
    SEE = 2237;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1D_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1B_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1B_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1B_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1B_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1B_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1B_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1B_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1B_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1B_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2238) = {
    SEE = 2238;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1B_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1H_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1H_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1H_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1H_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1H_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1H_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1H_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1H_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1H_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2239) = {
    SEE = 2239;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1H_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1W_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1W_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1W_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1W_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1W_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1W_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1W_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1W_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1W_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2240) = {
    SEE = 2240;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1W_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_LDNT1D_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_LDNT1D_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    values_name : vector(4, bits('VL)) = undefined;
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_LOAD, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                values_name[r] = Elem_set(values_name[r], e, esize, Mem_read(addr, mbytes, accdesc))
            } else {
                values_name[r] = Elem_set(values_name[r], e, esize, Zeros(esize))
            }
        }
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        Z_set(t + r, VL) = values_name[r]
    }
}

val decode_LDNT1D_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_LDNT1D_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_LDNT1D_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_LDNT1D_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_LDNT1D_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_LDNT1D_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_LDNT1D_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitzero, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2241) = {
    SEE = 2241;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_LDNT1D_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1B_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1B_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1B_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1B_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1B_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1B_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1B_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1B_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1B_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2242) = {
    SEE = 2242;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1B_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1H_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1H_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1H_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1H_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1H_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1H_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1H_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1H_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1H_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2243) = {
    SEE = 2243;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1H_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1W_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1W_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1W_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1W_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1W_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1W_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1W_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1W_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1W_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2244) = {
    SEE = 2244;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1W_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1D_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1D_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1D_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_ST1D_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1D_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1D_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1D_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1D_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1D_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitzero] as __opcode)) if SEE < 2245) = {
    SEE = 2245;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_ST1D_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1B_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1B_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1B_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1B_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1B_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1B_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1B_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1B_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1B_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2246) = {
    SEE = 2246;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1B_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1H_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1H_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1H_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1H_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1H_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1H_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1H_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1H_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1H_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2247) = {
    SEE = 2247;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1H_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1W_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1W_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1W_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1W_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1W_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1W_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1W_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1W_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1W_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2248) = {
    SEE = 2248;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1W_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_ST1D_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_ST1D_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = false;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_ST1D_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_ST1D_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_ST1D_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_ST1D_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_ST1D_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_ST1D_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_ST1D_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitzero] as __opcode)) if SEE < 2249) = {
    SEE = 2249;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_ST1D_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1B_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1B_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1B_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1B_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1B_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1B_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1B_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1B_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1B_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2250) = {
    SEE = 2250;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1B_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1H_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1H_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1H_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1H_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1H_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1H_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1H_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1H_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1H_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2251) = {
    SEE = 2251;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1H_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1W_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1W_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1W_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1W_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1W_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1W_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1W_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1W_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1W_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2252) = {
    SEE = 2252;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1W_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1D_MZ_P_BI_2 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 2 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1D_MZ_P_BI_2 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1D_MZ_P_BI_2 : (bits(4), bits(2), bits(3), bits(5), bits(4), bits(1)) -> unit

function decode_STNT1D_MZ_P_BI_2 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 2;
    let 't = UInt(Zt @ 0b0);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1D_MZ_P_BI_2(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1D_MZ_P_BI_2(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1D_MZ_P_BI_2(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1D_MZ_P_BI_2(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1D_MZ_P_BI_2(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitzero, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, _, bitone] as __opcode)) if SEE < 2253) = {
    SEE = 2253;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 1, 4);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1D_MZ_P_BI_2(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1B_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 8 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1B_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1B_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1B_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 8;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1B_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1B_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1B_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1B_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1B_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2254) = {
    SEE = 2254;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1B_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1H_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 16 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1H_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1H_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1H_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 16;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1H_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1H_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1H_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1H_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1H_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitzero, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2255) = {
    SEE = 2255;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1H_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1W_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 32 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1W_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1W_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1W_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 32;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1W_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1W_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1W_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1W_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1W_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitzero, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2256) = {
    SEE = 2256;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1W_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}

val execute_STNT1D_MZ_P_BI_4 : forall 'VL 'esize 'g 'n 'nreg 'offset 't,
  (0 <= 't & 't <= 31 & 'nreg == 4 & 0 <= 'n & 'n <= 31 & 0 <= 'g & 'g <= 15 & 'esize == 64 & is_VL('VL)).
  (int('VL), int('esize), int('g), int('n), int('nreg), int('offset), int('t)) -> unit

function execute_STNT1D_MZ_P_BI_4 (VL, esize, g, n, nreg, offset, t) = {
    if HaveSVE2p1() then {
        CheckSVEEnabled()
    } else {
        CheckStreamingSVEEnabled()
    };
    let 'VL = VL;
    let 'PL = DIV(VL, 8);
    let 'elements = DIV(VL, esize);
    let 'mbytes = DIV(esize, 8);
    base : bits(64) = undefined;
    src : bits('VL) = undefined;
    let pred : bits('PL) = P_read(g, PL);
    let mask : bits('PL * 'nreg) = CounterToPredicate(pred[15 .. 0], PL * nreg);
    let contiguous : bool = true;
    let nontemporal : bool = true;
    let tagchecked : bool = n != 31;
    let accdesc : AccessDescriptor = CreateAccDescSVE(MemOp_STORE, nontemporal, contiguous, tagchecked);
    if not_bool(AnyActiveElement(mask, esize)) then {
        if n == 31 & ConstrainUnpredictableBool(Unpredictable_CHECKSPNONEACTIVE) then {
            CheckSPAlignment()
        };
        ()
    } else {
        if n == 31 then {
            CheckSPAlignment()
        };
        base = if n == 31 then SP_read() else X_read(n, 64)
    };
    foreach (r from 0 to (nreg - 1) by 1 in inc) {
        src = Z_read(t + r, VL);
        foreach (e from 0 to (elements - 1) by 1 in inc) {
            if ActivePredicateElement(mask, r * elements + e, esize) then {
                let addr : bits(64) = base + (offset * nreg * elements + r * elements + e) * mbytes;
                Mem_set(addr, mbytes, accdesc) = Elem_read(src, e, esize)
            };
            ()
        }
    }
}

val decode_STNT1D_MZ_P_BI_4 : (bits(4), bits(2), bits(3), bits(5), bits(3), bits(1)) -> unit

function decode_STNT1D_MZ_P_BI_4 (imm4, msz, PNg, Rn, Zt, N) = {
    let 'VL = CurrentVL_read();
    if not_bool(HaveSME2()) & not_bool(HaveSVE2p1()) then {
        throw(Error_Undefined())
    };
    let 'n = UInt(Rn);
    let 'g = UInt(0b1 @ PNg);
    let 'nreg = 4;
    let 't = UInt(Zt @ 0b00);
    let 'esize = 64;
    let 'offset = SInt(imm4);
    match VL {
      128 => {
          execute_STNT1D_MZ_P_BI_4(128, esize, g, n, nreg, offset, t)
      },
      256 => {
          execute_STNT1D_MZ_P_BI_4(256, esize, g, n, nreg, offset, t)
      },
      512 => {
          execute_STNT1D_MZ_P_BI_4(512, esize, g, n, nreg, offset, t)
      },
      1024 => {
          execute_STNT1D_MZ_P_BI_4(1024, esize, g, n, nreg, offset, t)
      },
      2048 => {
          execute_STNT1D_MZ_P_BI_4(2048, esize, g, n, nreg, offset, t)
      }
    }
}

function clause __DecodeA64_SME ((pc, ([bitone, bitzero, bitone, bitzero, bitzero, bitzero, bitzero, bitzero, bitzero, bitone, bitone, bitzero, _, _, _, _, bitone, bitone, bitone, _, _, _, _, _, _, _, _, _, _, _, bitzero, bitone] as __opcode)) if SEE < 2257) = {
    SEE = 2257;
    let imm4 = Slice(__opcode, 16, 4);
    let msz = Slice(__opcode, 13, 2);
    let PNg = Slice(__opcode, 10, 3);
    let Rn = Slice(__opcode, 5, 5);
    let Zt = Slice(__opcode, 2, 3);
    let N = Slice(__opcode, 0, 1);
    decode_STNT1D_MZ_P_BI_4(imm4, msz, PNg, Rn, Zt, N)
}
